// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concertCtrl.proto

#include "concertCtrl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_concertCtrl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CtrlFlyPlayer_concertCtrl_2eproto;
namespace concert {
class CCtrlToggleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCtrlToggle> _instance;
} _CCtrlToggle_default_instance_;
class SCtrlBroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCtrlBroadcast> _instance;
} _SCtrlBroadcast_default_instance_;
class CtrlFlyPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CtrlFlyPlayer> _instance;
} _CtrlFlyPlayer_default_instance_;
class SAreaJumpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAreaJump> _instance;
} _SAreaJump_default_instance_;
class SCtrlFlyBroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCtrlFlyBroadcast> _instance;
} _SCtrlFlyBroadcast_default_instance_;
class SFlyTimelineBroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SFlyTimelineBroadcast> _instance;
} _SFlyTimelineBroadcast_default_instance_;
class CConcertFlyInitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CConcertFlyInit> _instance;
} _CConcertFlyInit_default_instance_;
class SCtrlLiftBroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCtrlLiftBroadcast> _instance;
} _SCtrlLiftBroadcast_default_instance_;
class SCtrlEncoreBroadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCtrlEncoreBroadcast> _instance;
} _SCtrlEncoreBroadcast_default_instance_;
class CCtrlInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCtrlInfo> _instance;
} _CCtrlInfo_default_instance_;
class SCtrlInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCtrlInfo> _instance;
} _SCtrlInfo_default_instance_;
class CCtrlHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CCtrlHeartBeat> _instance;
} _CCtrlHeartBeat_default_instance_;
class SCtrlHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SCtrlHeartBeat> _instance;
} _SCtrlHeartBeat_default_instance_;
class CtrlManualDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CtrlManual> _instance;
} _CtrlManual_default_instance_;
class SBroadCtrlManualDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBroadCtrlManual> _instance;
} _SBroadCtrlManual_default_instance_;
}  // namespace concert
static void InitDefaultsscc_info_CConcertFlyInit_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_CConcertFlyInit_default_instance_;
    new (ptr) ::concert::CConcertFlyInit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::CConcertFlyInit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CConcertFlyInit_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CConcertFlyInit_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_CCtrlHeartBeat_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_CCtrlHeartBeat_default_instance_;
    new (ptr) ::concert::CCtrlHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::CCtrlHeartBeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCtrlHeartBeat_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCtrlHeartBeat_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_CCtrlInfo_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_CCtrlInfo_default_instance_;
    new (ptr) ::concert::CCtrlInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::CCtrlInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCtrlInfo_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCtrlInfo_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_CCtrlToggle_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_CCtrlToggle_default_instance_;
    new (ptr) ::concert::CCtrlToggle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::CCtrlToggle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CCtrlToggle_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CCtrlToggle_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_CtrlFlyPlayer_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_CtrlFlyPlayer_default_instance_;
    new (ptr) ::concert::CtrlFlyPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::CtrlFlyPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CtrlFlyPlayer_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CtrlFlyPlayer_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_CtrlManual_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_CtrlManual_default_instance_;
    new (ptr) ::concert::CtrlManual();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::CtrlManual::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CtrlManual_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CtrlManual_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_SAreaJump_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_SAreaJump_default_instance_;
    new (ptr) ::concert::SAreaJump();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::SAreaJump::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAreaJump_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SAreaJump_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_SBroadCtrlManual_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_SBroadCtrlManual_default_instance_;
    new (ptr) ::concert::SBroadCtrlManual();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::SBroadCtrlManual::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SBroadCtrlManual_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SBroadCtrlManual_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_SCtrlBroadcast_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_SCtrlBroadcast_default_instance_;
    new (ptr) ::concert::SCtrlBroadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::SCtrlBroadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCtrlBroadcast_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCtrlBroadcast_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_SCtrlEncoreBroadcast_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_SCtrlEncoreBroadcast_default_instance_;
    new (ptr) ::concert::SCtrlEncoreBroadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::SCtrlEncoreBroadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCtrlEncoreBroadcast_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCtrlEncoreBroadcast_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_SCtrlFlyBroadcast_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_SCtrlFlyBroadcast_default_instance_;
    new (ptr) ::concert::SCtrlFlyBroadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::SCtrlFlyBroadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SCtrlFlyBroadcast_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SCtrlFlyBroadcast_concertCtrl_2eproto}, {
      &scc_info_CtrlFlyPlayer_concertCtrl_2eproto.base,}};

static void InitDefaultsscc_info_SCtrlHeartBeat_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_SCtrlHeartBeat_default_instance_;
    new (ptr) ::concert::SCtrlHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::SCtrlHeartBeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCtrlHeartBeat_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCtrlHeartBeat_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_SCtrlInfo_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_SCtrlInfo_default_instance_;
    new (ptr) ::concert::SCtrlInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::SCtrlInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCtrlInfo_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCtrlInfo_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_SCtrlLiftBroadcast_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_SCtrlLiftBroadcast_default_instance_;
    new (ptr) ::concert::SCtrlLiftBroadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::SCtrlLiftBroadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SCtrlLiftBroadcast_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SCtrlLiftBroadcast_concertCtrl_2eproto}, {}};

static void InitDefaultsscc_info_SFlyTimelineBroadcast_concertCtrl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::concert::_SFlyTimelineBroadcast_default_instance_;
    new (ptr) ::concert::SFlyTimelineBroadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::concert::SFlyTimelineBroadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SFlyTimelineBroadcast_concertCtrl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SFlyTimelineBroadcast_concertCtrl_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_concertCtrl_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_concertCtrl_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_concertCtrl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_concertCtrl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::CCtrlToggle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::CCtrlToggle, type_),
  PROTOBUF_FIELD_OFFSET(::concert::CCtrlToggle, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlBroadcast, type_),
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlBroadcast, status_),
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlBroadcast, extfirst_),
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlBroadcast, extsecond_),
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlBroadcast, extthird_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::CtrlFlyPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::CtrlFlyPlayer, uid_),
  PROTOBUF_FIELD_OFFSET(::concert::CtrlFlyPlayer, mesh_),
  PROTOBUF_FIELD_OFFSET(::concert::CtrlFlyPlayer, nick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::SAreaJump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::SAreaJump, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlFlyBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlFlyBroadcast, status_),
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlFlyBroadcast, timelineid_),
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlFlyBroadcast, effectid_),
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlFlyBroadcast, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::SFlyTimelineBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::SFlyTimelineBroadcast, timeline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::CConcertFlyInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlLiftBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlEncoreBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::CCtrlInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlInfo, stage_),
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlInfo, keeptime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::CCtrlHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlHeartBeat, stage_),
  PROTOBUF_FIELD_OFFSET(::concert::SCtrlHeartBeat, keeptime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::CtrlManual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::CtrlManual, stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::concert::SBroadCtrlManual, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::concert::SBroadCtrlManual, stage_),
  PROTOBUF_FIELD_OFFSET(::concert::SBroadCtrlManual, stamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::concert::CCtrlToggle)},
  { 7, -1, sizeof(::concert::SCtrlBroadcast)},
  { 17, -1, sizeof(::concert::CtrlFlyPlayer)},
  { 25, -1, sizeof(::concert::SAreaJump)},
  { 31, -1, sizeof(::concert::SCtrlFlyBroadcast)},
  { 40, -1, sizeof(::concert::SFlyTimelineBroadcast)},
  { 46, -1, sizeof(::concert::CConcertFlyInit)},
  { 51, -1, sizeof(::concert::SCtrlLiftBroadcast)},
  { 56, -1, sizeof(::concert::SCtrlEncoreBroadcast)},
  { 61, -1, sizeof(::concert::CCtrlInfo)},
  { 66, -1, sizeof(::concert::SCtrlInfo)},
  { 73, -1, sizeof(::concert::CCtrlHeartBeat)},
  { 78, -1, sizeof(::concert::SCtrlHeartBeat)},
  { 85, -1, sizeof(::concert::CtrlManual)},
  { 91, -1, sizeof(::concert::SBroadCtrlManual)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_CCtrlToggle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_SCtrlBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_CtrlFlyPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_SAreaJump_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_SCtrlFlyBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_SFlyTimelineBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_CConcertFlyInit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_SCtrlLiftBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_SCtrlEncoreBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_CCtrlInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_SCtrlInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_CCtrlHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_SCtrlHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_CtrlManual_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::concert::_SBroadCtrlManual_default_instance_),
};

const char descriptor_table_protodef_concertCtrl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021concertCtrl.proto\022\007concert\">\n\013CCtrlTog"
  "gle\022\037\n\004Type\030\001 \001(\0162\021.concert.CtrlType\022\016\n\006"
  "Status\030\002 \001(\005\"x\n\016SCtrlBroadcast\022\037\n\004Type\030\001"
  " \001(\0162\021.concert.CtrlType\022\016\n\006Status\030\002 \001(\005\022"
  "\020\n\010ExtFirst\030\003 \001(\005\022\021\n\tExtSecond\030\004 \001(\005\022\020\n\010"
  "ExtThird\030\005 \001(\t\"8\n\rCtrlFlyPlayer\022\013\n\003Uid\030\001"
  " \001(\005\022\014\n\004Mesh\030\002 \001(\005\022\014\n\004Nick\030\003 \001(\t\"\030\n\tSAre"
  "aJump\022\013\n\003Uid\030\001 \003(\005\"q\n\021SCtrlFlyBroadcast\022"
  "\016\n\006Status\030\001 \001(\005\022\022\n\nTimelineId\030\002 \001(\005\022\020\n\010E"
  "ffectId\030\003 \001(\005\022&\n\006Player\030\004 \003(\0132\026.concert."
  "CtrlFlyPlayer\")\n\025SFlyTimelineBroadcast\022\020"
  "\n\010Timeline\030\001 \001(\005\"\021\n\017CConcertFlyInit\"\024\n\022S"
  "CtrlLiftBroadcast\"\026\n\024SCtrlEncoreBroadcas"
  "t\"\013\n\tCCtrlInfo\"\?\n\tSCtrlInfo\022 \n\005Stage\030\001 \001"
  "(\0162\021.concert.CtrlType\022\020\n\010KeepTime\030\002 \001(\005\""
  "\020\n\016CCtrlHeartBeat\"D\n\016SCtrlHeartBeat\022 \n\005S"
  "tage\030\001 \001(\0162\021.concert.CtrlType\022\020\n\010KeepTim"
  "e\030\002 \001(\005\".\n\nCtrlManual\022 \n\005Stage\030\001 \001(\0162\021.c"
  "oncert.CtrlType\"C\n\020SBroadCtrlManual\022 \n\005S"
  "tage\030\001 \001(\0162\021.concert.CtrlType\022\r\n\005Stamp\030\002"
  " \001(\003*\377\005\n\010CtrlType\022\013\n\007Default\020\000\022\017\n\013Channe"
  "lGame\020\001\022\020\n\014EnterConcert\020\002\022\016\n\nLeaveStage\020"
  "\003\022\025\n\021DisconnectConcert\020\004\022\r\n\tSongCut_1\020\n\022"
  "\013\n\007OnStage\020\013\022\n\n\006Song_1\020\014\022\n\n\006Cheers\020\r\022\016\n\n"
  "Interact_1\020\016\022\r\n\tSongCut_2\020\024\022\n\n\006Song_2\020\025\022"
  "\016\n\nInteract_2\020\026\022\027\n\023GiftFallScattered_2\020\027"
  "\022\r\n\tSongCut_3\020\036\022\n\n\006Song_3\020\037\022\010\n\004Fish\020 \022\010\n"
  "\004Lift\020!\022\016\n\nInteract_3\020\"\022\r\n\tSongCut_4\020(\022\n"
  "\n\006Song_4\020)\022\r\n\tGlowStick\020*\022\016\n\nInteract_4\020"
  "+\022\027\n\023GiftFallScattered_4\020,\022\020\n\014Interact_4"
  "_2\020-\022\032\n\026StartRankCountdownTips\020.\022\016\n\nFall"
  "Ground\020/\022\014\n\010Screen_4\0200\022\r\n\tSongCut_5\0202\022\n\n"
  "\006Song_5\0203\022\t\n\005Dance\0204\022\016\n\nInteract_5\0205\022\n\n\006"
  "Encore\0206\022\016\n\nScreen_5_1\0207\022\016\n\nScreen_5_2\0208"
  "\022\016\n\nScreen_5_3\0209\022\r\n\tSongCut_6\020<\022\n\n\006Song_"
  "6\020=\022\016\n\nInteract_6\020>\022\014\n\010AllPhoto\020\?\022\016\n\nTur"
  "nFish_1\020d\022\016\n\nTurnFish_2\020e\022\016\n\nTurnFish_3\020"
  "f\022\016\n\nTurnFish_4\020g\022\007\n\003Fly\020h\022\010\n\004Jump\020i\022\t\n\005"
  "Jump2\020j\022\t\n\005Jump3\020k\022\t\n\005Jump4\020l\022\010\n\004Bomb\020m\022"
  "\r\n\tBubbleFly\020nB+\n\030com.dayou.space.protob"
  "ufB\013ConcertCtrlZ\002./b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_concertCtrl_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_concertCtrl_2eproto_sccs[15] = {
  &scc_info_CConcertFlyInit_concertCtrl_2eproto.base,
  &scc_info_CCtrlHeartBeat_concertCtrl_2eproto.base,
  &scc_info_CCtrlInfo_concertCtrl_2eproto.base,
  &scc_info_CCtrlToggle_concertCtrl_2eproto.base,
  &scc_info_CtrlFlyPlayer_concertCtrl_2eproto.base,
  &scc_info_CtrlManual_concertCtrl_2eproto.base,
  &scc_info_SAreaJump_concertCtrl_2eproto.base,
  &scc_info_SBroadCtrlManual_concertCtrl_2eproto.base,
  &scc_info_SCtrlBroadcast_concertCtrl_2eproto.base,
  &scc_info_SCtrlEncoreBroadcast_concertCtrl_2eproto.base,
  &scc_info_SCtrlFlyBroadcast_concertCtrl_2eproto.base,
  &scc_info_SCtrlHeartBeat_concertCtrl_2eproto.base,
  &scc_info_SCtrlInfo_concertCtrl_2eproto.base,
  &scc_info_SCtrlLiftBroadcast_concertCtrl_2eproto.base,
  &scc_info_SFlyTimelineBroadcast_concertCtrl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_concertCtrl_2eproto_once;
static bool descriptor_table_concertCtrl_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_concertCtrl_2eproto = {
  &descriptor_table_concertCtrl_2eproto_initialized, descriptor_table_protodef_concertCtrl_2eproto, "concertCtrl.proto", 1627,
  &descriptor_table_concertCtrl_2eproto_once, descriptor_table_concertCtrl_2eproto_sccs, descriptor_table_concertCtrl_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_concertCtrl_2eproto::offsets,
  file_level_metadata_concertCtrl_2eproto, 15, file_level_enum_descriptors_concertCtrl_2eproto, file_level_service_descriptors_concertCtrl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_concertCtrl_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_concertCtrl_2eproto), true);
namespace concert {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CtrlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_concertCtrl_2eproto);
  return file_level_enum_descriptors_concertCtrl_2eproto[0];
}
bool CtrlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 21:
    case 22:
    case 23:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 60:
    case 61:
    case 62:
    case 63:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CCtrlToggle::InitAsDefaultInstance() {
}
class CCtrlToggle::_Internal {
 public:
};

CCtrlToggle::CCtrlToggle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.CCtrlToggle)
}
CCtrlToggle::CCtrlToggle(const CCtrlToggle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:concert.CCtrlToggle)
}

void CCtrlToggle::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&type_)) + sizeof(status_));
}

CCtrlToggle::~CCtrlToggle() {
  // @@protoc_insertion_point(destructor:concert.CCtrlToggle)
  SharedDtor();
}

void CCtrlToggle::SharedDtor() {
}

void CCtrlToggle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCtrlToggle& CCtrlToggle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCtrlToggle_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void CCtrlToggle::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.CCtrlToggle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&type_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* CCtrlToggle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .concert.CtrlType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::concert::CtrlType>(val));
        } else goto handle_unusual;
        continue;
      // int32 Status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCtrlToggle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.CCtrlToggle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .concert.CtrlType Type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 Status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.CCtrlToggle)
  return target;
}

size_t CCtrlToggle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.CCtrlToggle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .concert.CtrlType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 Status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCtrlToggle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.CCtrlToggle)
  GOOGLE_DCHECK_NE(&from, this);
  const CCtrlToggle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCtrlToggle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.CCtrlToggle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.CCtrlToggle)
    MergeFrom(*source);
  }
}

void CCtrlToggle::MergeFrom(const CCtrlToggle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.CCtrlToggle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void CCtrlToggle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.CCtrlToggle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCtrlToggle::CopyFrom(const CCtrlToggle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.CCtrlToggle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCtrlToggle::IsInitialized() const {
  return true;
}

void CCtrlToggle::InternalSwap(CCtrlToggle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCtrlToggle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCtrlBroadcast::InitAsDefaultInstance() {
}
class SCtrlBroadcast::_Internal {
 public:
};

SCtrlBroadcast::SCtrlBroadcast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.SCtrlBroadcast)
}
SCtrlBroadcast::SCtrlBroadcast(const SCtrlBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extthird_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extthird().empty()) {
    extthird_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extthird_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&extsecond_) -
    reinterpret_cast<char*>(&type_)) + sizeof(extsecond_));
  // @@protoc_insertion_point(copy_constructor:concert.SCtrlBroadcast)
}

void SCtrlBroadcast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCtrlBroadcast_concertCtrl_2eproto.base);
  extthird_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extsecond_) -
      reinterpret_cast<char*>(&type_)) + sizeof(extsecond_));
}

SCtrlBroadcast::~SCtrlBroadcast() {
  // @@protoc_insertion_point(destructor:concert.SCtrlBroadcast)
  SharedDtor();
}

void SCtrlBroadcast::SharedDtor() {
  extthird_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SCtrlBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCtrlBroadcast& SCtrlBroadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCtrlBroadcast_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void SCtrlBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.SCtrlBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extthird_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extsecond_) -
      reinterpret_cast<char*>(&type_)) + sizeof(extsecond_));
  _internal_metadata_.Clear();
}

const char* SCtrlBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .concert.CtrlType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::concert::CtrlType>(val));
        } else goto handle_unusual;
        continue;
      // int32 Status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ExtFirst = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          extfirst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ExtSecond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          extsecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ExtThird = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_extthird();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "concert.SCtrlBroadcast.ExtThird"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCtrlBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.SCtrlBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .concert.CtrlType Type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 Status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // int32 ExtFirst = 3;
  if (this->extfirst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_extfirst(), target);
  }

  // int32 ExtSecond = 4;
  if (this->extsecond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_extsecond(), target);
  }

  // string ExtThird = 5;
  if (this->extthird().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extthird().data(), static_cast<int>(this->_internal_extthird().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "concert.SCtrlBroadcast.ExtThird");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_extthird(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.SCtrlBroadcast)
  return target;
}

size_t SCtrlBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.SCtrlBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ExtThird = 5;
  if (this->extthird().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extthird());
  }

  // .concert.CtrlType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 Status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 ExtFirst = 3;
  if (this->extfirst() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extfirst());
  }

  // int32 ExtSecond = 4;
  if (this->extsecond() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_extsecond());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCtrlBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.SCtrlBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const SCtrlBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCtrlBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.SCtrlBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.SCtrlBroadcast)
    MergeFrom(*source);
  }
}

void SCtrlBroadcast::MergeFrom(const SCtrlBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.SCtrlBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.extthird().size() > 0) {

    extthird_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extthird_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.extfirst() != 0) {
    _internal_set_extfirst(from._internal_extfirst());
  }
  if (from.extsecond() != 0) {
    _internal_set_extsecond(from._internal_extsecond());
  }
}

void SCtrlBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.SCtrlBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCtrlBroadcast::CopyFrom(const SCtrlBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.SCtrlBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCtrlBroadcast::IsInitialized() const {
  return true;
}

void SCtrlBroadcast::InternalSwap(SCtrlBroadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  extthird_.Swap(&other->extthird_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(status_, other->status_);
  swap(extfirst_, other->extfirst_);
  swap(extsecond_, other->extsecond_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCtrlBroadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CtrlFlyPlayer::InitAsDefaultInstance() {
}
class CtrlFlyPlayer::_Internal {
 public:
};

CtrlFlyPlayer::CtrlFlyPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.CtrlFlyPlayer)
}
CtrlFlyPlayer::CtrlFlyPlayer(const CtrlFlyPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&mesh_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(mesh_));
  // @@protoc_insertion_point(copy_constructor:concert.CtrlFlyPlayer)
}

void CtrlFlyPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CtrlFlyPlayer_concertCtrl_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mesh_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(mesh_));
}

CtrlFlyPlayer::~CtrlFlyPlayer() {
  // @@protoc_insertion_point(destructor:concert.CtrlFlyPlayer)
  SharedDtor();
}

void CtrlFlyPlayer::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CtrlFlyPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtrlFlyPlayer& CtrlFlyPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CtrlFlyPlayer_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void CtrlFlyPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.CtrlFlyPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mesh_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(mesh_));
  _internal_metadata_.Clear();
}

const char* CtrlFlyPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Mesh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mesh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Nick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "concert.CtrlFlyPlayer.Nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CtrlFlyPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.CtrlFlyPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 Mesh = 2;
  if (this->mesh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mesh(), target);
  }

  // string Nick = 3;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "concert.CtrlFlyPlayer.Nick");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_nick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.CtrlFlyPlayer)
  return target;
}

size_t CtrlFlyPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.CtrlFlyPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Nick = 3;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // int32 Uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 Mesh = 2;
  if (this->mesh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mesh());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtrlFlyPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.CtrlFlyPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CtrlFlyPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CtrlFlyPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.CtrlFlyPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.CtrlFlyPlayer)
    MergeFrom(*source);
  }
}

void CtrlFlyPlayer::MergeFrom(const CtrlFlyPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.CtrlFlyPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.mesh() != 0) {
    _internal_set_mesh(from._internal_mesh());
  }
}

void CtrlFlyPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.CtrlFlyPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlFlyPlayer::CopyFrom(const CtrlFlyPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.CtrlFlyPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlFlyPlayer::IsInitialized() const {
  return true;
}

void CtrlFlyPlayer::InternalSwap(CtrlFlyPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(mesh_, other->mesh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CtrlFlyPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SAreaJump::InitAsDefaultInstance() {
}
class SAreaJump::_Internal {
 public:
};

SAreaJump::SAreaJump()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.SAreaJump)
}
SAreaJump::SAreaJump(const SAreaJump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uid_(from.uid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:concert.SAreaJump)
}

void SAreaJump::SharedCtor() {
}

SAreaJump::~SAreaJump() {
  // @@protoc_insertion_point(destructor:concert.SAreaJump)
  SharedDtor();
}

void SAreaJump::SharedDtor() {
}

void SAreaJump::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAreaJump& SAreaJump::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAreaJump_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void SAreaJump::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.SAreaJump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.Clear();
  _internal_metadata_.Clear();
}

const char* SAreaJump::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 Uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_uid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAreaJump::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.SAreaJump)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 Uid = 1;
  {
    int byte_size = _uid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_uid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.SAreaJump)
  return target;
}

size_t SAreaJump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.SAreaJump)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Uid = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAreaJump::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.SAreaJump)
  GOOGLE_DCHECK_NE(&from, this);
  const SAreaJump* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAreaJump>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.SAreaJump)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.SAreaJump)
    MergeFrom(*source);
  }
}

void SAreaJump::MergeFrom(const SAreaJump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.SAreaJump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_.MergeFrom(from.uid_);
}

void SAreaJump::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.SAreaJump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAreaJump::CopyFrom(const SAreaJump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.SAreaJump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAreaJump::IsInitialized() const {
  return true;
}

void SAreaJump::InternalSwap(SAreaJump* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uid_.InternalSwap(&other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SAreaJump::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCtrlFlyBroadcast::InitAsDefaultInstance() {
}
class SCtrlFlyBroadcast::_Internal {
 public:
};

SCtrlFlyBroadcast::SCtrlFlyBroadcast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.SCtrlFlyBroadcast)
}
SCtrlFlyBroadcast::SCtrlFlyBroadcast(const SCtrlFlyBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      player_(from.player_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&effectid_) -
    reinterpret_cast<char*>(&status_)) + sizeof(effectid_));
  // @@protoc_insertion_point(copy_constructor:concert.SCtrlFlyBroadcast)
}

void SCtrlFlyBroadcast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SCtrlFlyBroadcast_concertCtrl_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effectid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(effectid_));
}

SCtrlFlyBroadcast::~SCtrlFlyBroadcast() {
  // @@protoc_insertion_point(destructor:concert.SCtrlFlyBroadcast)
  SharedDtor();
}

void SCtrlFlyBroadcast::SharedDtor() {
}

void SCtrlFlyBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCtrlFlyBroadcast& SCtrlFlyBroadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCtrlFlyBroadcast_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void SCtrlFlyBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.SCtrlFlyBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_.Clear();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effectid_) -
      reinterpret_cast<char*>(&status_)) + sizeof(effectid_));
  _internal_metadata_.Clear();
}

const char* SCtrlFlyBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TimelineId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timelineid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 EffectId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          effectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .concert.CtrlFlyPlayer Player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCtrlFlyBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.SCtrlFlyBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // int32 TimelineId = 2;
  if (this->timelineid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_timelineid(), target);
  }

  // int32 EffectId = 3;
  if (this->effectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_effectid(), target);
  }

  // repeated .concert.CtrlFlyPlayer Player = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_player(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.SCtrlFlyBroadcast)
  return target;
}

size_t SCtrlFlyBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.SCtrlFlyBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .concert.CtrlFlyPlayer Player = 4;
  total_size += 1UL * this->_internal_player_size();
  for (const auto& msg : this->player_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 Status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 TimelineId = 2;
  if (this->timelineid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timelineid());
  }

  // int32 EffectId = 3;
  if (this->effectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effectid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCtrlFlyBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.SCtrlFlyBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const SCtrlFlyBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCtrlFlyBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.SCtrlFlyBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.SCtrlFlyBroadcast)
    MergeFrom(*source);
  }
}

void SCtrlFlyBroadcast::MergeFrom(const SCtrlFlyBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.SCtrlFlyBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_.MergeFrom(from.player_);
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.timelineid() != 0) {
    _internal_set_timelineid(from._internal_timelineid());
  }
  if (from.effectid() != 0) {
    _internal_set_effectid(from._internal_effectid());
  }
}

void SCtrlFlyBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.SCtrlFlyBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCtrlFlyBroadcast::CopyFrom(const SCtrlFlyBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.SCtrlFlyBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCtrlFlyBroadcast::IsInitialized() const {
  return true;
}

void SCtrlFlyBroadcast::InternalSwap(SCtrlFlyBroadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  player_.InternalSwap(&other->player_);
  swap(status_, other->status_);
  swap(timelineid_, other->timelineid_);
  swap(effectid_, other->effectid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCtrlFlyBroadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SFlyTimelineBroadcast::InitAsDefaultInstance() {
}
class SFlyTimelineBroadcast::_Internal {
 public:
};

SFlyTimelineBroadcast::SFlyTimelineBroadcast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.SFlyTimelineBroadcast)
}
SFlyTimelineBroadcast::SFlyTimelineBroadcast(const SFlyTimelineBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timeline_ = from.timeline_;
  // @@protoc_insertion_point(copy_constructor:concert.SFlyTimelineBroadcast)
}

void SFlyTimelineBroadcast::SharedCtor() {
  timeline_ = 0;
}

SFlyTimelineBroadcast::~SFlyTimelineBroadcast() {
  // @@protoc_insertion_point(destructor:concert.SFlyTimelineBroadcast)
  SharedDtor();
}

void SFlyTimelineBroadcast::SharedDtor() {
}

void SFlyTimelineBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SFlyTimelineBroadcast& SFlyTimelineBroadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SFlyTimelineBroadcast_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void SFlyTimelineBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.SFlyTimelineBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timeline_ = 0;
  _internal_metadata_.Clear();
}

const char* SFlyTimelineBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Timeline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timeline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SFlyTimelineBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.SFlyTimelineBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Timeline = 1;
  if (this->timeline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_timeline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.SFlyTimelineBroadcast)
  return target;
}

size_t SFlyTimelineBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.SFlyTimelineBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Timeline = 1;
  if (this->timeline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeline());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SFlyTimelineBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.SFlyTimelineBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const SFlyTimelineBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SFlyTimelineBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.SFlyTimelineBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.SFlyTimelineBroadcast)
    MergeFrom(*source);
  }
}

void SFlyTimelineBroadcast::MergeFrom(const SFlyTimelineBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.SFlyTimelineBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timeline() != 0) {
    _internal_set_timeline(from._internal_timeline());
  }
}

void SFlyTimelineBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.SFlyTimelineBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SFlyTimelineBroadcast::CopyFrom(const SFlyTimelineBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.SFlyTimelineBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFlyTimelineBroadcast::IsInitialized() const {
  return true;
}

void SFlyTimelineBroadcast::InternalSwap(SFlyTimelineBroadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timeline_, other->timeline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SFlyTimelineBroadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CConcertFlyInit::InitAsDefaultInstance() {
}
class CConcertFlyInit::_Internal {
 public:
};

CConcertFlyInit::CConcertFlyInit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.CConcertFlyInit)
}
CConcertFlyInit::CConcertFlyInit(const CConcertFlyInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:concert.CConcertFlyInit)
}

void CConcertFlyInit::SharedCtor() {
}

CConcertFlyInit::~CConcertFlyInit() {
  // @@protoc_insertion_point(destructor:concert.CConcertFlyInit)
  SharedDtor();
}

void CConcertFlyInit::SharedDtor() {
}

void CConcertFlyInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CConcertFlyInit& CConcertFlyInit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CConcertFlyInit_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void CConcertFlyInit::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.CConcertFlyInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CConcertFlyInit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CConcertFlyInit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.CConcertFlyInit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.CConcertFlyInit)
  return target;
}

size_t CConcertFlyInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.CConcertFlyInit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CConcertFlyInit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.CConcertFlyInit)
  GOOGLE_DCHECK_NE(&from, this);
  const CConcertFlyInit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CConcertFlyInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.CConcertFlyInit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.CConcertFlyInit)
    MergeFrom(*source);
  }
}

void CConcertFlyInit::MergeFrom(const CConcertFlyInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.CConcertFlyInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CConcertFlyInit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.CConcertFlyInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CConcertFlyInit::CopyFrom(const CConcertFlyInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.CConcertFlyInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CConcertFlyInit::IsInitialized() const {
  return true;
}

void CConcertFlyInit::InternalSwap(CConcertFlyInit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CConcertFlyInit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCtrlLiftBroadcast::InitAsDefaultInstance() {
}
class SCtrlLiftBroadcast::_Internal {
 public:
};

SCtrlLiftBroadcast::SCtrlLiftBroadcast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.SCtrlLiftBroadcast)
}
SCtrlLiftBroadcast::SCtrlLiftBroadcast(const SCtrlLiftBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:concert.SCtrlLiftBroadcast)
}

void SCtrlLiftBroadcast::SharedCtor() {
}

SCtrlLiftBroadcast::~SCtrlLiftBroadcast() {
  // @@protoc_insertion_point(destructor:concert.SCtrlLiftBroadcast)
  SharedDtor();
}

void SCtrlLiftBroadcast::SharedDtor() {
}

void SCtrlLiftBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCtrlLiftBroadcast& SCtrlLiftBroadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCtrlLiftBroadcast_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void SCtrlLiftBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.SCtrlLiftBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SCtrlLiftBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCtrlLiftBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.SCtrlLiftBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.SCtrlLiftBroadcast)
  return target;
}

size_t SCtrlLiftBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.SCtrlLiftBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCtrlLiftBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.SCtrlLiftBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const SCtrlLiftBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCtrlLiftBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.SCtrlLiftBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.SCtrlLiftBroadcast)
    MergeFrom(*source);
  }
}

void SCtrlLiftBroadcast::MergeFrom(const SCtrlLiftBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.SCtrlLiftBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCtrlLiftBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.SCtrlLiftBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCtrlLiftBroadcast::CopyFrom(const SCtrlLiftBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.SCtrlLiftBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCtrlLiftBroadcast::IsInitialized() const {
  return true;
}

void SCtrlLiftBroadcast::InternalSwap(SCtrlLiftBroadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCtrlLiftBroadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCtrlEncoreBroadcast::InitAsDefaultInstance() {
}
class SCtrlEncoreBroadcast::_Internal {
 public:
};

SCtrlEncoreBroadcast::SCtrlEncoreBroadcast()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.SCtrlEncoreBroadcast)
}
SCtrlEncoreBroadcast::SCtrlEncoreBroadcast(const SCtrlEncoreBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:concert.SCtrlEncoreBroadcast)
}

void SCtrlEncoreBroadcast::SharedCtor() {
}

SCtrlEncoreBroadcast::~SCtrlEncoreBroadcast() {
  // @@protoc_insertion_point(destructor:concert.SCtrlEncoreBroadcast)
  SharedDtor();
}

void SCtrlEncoreBroadcast::SharedDtor() {
}

void SCtrlEncoreBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCtrlEncoreBroadcast& SCtrlEncoreBroadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCtrlEncoreBroadcast_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void SCtrlEncoreBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.SCtrlEncoreBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SCtrlEncoreBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCtrlEncoreBroadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.SCtrlEncoreBroadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.SCtrlEncoreBroadcast)
  return target;
}

size_t SCtrlEncoreBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.SCtrlEncoreBroadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCtrlEncoreBroadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.SCtrlEncoreBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const SCtrlEncoreBroadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCtrlEncoreBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.SCtrlEncoreBroadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.SCtrlEncoreBroadcast)
    MergeFrom(*source);
  }
}

void SCtrlEncoreBroadcast::MergeFrom(const SCtrlEncoreBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.SCtrlEncoreBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SCtrlEncoreBroadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.SCtrlEncoreBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCtrlEncoreBroadcast::CopyFrom(const SCtrlEncoreBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.SCtrlEncoreBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCtrlEncoreBroadcast::IsInitialized() const {
  return true;
}

void SCtrlEncoreBroadcast::InternalSwap(SCtrlEncoreBroadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCtrlEncoreBroadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CCtrlInfo::InitAsDefaultInstance() {
}
class CCtrlInfo::_Internal {
 public:
};

CCtrlInfo::CCtrlInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.CCtrlInfo)
}
CCtrlInfo::CCtrlInfo(const CCtrlInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:concert.CCtrlInfo)
}

void CCtrlInfo::SharedCtor() {
}

CCtrlInfo::~CCtrlInfo() {
  // @@protoc_insertion_point(destructor:concert.CCtrlInfo)
  SharedDtor();
}

void CCtrlInfo::SharedDtor() {
}

void CCtrlInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCtrlInfo& CCtrlInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCtrlInfo_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void CCtrlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.CCtrlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CCtrlInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCtrlInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.CCtrlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.CCtrlInfo)
  return target;
}

size_t CCtrlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.CCtrlInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCtrlInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.CCtrlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CCtrlInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCtrlInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.CCtrlInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.CCtrlInfo)
    MergeFrom(*source);
  }
}

void CCtrlInfo::MergeFrom(const CCtrlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.CCtrlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCtrlInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.CCtrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCtrlInfo::CopyFrom(const CCtrlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.CCtrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCtrlInfo::IsInitialized() const {
  return true;
}

void CCtrlInfo::InternalSwap(CCtrlInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCtrlInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCtrlInfo::InitAsDefaultInstance() {
}
class SCtrlInfo::_Internal {
 public:
};

SCtrlInfo::SCtrlInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.SCtrlInfo)
}
SCtrlInfo::SCtrlInfo(const SCtrlInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stage_, &from.stage_,
    static_cast<size_t>(reinterpret_cast<char*>(&keeptime_) -
    reinterpret_cast<char*>(&stage_)) + sizeof(keeptime_));
  // @@protoc_insertion_point(copy_constructor:concert.SCtrlInfo)
}

void SCtrlInfo::SharedCtor() {
  ::memset(&stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keeptime_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(keeptime_));
}

SCtrlInfo::~SCtrlInfo() {
  // @@protoc_insertion_point(destructor:concert.SCtrlInfo)
  SharedDtor();
}

void SCtrlInfo::SharedDtor() {
}

void SCtrlInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCtrlInfo& SCtrlInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCtrlInfo_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void SCtrlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.SCtrlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keeptime_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(keeptime_));
  _internal_metadata_.Clear();
}

const char* SCtrlInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .concert.CtrlType Stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_stage(static_cast<::concert::CtrlType>(val));
        } else goto handle_unusual;
        continue;
      // int32 KeepTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          keeptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCtrlInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.SCtrlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .concert.CtrlType Stage = 1;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stage(), target);
  }

  // int32 KeepTime = 2;
  if (this->keeptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_keeptime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.SCtrlInfo)
  return target;
}

size_t SCtrlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.SCtrlInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .concert.CtrlType Stage = 1;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());
  }

  // int32 KeepTime = 2;
  if (this->keeptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keeptime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCtrlInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.SCtrlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SCtrlInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCtrlInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.SCtrlInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.SCtrlInfo)
    MergeFrom(*source);
  }
}

void SCtrlInfo::MergeFrom(const SCtrlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.SCtrlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.keeptime() != 0) {
    _internal_set_keeptime(from._internal_keeptime());
  }
}

void SCtrlInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.SCtrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCtrlInfo::CopyFrom(const SCtrlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.SCtrlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCtrlInfo::IsInitialized() const {
  return true;
}

void SCtrlInfo::InternalSwap(SCtrlInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stage_, other->stage_);
  swap(keeptime_, other->keeptime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCtrlInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CCtrlHeartBeat::InitAsDefaultInstance() {
}
class CCtrlHeartBeat::_Internal {
 public:
};

CCtrlHeartBeat::CCtrlHeartBeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.CCtrlHeartBeat)
}
CCtrlHeartBeat::CCtrlHeartBeat(const CCtrlHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:concert.CCtrlHeartBeat)
}

void CCtrlHeartBeat::SharedCtor() {
}

CCtrlHeartBeat::~CCtrlHeartBeat() {
  // @@protoc_insertion_point(destructor:concert.CCtrlHeartBeat)
  SharedDtor();
}

void CCtrlHeartBeat::SharedDtor() {
}

void CCtrlHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CCtrlHeartBeat& CCtrlHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CCtrlHeartBeat_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void CCtrlHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.CCtrlHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CCtrlHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCtrlHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.CCtrlHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.CCtrlHeartBeat)
  return target;
}

size_t CCtrlHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.CCtrlHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCtrlHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.CCtrlHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const CCtrlHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCtrlHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.CCtrlHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.CCtrlHeartBeat)
    MergeFrom(*source);
  }
}

void CCtrlHeartBeat::MergeFrom(const CCtrlHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.CCtrlHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCtrlHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.CCtrlHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCtrlHeartBeat::CopyFrom(const CCtrlHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.CCtrlHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCtrlHeartBeat::IsInitialized() const {
  return true;
}

void CCtrlHeartBeat::InternalSwap(CCtrlHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCtrlHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SCtrlHeartBeat::InitAsDefaultInstance() {
}
class SCtrlHeartBeat::_Internal {
 public:
};

SCtrlHeartBeat::SCtrlHeartBeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.SCtrlHeartBeat)
}
SCtrlHeartBeat::SCtrlHeartBeat(const SCtrlHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stage_, &from.stage_,
    static_cast<size_t>(reinterpret_cast<char*>(&keeptime_) -
    reinterpret_cast<char*>(&stage_)) + sizeof(keeptime_));
  // @@protoc_insertion_point(copy_constructor:concert.SCtrlHeartBeat)
}

void SCtrlHeartBeat::SharedCtor() {
  ::memset(&stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keeptime_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(keeptime_));
}

SCtrlHeartBeat::~SCtrlHeartBeat() {
  // @@protoc_insertion_point(destructor:concert.SCtrlHeartBeat)
  SharedDtor();
}

void SCtrlHeartBeat::SharedDtor() {
}

void SCtrlHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SCtrlHeartBeat& SCtrlHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SCtrlHeartBeat_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void SCtrlHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.SCtrlHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keeptime_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(keeptime_));
  _internal_metadata_.Clear();
}

const char* SCtrlHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .concert.CtrlType Stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_stage(static_cast<::concert::CtrlType>(val));
        } else goto handle_unusual;
        continue;
      // int32 KeepTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          keeptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SCtrlHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.SCtrlHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .concert.CtrlType Stage = 1;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stage(), target);
  }

  // int32 KeepTime = 2;
  if (this->keeptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_keeptime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.SCtrlHeartBeat)
  return target;
}

size_t SCtrlHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.SCtrlHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .concert.CtrlType Stage = 1;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());
  }

  // int32 KeepTime = 2;
  if (this->keeptime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_keeptime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SCtrlHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.SCtrlHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const SCtrlHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SCtrlHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.SCtrlHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.SCtrlHeartBeat)
    MergeFrom(*source);
  }
}

void SCtrlHeartBeat::MergeFrom(const SCtrlHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.SCtrlHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
  if (from.keeptime() != 0) {
    _internal_set_keeptime(from._internal_keeptime());
  }
}

void SCtrlHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.SCtrlHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCtrlHeartBeat::CopyFrom(const SCtrlHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.SCtrlHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCtrlHeartBeat::IsInitialized() const {
  return true;
}

void SCtrlHeartBeat::InternalSwap(SCtrlHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stage_, other->stage_);
  swap(keeptime_, other->keeptime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SCtrlHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CtrlManual::InitAsDefaultInstance() {
}
class CtrlManual::_Internal {
 public:
};

CtrlManual::CtrlManual()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.CtrlManual)
}
CtrlManual::CtrlManual(const CtrlManual& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stage_ = from.stage_;
  // @@protoc_insertion_point(copy_constructor:concert.CtrlManual)
}

void CtrlManual::SharedCtor() {
  stage_ = 0;
}

CtrlManual::~CtrlManual() {
  // @@protoc_insertion_point(destructor:concert.CtrlManual)
  SharedDtor();
}

void CtrlManual::SharedDtor() {
}

void CtrlManual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CtrlManual& CtrlManual::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CtrlManual_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void CtrlManual::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.CtrlManual)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_ = 0;
  _internal_metadata_.Clear();
}

const char* CtrlManual::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .concert.CtrlType Stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_stage(static_cast<::concert::CtrlType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CtrlManual::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.CtrlManual)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .concert.CtrlType Stage = 1;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.CtrlManual)
  return target;
}

size_t CtrlManual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.CtrlManual)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .concert.CtrlType Stage = 1;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CtrlManual::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.CtrlManual)
  GOOGLE_DCHECK_NE(&from, this);
  const CtrlManual* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CtrlManual>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.CtrlManual)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.CtrlManual)
    MergeFrom(*source);
  }
}

void CtrlManual::MergeFrom(const CtrlManual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.CtrlManual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
}

void CtrlManual::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.CtrlManual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CtrlManual::CopyFrom(const CtrlManual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.CtrlManual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlManual::IsInitialized() const {
  return true;
}

void CtrlManual::InternalSwap(CtrlManual* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stage_, other->stage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CtrlManual::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBroadCtrlManual::InitAsDefaultInstance() {
}
class SBroadCtrlManual::_Internal {
 public:
};

SBroadCtrlManual::SBroadCtrlManual()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:concert.SBroadCtrlManual)
}
SBroadCtrlManual::SBroadCtrlManual(const SBroadCtrlManual& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stamp_, &from.stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&stage_) -
    reinterpret_cast<char*>(&stamp_)) + sizeof(stage_));
  // @@protoc_insertion_point(copy_constructor:concert.SBroadCtrlManual)
}

void SBroadCtrlManual::SharedCtor() {
  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(stage_));
}

SBroadCtrlManual::~SBroadCtrlManual() {
  // @@protoc_insertion_point(destructor:concert.SBroadCtrlManual)
  SharedDtor();
}

void SBroadCtrlManual::SharedDtor() {
}

void SBroadCtrlManual::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBroadCtrlManual& SBroadCtrlManual::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBroadCtrlManual_concertCtrl_2eproto.base);
  return *internal_default_instance();
}


void SBroadCtrlManual::Clear() {
// @@protoc_insertion_point(message_clear_start:concert.SBroadCtrlManual)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_) -
      reinterpret_cast<char*>(&stamp_)) + sizeof(stage_));
  _internal_metadata_.Clear();
}

const char* SBroadCtrlManual::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .concert.CtrlType Stage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_stage(static_cast<::concert::CtrlType>(val));
        } else goto handle_unusual;
        continue;
      // int64 Stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBroadCtrlManual::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:concert.SBroadCtrlManual)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .concert.CtrlType Stage = 1;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stage(), target);
  }

  // int64 Stamp = 2;
  if (this->stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_stamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:concert.SBroadCtrlManual)
  return target;
}

size_t SBroadCtrlManual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:concert.SBroadCtrlManual)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Stamp = 2;
  if (this->stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_stamp());
  }

  // .concert.CtrlType Stage = 1;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBroadCtrlManual::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:concert.SBroadCtrlManual)
  GOOGLE_DCHECK_NE(&from, this);
  const SBroadCtrlManual* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBroadCtrlManual>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:concert.SBroadCtrlManual)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:concert.SBroadCtrlManual)
    MergeFrom(*source);
  }
}

void SBroadCtrlManual::MergeFrom(const SBroadCtrlManual& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:concert.SBroadCtrlManual)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stamp() != 0) {
    _internal_set_stamp(from._internal_stamp());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
}

void SBroadCtrlManual::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:concert.SBroadCtrlManual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBroadCtrlManual::CopyFrom(const SBroadCtrlManual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:concert.SBroadCtrlManual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBroadCtrlManual::IsInitialized() const {
  return true;
}

void SBroadCtrlManual::InternalSwap(SBroadCtrlManual* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stamp_, other->stamp_);
  swap(stage_, other->stage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBroadCtrlManual::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace concert
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::concert::CCtrlToggle* Arena::CreateMaybeMessage< ::concert::CCtrlToggle >(Arena* arena) {
  return Arena::CreateInternal< ::concert::CCtrlToggle >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::SCtrlBroadcast* Arena::CreateMaybeMessage< ::concert::SCtrlBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::concert::SCtrlBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::CtrlFlyPlayer* Arena::CreateMaybeMessage< ::concert::CtrlFlyPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::concert::CtrlFlyPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::SAreaJump* Arena::CreateMaybeMessage< ::concert::SAreaJump >(Arena* arena) {
  return Arena::CreateInternal< ::concert::SAreaJump >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::SCtrlFlyBroadcast* Arena::CreateMaybeMessage< ::concert::SCtrlFlyBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::concert::SCtrlFlyBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::SFlyTimelineBroadcast* Arena::CreateMaybeMessage< ::concert::SFlyTimelineBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::concert::SFlyTimelineBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::CConcertFlyInit* Arena::CreateMaybeMessage< ::concert::CConcertFlyInit >(Arena* arena) {
  return Arena::CreateInternal< ::concert::CConcertFlyInit >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::SCtrlLiftBroadcast* Arena::CreateMaybeMessage< ::concert::SCtrlLiftBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::concert::SCtrlLiftBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::SCtrlEncoreBroadcast* Arena::CreateMaybeMessage< ::concert::SCtrlEncoreBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::concert::SCtrlEncoreBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::CCtrlInfo* Arena::CreateMaybeMessage< ::concert::CCtrlInfo >(Arena* arena) {
  return Arena::CreateInternal< ::concert::CCtrlInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::SCtrlInfo* Arena::CreateMaybeMessage< ::concert::SCtrlInfo >(Arena* arena) {
  return Arena::CreateInternal< ::concert::SCtrlInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::CCtrlHeartBeat* Arena::CreateMaybeMessage< ::concert::CCtrlHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::concert::CCtrlHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::SCtrlHeartBeat* Arena::CreateMaybeMessage< ::concert::SCtrlHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::concert::SCtrlHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::CtrlManual* Arena::CreateMaybeMessage< ::concert::CtrlManual >(Arena* arena) {
  return Arena::CreateInternal< ::concert::CtrlManual >(arena);
}
template<> PROTOBUF_NOINLINE ::concert::SBroadCtrlManual* Arena::CreateMaybeMessage< ::concert::SBroadCtrlManual >(Arena* arena) {
  return Arena::CreateInternal< ::concert::SBroadCtrlManual >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
