// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceGame.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spaceGame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spaceGame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spaceGame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spaceGame_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceGame_2eproto;
namespace gameTick {
class CGameRank;
class CGameRankDefaultTypeInternal;
extern CGameRankDefaultTypeInternal _CGameRank_default_instance_;
class CGameStatus;
class CGameStatusDefaultTypeInternal;
extern CGameStatusDefaultTypeInternal _CGameStatus_default_instance_;
class CJumpGameOut;
class CJumpGameOutDefaultTypeInternal;
extern CJumpGameOutDefaultTypeInternal _CJumpGameOut_default_instance_;
class CJumpGameWaitLine;
class CJumpGameWaitLineDefaultTypeInternal;
extern CJumpGameWaitLineDefaultTypeInternal _CJumpGameWaitLine_default_instance_;
class GameRank;
class GameRankDefaultTypeInternal;
extern GameRankDefaultTypeInternal _GameRank_default_instance_;
class JumpGameWaitLint;
class JumpGameWaitLintDefaultTypeInternal;
extern JumpGameWaitLintDefaultTypeInternal _JumpGameWaitLint_default_instance_;
class SGameAbnormalStop;
class SGameAbnormalStopDefaultTypeInternal;
extern SGameAbnormalStopDefaultTypeInternal _SGameAbnormalStop_default_instance_;
class SGameRank;
class SGameRankDefaultTypeInternal;
extern SGameRankDefaultTypeInternal _SGameRank_default_instance_;
class SGameStatus;
class SGameStatusDefaultTypeInternal;
extern SGameStatusDefaultTypeInternal _SGameStatus_default_instance_;
class SJumpGameOut;
class SJumpGameOutDefaultTypeInternal;
extern SJumpGameOutDefaultTypeInternal _SJumpGameOut_default_instance_;
class SJumpGameShootBullets;
class SJumpGameShootBulletsDefaultTypeInternal;
extern SJumpGameShootBulletsDefaultTypeInternal _SJumpGameShootBullets_default_instance_;
class SJumpGameWaitLine;
class SJumpGameWaitLineDefaultTypeInternal;
extern SJumpGameWaitLineDefaultTypeInternal _SJumpGameWaitLine_default_instance_;
class ShipGameWaitLint;
class ShipGameWaitLintDefaultTypeInternal;
extern ShipGameWaitLintDefaultTypeInternal _ShipGameWaitLint_default_instance_;
}  // namespace gameTick
PROTOBUF_NAMESPACE_OPEN
template<> ::gameTick::CGameRank* Arena::CreateMaybeMessage<::gameTick::CGameRank>(Arena*);
template<> ::gameTick::CGameStatus* Arena::CreateMaybeMessage<::gameTick::CGameStatus>(Arena*);
template<> ::gameTick::CJumpGameOut* Arena::CreateMaybeMessage<::gameTick::CJumpGameOut>(Arena*);
template<> ::gameTick::CJumpGameWaitLine* Arena::CreateMaybeMessage<::gameTick::CJumpGameWaitLine>(Arena*);
template<> ::gameTick::GameRank* Arena::CreateMaybeMessage<::gameTick::GameRank>(Arena*);
template<> ::gameTick::JumpGameWaitLint* Arena::CreateMaybeMessage<::gameTick::JumpGameWaitLint>(Arena*);
template<> ::gameTick::SGameAbnormalStop* Arena::CreateMaybeMessage<::gameTick::SGameAbnormalStop>(Arena*);
template<> ::gameTick::SGameRank* Arena::CreateMaybeMessage<::gameTick::SGameRank>(Arena*);
template<> ::gameTick::SGameStatus* Arena::CreateMaybeMessage<::gameTick::SGameStatus>(Arena*);
template<> ::gameTick::SJumpGameOut* Arena::CreateMaybeMessage<::gameTick::SJumpGameOut>(Arena*);
template<> ::gameTick::SJumpGameShootBullets* Arena::CreateMaybeMessage<::gameTick::SJumpGameShootBullets>(Arena*);
template<> ::gameTick::SJumpGameWaitLine* Arena::CreateMaybeMessage<::gameTick::SJumpGameWaitLine>(Arena*);
template<> ::gameTick::ShipGameWaitLint* Arena::CreateMaybeMessage<::gameTick::ShipGameWaitLint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gameTick {

// ===================================================================

class CJumpGameWaitLine :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.CJumpGameWaitLine) */ {
 public:
  CJumpGameWaitLine();
  virtual ~CJumpGameWaitLine();

  CJumpGameWaitLine(const CJumpGameWaitLine& from);
  CJumpGameWaitLine(CJumpGameWaitLine&& from) noexcept
    : CJumpGameWaitLine() {
    *this = ::std::move(from);
  }

  inline CJumpGameWaitLine& operator=(const CJumpGameWaitLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline CJumpGameWaitLine& operator=(CJumpGameWaitLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CJumpGameWaitLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CJumpGameWaitLine* internal_default_instance() {
    return reinterpret_cast<const CJumpGameWaitLine*>(
               &_CJumpGameWaitLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CJumpGameWaitLine& a, CJumpGameWaitLine& b) {
    a.Swap(&b);
  }
  inline void Swap(CJumpGameWaitLine* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CJumpGameWaitLine* New() const final {
    return CreateMaybeMessage<CJumpGameWaitLine>(nullptr);
  }

  CJumpGameWaitLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CJumpGameWaitLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CJumpGameWaitLine& from);
  void MergeFrom(const CJumpGameWaitLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CJumpGameWaitLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.CJumpGameWaitLine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gameTick.CJumpGameWaitLine)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// -------------------------------------------------------------------

class SJumpGameWaitLine :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.SJumpGameWaitLine) */ {
 public:
  SJumpGameWaitLine();
  virtual ~SJumpGameWaitLine();

  SJumpGameWaitLine(const SJumpGameWaitLine& from);
  SJumpGameWaitLine(SJumpGameWaitLine&& from) noexcept
    : SJumpGameWaitLine() {
    *this = ::std::move(from);
  }

  inline SJumpGameWaitLine& operator=(const SJumpGameWaitLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline SJumpGameWaitLine& operator=(SJumpGameWaitLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SJumpGameWaitLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SJumpGameWaitLine* internal_default_instance() {
    return reinterpret_cast<const SJumpGameWaitLine*>(
               &_SJumpGameWaitLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SJumpGameWaitLine& a, SJumpGameWaitLine& b) {
    a.Swap(&b);
  }
  inline void Swap(SJumpGameWaitLine* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SJumpGameWaitLine* New() const final {
    return CreateMaybeMessage<SJumpGameWaitLine>(nullptr);
  }

  SJumpGameWaitLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SJumpGameWaitLine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SJumpGameWaitLine& from);
  void MergeFrom(const SJumpGameWaitLine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SJumpGameWaitLine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.SJumpGameWaitLine";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStatusFieldNumber = 1,
    kTeamNumberFieldNumber = 3,
    kUidFieldNumber = 4,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 teamNumber = 3;
  void clear_teamnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 teamnumber() const;
  void set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_teamnumber() const;
  void _internal_set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 4;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.SJumpGameWaitLine)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 teamnumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// -------------------------------------------------------------------

class CJumpGameOut :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.CJumpGameOut) */ {
 public:
  CJumpGameOut();
  virtual ~CJumpGameOut();

  CJumpGameOut(const CJumpGameOut& from);
  CJumpGameOut(CJumpGameOut&& from) noexcept
    : CJumpGameOut() {
    *this = ::std::move(from);
  }

  inline CJumpGameOut& operator=(const CJumpGameOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline CJumpGameOut& operator=(CJumpGameOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CJumpGameOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CJumpGameOut* internal_default_instance() {
    return reinterpret_cast<const CJumpGameOut*>(
               &_CJumpGameOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CJumpGameOut& a, CJumpGameOut& b) {
    a.Swap(&b);
  }
  inline void Swap(CJumpGameOut* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CJumpGameOut* New() const final {
    return CreateMaybeMessage<CJumpGameOut>(nullptr);
  }

  CJumpGameOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CJumpGameOut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CJumpGameOut& from);
  void MergeFrom(const CJumpGameOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CJumpGameOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.CJumpGameOut";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNumberFieldNumber = 1,
  };
  // int32 teamNumber = 1;
  void clear_teamnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 teamnumber() const;
  void set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_teamnumber() const;
  void _internal_set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.CJumpGameOut)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 teamnumber_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// -------------------------------------------------------------------

class SJumpGameOut :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.SJumpGameOut) */ {
 public:
  SJumpGameOut();
  virtual ~SJumpGameOut();

  SJumpGameOut(const SJumpGameOut& from);
  SJumpGameOut(SJumpGameOut&& from) noexcept
    : SJumpGameOut() {
    *this = ::std::move(from);
  }

  inline SJumpGameOut& operator=(const SJumpGameOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline SJumpGameOut& operator=(SJumpGameOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SJumpGameOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SJumpGameOut* internal_default_instance() {
    return reinterpret_cast<const SJumpGameOut*>(
               &_SJumpGameOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SJumpGameOut& a, SJumpGameOut& b) {
    a.Swap(&b);
  }
  inline void Swap(SJumpGameOut* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SJumpGameOut* New() const final {
    return CreateMaybeMessage<SJumpGameOut>(nullptr);
  }

  SJumpGameOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SJumpGameOut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SJumpGameOut& from);
  void MergeFrom(const SJumpGameOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SJumpGameOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.SJumpGameOut";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoreFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // int32 score = 1;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.SJumpGameOut)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// -------------------------------------------------------------------

class CGameStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.CGameStatus) */ {
 public:
  CGameStatus();
  virtual ~CGameStatus();

  CGameStatus(const CGameStatus& from);
  CGameStatus(CGameStatus&& from) noexcept
    : CGameStatus() {
    *this = ::std::move(from);
  }

  inline CGameStatus& operator=(const CGameStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameStatus& operator=(CGameStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameStatus* internal_default_instance() {
    return reinterpret_cast<const CGameStatus*>(
               &_CGameStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CGameStatus& a, CGameStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameStatus* New() const final {
    return CreateMaybeMessage<CGameStatus>(nullptr);
  }

  CGameStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameStatus& from);
  void MergeFrom(const CGameStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.CGameStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // int32 gameId = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.CGameStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// -------------------------------------------------------------------

class SGameStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.SGameStatus) */ {
 public:
  SGameStatus();
  virtual ~SGameStatus();

  SGameStatus(const SGameStatus& from);
  SGameStatus(SGameStatus&& from) noexcept
    : SGameStatus() {
    *this = ::std::move(from);
  }

  inline SGameStatus& operator=(const SGameStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGameStatus& operator=(SGameStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGameStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGameStatus* internal_default_instance() {
    return reinterpret_cast<const SGameStatus*>(
               &_SGameStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SGameStatus& a, SGameStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SGameStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGameStatus* New() const final {
    return CreateMaybeMessage<SGameStatus>(nullptr);
  }

  SGameStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGameStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGameStatus& from);
  void MergeFrom(const SGameStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGameStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.SGameStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShipGameWaitLintFieldNumber = 4,
    kJumpGameWaitLintFieldNumber = 5,
    kGameStatusFieldNumber = 1,
    kGameStartTimestampFieldNumber = 2,
    kServerTimestampFieldNumber = 3,
  };
  // repeated .gameTick.ShipGameWaitLint shipGameWaitLint = 4;
  int shipgamewaitlint_size() const;
  private:
  int _internal_shipgamewaitlint_size() const;
  public:
  void clear_shipgamewaitlint();
  ::gameTick::ShipGameWaitLint* mutable_shipgamewaitlint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::ShipGameWaitLint >*
      mutable_shipgamewaitlint();
  private:
  const ::gameTick::ShipGameWaitLint& _internal_shipgamewaitlint(int index) const;
  ::gameTick::ShipGameWaitLint* _internal_add_shipgamewaitlint();
  public:
  const ::gameTick::ShipGameWaitLint& shipgamewaitlint(int index) const;
  ::gameTick::ShipGameWaitLint* add_shipgamewaitlint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::ShipGameWaitLint >&
      shipgamewaitlint() const;

  // repeated .gameTick.JumpGameWaitLint jumpGameWaitLint = 5;
  int jumpgamewaitlint_size() const;
  private:
  int _internal_jumpgamewaitlint_size() const;
  public:
  void clear_jumpgamewaitlint();
  ::gameTick::JumpGameWaitLint* mutable_jumpgamewaitlint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::JumpGameWaitLint >*
      mutable_jumpgamewaitlint();
  private:
  const ::gameTick::JumpGameWaitLint& _internal_jumpgamewaitlint(int index) const;
  ::gameTick::JumpGameWaitLint* _internal_add_jumpgamewaitlint();
  public:
  const ::gameTick::JumpGameWaitLint& jumpgamewaitlint(int index) const;
  ::gameTick::JumpGameWaitLint* add_jumpgamewaitlint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::JumpGameWaitLint >&
      jumpgamewaitlint() const;

  // int32 gameStatus = 1;
  void clear_gamestatus();
  ::PROTOBUF_NAMESPACE_ID::int32 gamestatus() const;
  void set_gamestatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamestatus() const;
  void _internal_set_gamestatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gameStartTimestamp = 2;
  void clear_gamestarttimestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 gamestarttimestamp() const;
  void set_gamestarttimestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamestarttimestamp() const;
  void _internal_set_gamestarttimestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 serverTimestamp = 3;
  void clear_servertimestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 servertimestamp() const;
  void set_servertimestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_servertimestamp() const;
  void _internal_set_servertimestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.SGameStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::ShipGameWaitLint > shipgamewaitlint_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::JumpGameWaitLint > jumpgamewaitlint_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamestatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamestarttimestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 servertimestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// -------------------------------------------------------------------

class ShipGameWaitLint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.ShipGameWaitLint) */ {
 public:
  ShipGameWaitLint();
  virtual ~ShipGameWaitLint();

  ShipGameWaitLint(const ShipGameWaitLint& from);
  ShipGameWaitLint(ShipGameWaitLint&& from) noexcept
    : ShipGameWaitLint() {
    *this = ::std::move(from);
  }

  inline ShipGameWaitLint& operator=(const ShipGameWaitLint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShipGameWaitLint& operator=(ShipGameWaitLint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShipGameWaitLint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShipGameWaitLint* internal_default_instance() {
    return reinterpret_cast<const ShipGameWaitLint*>(
               &_ShipGameWaitLint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ShipGameWaitLint& a, ShipGameWaitLint& b) {
    a.Swap(&b);
  }
  inline void Swap(ShipGameWaitLint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShipGameWaitLint* New() const final {
    return CreateMaybeMessage<ShipGameWaitLint>(nullptr);
  }

  ShipGameWaitLint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShipGameWaitLint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShipGameWaitLint& from);
  void MergeFrom(const ShipGameWaitLint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShipGameWaitLint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.ShipGameWaitLint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNumberFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
  };
  // int32 teamNumber = 1;
  void clear_teamnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 teamnumber() const;
  void set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_teamnumber() const;
  void _internal_set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 left = 2;
  void clear_left();
  ::PROTOBUF_NAMESPACE_ID::int32 left() const;
  void set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_left() const;
  void _internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 right = 3;
  void clear_right();
  ::PROTOBUF_NAMESPACE_ID::int32 right() const;
  void set_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_right() const;
  void _internal_set_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.ShipGameWaitLint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 teamnumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 left_;
  ::PROTOBUF_NAMESPACE_ID::int32 right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// -------------------------------------------------------------------

class JumpGameWaitLint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.JumpGameWaitLint) */ {
 public:
  JumpGameWaitLint();
  virtual ~JumpGameWaitLint();

  JumpGameWaitLint(const JumpGameWaitLint& from);
  JumpGameWaitLint(JumpGameWaitLint&& from) noexcept
    : JumpGameWaitLint() {
    *this = ::std::move(from);
  }

  inline JumpGameWaitLint& operator=(const JumpGameWaitLint& from) {
    CopyFrom(from);
    return *this;
  }
  inline JumpGameWaitLint& operator=(JumpGameWaitLint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JumpGameWaitLint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JumpGameWaitLint* internal_default_instance() {
    return reinterpret_cast<const JumpGameWaitLint*>(
               &_JumpGameWaitLint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(JumpGameWaitLint& a, JumpGameWaitLint& b) {
    a.Swap(&b);
  }
  inline void Swap(JumpGameWaitLint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JumpGameWaitLint* New() const final {
    return CreateMaybeMessage<JumpGameWaitLint>(nullptr);
  }

  JumpGameWaitLint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JumpGameWaitLint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JumpGameWaitLint& from);
  void MergeFrom(const JumpGameWaitLint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JumpGameWaitLint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.JumpGameWaitLint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNumberFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // int32 teamNumber = 1;
  void clear_teamnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 teamnumber() const;
  void set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_teamnumber() const;
  void _internal_set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 2;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.JumpGameWaitLint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 teamnumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// -------------------------------------------------------------------

class CGameRank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.CGameRank) */ {
 public:
  CGameRank();
  virtual ~CGameRank();

  CGameRank(const CGameRank& from);
  CGameRank(CGameRank&& from) noexcept
    : CGameRank() {
    *this = ::std::move(from);
  }

  inline CGameRank& operator=(const CGameRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameRank& operator=(CGameRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGameRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGameRank* internal_default_instance() {
    return reinterpret_cast<const CGameRank*>(
               &_CGameRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CGameRank& a, CGameRank& b) {
    a.Swap(&b);
  }
  inline void Swap(CGameRank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGameRank* New() const final {
    return CreateMaybeMessage<CGameRank>(nullptr);
  }

  CGameRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGameRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGameRank& from);
  void MergeFrom(const CGameRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGameRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.CGameRank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // int32 gameId = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.CGameRank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// -------------------------------------------------------------------

class SGameRank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.SGameRank) */ {
 public:
  SGameRank();
  virtual ~SGameRank();

  SGameRank(const SGameRank& from);
  SGameRank(SGameRank&& from) noexcept
    : SGameRank() {
    *this = ::std::move(from);
  }

  inline SGameRank& operator=(const SGameRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGameRank& operator=(SGameRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGameRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGameRank* internal_default_instance() {
    return reinterpret_cast<const SGameRank*>(
               &_SGameRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SGameRank& a, SGameRank& b) {
    a.Swap(&b);
  }
  inline void Swap(SGameRank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGameRank* New() const final {
    return CreateMaybeMessage<SGameRank>(nullptr);
  }

  SGameRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGameRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGameRank& from);
  void MergeFrom(const SGameRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGameRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.SGameRank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameRankFieldNumber = 1,
    kGameIdFieldNumber = 2,
  };
  // repeated .gameTick.GameRank gameRank = 1;
  int gamerank_size() const;
  private:
  int _internal_gamerank_size() const;
  public:
  void clear_gamerank();
  ::gameTick::GameRank* mutable_gamerank(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::GameRank >*
      mutable_gamerank();
  private:
  const ::gameTick::GameRank& _internal_gamerank(int index) const;
  ::gameTick::GameRank* _internal_add_gamerank();
  public:
  const ::gameTick::GameRank& gamerank(int index) const;
  ::gameTick::GameRank* add_gamerank();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::GameRank >&
      gamerank() const;

  // int32 gameId = 2;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.SGameRank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::GameRank > gamerank_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// -------------------------------------------------------------------

class GameRank :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.GameRank) */ {
 public:
  GameRank();
  virtual ~GameRank();

  GameRank(const GameRank& from);
  GameRank(GameRank&& from) noexcept
    : GameRank() {
    *this = ::std::move(from);
  }

  inline GameRank& operator=(const GameRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameRank& operator=(GameRank&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameRank& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameRank* internal_default_instance() {
    return reinterpret_cast<const GameRank*>(
               &_GameRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GameRank& a, GameRank& b) {
    a.Swap(&b);
  }
  inline void Swap(GameRank* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameRank* New() const final {
    return CreateMaybeMessage<GameRank>(nullptr);
  }

  GameRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameRank>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameRank& from);
  void MergeFrom(const GameRank& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameRank* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.GameRank";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameFieldNumber = 2,
    kRankFieldNumber = 1,
    kScoreFieldNumber = 3,
  };
  // string teamName = 2;
  void clear_teamname();
  const std::string& teamname() const;
  void set_teamname(const std::string& value);
  void set_teamname(std::string&& value);
  void set_teamname(const char* value);
  void set_teamname(const char* value, size_t size);
  std::string* mutable_teamname();
  std::string* release_teamname();
  void set_allocated_teamname(std::string* teamname);
  private:
  const std::string& _internal_teamname() const;
  void _internal_set_teamname(const std::string& value);
  std::string* _internal_mutable_teamname();
  public:

  // int32 rank = 1;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 score = 3;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.GameRank)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr teamname_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// -------------------------------------------------------------------

class SJumpGameShootBullets :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.SJumpGameShootBullets) */ {
 public:
  SJumpGameShootBullets();
  virtual ~SJumpGameShootBullets();

  SJumpGameShootBullets(const SJumpGameShootBullets& from);
  SJumpGameShootBullets(SJumpGameShootBullets&& from) noexcept
    : SJumpGameShootBullets() {
    *this = ::std::move(from);
  }

  inline SJumpGameShootBullets& operator=(const SJumpGameShootBullets& from) {
    CopyFrom(from);
    return *this;
  }
  inline SJumpGameShootBullets& operator=(SJumpGameShootBullets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SJumpGameShootBullets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SJumpGameShootBullets* internal_default_instance() {
    return reinterpret_cast<const SJumpGameShootBullets*>(
               &_SJumpGameShootBullets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SJumpGameShootBullets& a, SJumpGameShootBullets& b) {
    a.Swap(&b);
  }
  inline void Swap(SJumpGameShootBullets* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SJumpGameShootBullets* New() const final {
    return CreateMaybeMessage<SJumpGameShootBullets>(nullptr);
  }

  SJumpGameShootBullets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SJumpGameShootBullets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SJumpGameShootBullets& from);
  void MergeFrom(const SJumpGameShootBullets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SJumpGameShootBullets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.SJumpGameShootBullets";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 1,
    kHeightFieldNumber = 2,
    kNumFieldNumber = 3,
    kSpeedFieldNumber = 4,
    kIntervalFieldNumber = 5,
  };
  // int32 direction = 1;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float height = 2;
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // int32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 4;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // float interval = 5;
  void clear_interval();
  float interval() const;
  void set_interval(float value);
  private:
  float _internal_interval() const;
  void _internal_set_interval(float value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.SJumpGameShootBullets)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  float height_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  float speed_;
  float interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// -------------------------------------------------------------------

class SGameAbnormalStop :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.SGameAbnormalStop) */ {
 public:
  SGameAbnormalStop();
  virtual ~SGameAbnormalStop();

  SGameAbnormalStop(const SGameAbnormalStop& from);
  SGameAbnormalStop(SGameAbnormalStop&& from) noexcept
    : SGameAbnormalStop() {
    *this = ::std::move(from);
  }

  inline SGameAbnormalStop& operator=(const SGameAbnormalStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGameAbnormalStop& operator=(SGameAbnormalStop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGameAbnormalStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGameAbnormalStop* internal_default_instance() {
    return reinterpret_cast<const SGameAbnormalStop*>(
               &_SGameAbnormalStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SGameAbnormalStop& a, SGameAbnormalStop& b) {
    a.Swap(&b);
  }
  inline void Swap(SGameAbnormalStop* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGameAbnormalStop* New() const final {
    return CreateMaybeMessage<SGameAbnormalStop>(nullptr);
  }

  SGameAbnormalStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGameAbnormalStop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGameAbnormalStop& from);
  void MergeFrom(const SGameAbnormalStop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGameAbnormalStop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.SGameAbnormalStop";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceGame_2eproto);
    return ::descriptor_table_spaceGame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kGameIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 gameId = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.SGameAbnormalStop)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceGame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CJumpGameWaitLine

// -------------------------------------------------------------------

// SJumpGameWaitLine

// int32 status = 1;
inline void SJumpGameWaitLine::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameWaitLine::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameWaitLine::status() const {
  // @@protoc_insertion_point(field_get:gameTick.SJumpGameWaitLine.status)
  return _internal_status();
}
inline void SJumpGameWaitLine::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void SJumpGameWaitLine::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:gameTick.SJumpGameWaitLine.status)
}

// string msg = 2;
inline void SJumpGameWaitLine::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SJumpGameWaitLine::msg() const {
  // @@protoc_insertion_point(field_get:gameTick.SJumpGameWaitLine.msg)
  return _internal_msg();
}
inline void SJumpGameWaitLine::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:gameTick.SJumpGameWaitLine.msg)
}
inline std::string* SJumpGameWaitLine::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:gameTick.SJumpGameWaitLine.msg)
  return _internal_mutable_msg();
}
inline const std::string& SJumpGameWaitLine::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SJumpGameWaitLine::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SJumpGameWaitLine::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameTick.SJumpGameWaitLine.msg)
}
inline void SJumpGameWaitLine::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameTick.SJumpGameWaitLine.msg)
}
inline void SJumpGameWaitLine::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameTick.SJumpGameWaitLine.msg)
}
inline std::string* SJumpGameWaitLine::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SJumpGameWaitLine::release_msg() {
  // @@protoc_insertion_point(field_release:gameTick.SJumpGameWaitLine.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SJumpGameWaitLine::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gameTick.SJumpGameWaitLine.msg)
}

// int32 teamNumber = 3;
inline void SJumpGameWaitLine::clear_teamnumber() {
  teamnumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameWaitLine::_internal_teamnumber() const {
  return teamnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameWaitLine::teamnumber() const {
  // @@protoc_insertion_point(field_get:gameTick.SJumpGameWaitLine.teamNumber)
  return _internal_teamnumber();
}
inline void SJumpGameWaitLine::_internal_set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  teamnumber_ = value;
}
inline void SJumpGameWaitLine::set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_teamnumber(value);
  // @@protoc_insertion_point(field_set:gameTick.SJumpGameWaitLine.teamNumber)
}

// int32 uid = 4;
inline void SJumpGameWaitLine::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameWaitLine::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameWaitLine::uid() const {
  // @@protoc_insertion_point(field_get:gameTick.SJumpGameWaitLine.uid)
  return _internal_uid();
}
inline void SJumpGameWaitLine::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SJumpGameWaitLine::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:gameTick.SJumpGameWaitLine.uid)
}

// -------------------------------------------------------------------

// CJumpGameOut

// int32 teamNumber = 1;
inline void CJumpGameOut::clear_teamnumber() {
  teamnumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CJumpGameOut::_internal_teamnumber() const {
  return teamnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CJumpGameOut::teamnumber() const {
  // @@protoc_insertion_point(field_get:gameTick.CJumpGameOut.teamNumber)
  return _internal_teamnumber();
}
inline void CJumpGameOut::_internal_set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  teamnumber_ = value;
}
inline void CJumpGameOut::set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_teamnumber(value);
  // @@protoc_insertion_point(field_set:gameTick.CJumpGameOut.teamNumber)
}

// -------------------------------------------------------------------

// SJumpGameOut

// int32 score = 1;
inline void SJumpGameOut::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameOut::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameOut::score() const {
  // @@protoc_insertion_point(field_get:gameTick.SJumpGameOut.score)
  return _internal_score();
}
inline void SJumpGameOut::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void SJumpGameOut::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:gameTick.SJumpGameOut.score)
}

// int32 uid = 2;
inline void SJumpGameOut::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameOut::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameOut::uid() const {
  // @@protoc_insertion_point(field_get:gameTick.SJumpGameOut.uid)
  return _internal_uid();
}
inline void SJumpGameOut::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SJumpGameOut::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:gameTick.SJumpGameOut.uid)
}

// -------------------------------------------------------------------

// CGameStatus

// int32 gameId = 1;
inline void CGameStatus::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameStatus::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameStatus::gameid() const {
  // @@protoc_insertion_point(field_get:gameTick.CGameStatus.gameId)
  return _internal_gameid();
}
inline void CGameStatus::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void CGameStatus::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:gameTick.CGameStatus.gameId)
}

// -------------------------------------------------------------------

// SGameStatus

// int32 gameStatus = 1;
inline void SGameStatus::clear_gamestatus() {
  gamestatus_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameStatus::_internal_gamestatus() const {
  return gamestatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameStatus::gamestatus() const {
  // @@protoc_insertion_point(field_get:gameTick.SGameStatus.gameStatus)
  return _internal_gamestatus();
}
inline void SGameStatus::_internal_set_gamestatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gamestatus_ = value;
}
inline void SGameStatus::set_gamestatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamestatus(value);
  // @@protoc_insertion_point(field_set:gameTick.SGameStatus.gameStatus)
}

// int32 gameStartTimestamp = 2;
inline void SGameStatus::clear_gamestarttimestamp() {
  gamestarttimestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameStatus::_internal_gamestarttimestamp() const {
  return gamestarttimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameStatus::gamestarttimestamp() const {
  // @@protoc_insertion_point(field_get:gameTick.SGameStatus.gameStartTimestamp)
  return _internal_gamestarttimestamp();
}
inline void SGameStatus::_internal_set_gamestarttimestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gamestarttimestamp_ = value;
}
inline void SGameStatus::set_gamestarttimestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamestarttimestamp(value);
  // @@protoc_insertion_point(field_set:gameTick.SGameStatus.gameStartTimestamp)
}

// int32 serverTimestamp = 3;
inline void SGameStatus::clear_servertimestamp() {
  servertimestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameStatus::_internal_servertimestamp() const {
  return servertimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameStatus::servertimestamp() const {
  // @@protoc_insertion_point(field_get:gameTick.SGameStatus.serverTimestamp)
  return _internal_servertimestamp();
}
inline void SGameStatus::_internal_set_servertimestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  servertimestamp_ = value;
}
inline void SGameStatus::set_servertimestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_servertimestamp(value);
  // @@protoc_insertion_point(field_set:gameTick.SGameStatus.serverTimestamp)
}

// repeated .gameTick.ShipGameWaitLint shipGameWaitLint = 4;
inline int SGameStatus::_internal_shipgamewaitlint_size() const {
  return shipgamewaitlint_.size();
}
inline int SGameStatus::shipgamewaitlint_size() const {
  return _internal_shipgamewaitlint_size();
}
inline void SGameStatus::clear_shipgamewaitlint() {
  shipgamewaitlint_.Clear();
}
inline ::gameTick::ShipGameWaitLint* SGameStatus::mutable_shipgamewaitlint(int index) {
  // @@protoc_insertion_point(field_mutable:gameTick.SGameStatus.shipGameWaitLint)
  return shipgamewaitlint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::ShipGameWaitLint >*
SGameStatus::mutable_shipgamewaitlint() {
  // @@protoc_insertion_point(field_mutable_list:gameTick.SGameStatus.shipGameWaitLint)
  return &shipgamewaitlint_;
}
inline const ::gameTick::ShipGameWaitLint& SGameStatus::_internal_shipgamewaitlint(int index) const {
  return shipgamewaitlint_.Get(index);
}
inline const ::gameTick::ShipGameWaitLint& SGameStatus::shipgamewaitlint(int index) const {
  // @@protoc_insertion_point(field_get:gameTick.SGameStatus.shipGameWaitLint)
  return _internal_shipgamewaitlint(index);
}
inline ::gameTick::ShipGameWaitLint* SGameStatus::_internal_add_shipgamewaitlint() {
  return shipgamewaitlint_.Add();
}
inline ::gameTick::ShipGameWaitLint* SGameStatus::add_shipgamewaitlint() {
  // @@protoc_insertion_point(field_add:gameTick.SGameStatus.shipGameWaitLint)
  return _internal_add_shipgamewaitlint();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::ShipGameWaitLint >&
SGameStatus::shipgamewaitlint() const {
  // @@protoc_insertion_point(field_list:gameTick.SGameStatus.shipGameWaitLint)
  return shipgamewaitlint_;
}

// repeated .gameTick.JumpGameWaitLint jumpGameWaitLint = 5;
inline int SGameStatus::_internal_jumpgamewaitlint_size() const {
  return jumpgamewaitlint_.size();
}
inline int SGameStatus::jumpgamewaitlint_size() const {
  return _internal_jumpgamewaitlint_size();
}
inline void SGameStatus::clear_jumpgamewaitlint() {
  jumpgamewaitlint_.Clear();
}
inline ::gameTick::JumpGameWaitLint* SGameStatus::mutable_jumpgamewaitlint(int index) {
  // @@protoc_insertion_point(field_mutable:gameTick.SGameStatus.jumpGameWaitLint)
  return jumpgamewaitlint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::JumpGameWaitLint >*
SGameStatus::mutable_jumpgamewaitlint() {
  // @@protoc_insertion_point(field_mutable_list:gameTick.SGameStatus.jumpGameWaitLint)
  return &jumpgamewaitlint_;
}
inline const ::gameTick::JumpGameWaitLint& SGameStatus::_internal_jumpgamewaitlint(int index) const {
  return jumpgamewaitlint_.Get(index);
}
inline const ::gameTick::JumpGameWaitLint& SGameStatus::jumpgamewaitlint(int index) const {
  // @@protoc_insertion_point(field_get:gameTick.SGameStatus.jumpGameWaitLint)
  return _internal_jumpgamewaitlint(index);
}
inline ::gameTick::JumpGameWaitLint* SGameStatus::_internal_add_jumpgamewaitlint() {
  return jumpgamewaitlint_.Add();
}
inline ::gameTick::JumpGameWaitLint* SGameStatus::add_jumpgamewaitlint() {
  // @@protoc_insertion_point(field_add:gameTick.SGameStatus.jumpGameWaitLint)
  return _internal_add_jumpgamewaitlint();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::JumpGameWaitLint >&
SGameStatus::jumpgamewaitlint() const {
  // @@protoc_insertion_point(field_list:gameTick.SGameStatus.jumpGameWaitLint)
  return jumpgamewaitlint_;
}

// -------------------------------------------------------------------

// ShipGameWaitLint

// int32 teamNumber = 1;
inline void ShipGameWaitLint::clear_teamnumber() {
  teamnumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipGameWaitLint::_internal_teamnumber() const {
  return teamnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipGameWaitLint::teamnumber() const {
  // @@protoc_insertion_point(field_get:gameTick.ShipGameWaitLint.teamNumber)
  return _internal_teamnumber();
}
inline void ShipGameWaitLint::_internal_set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  teamnumber_ = value;
}
inline void ShipGameWaitLint::set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_teamnumber(value);
  // @@protoc_insertion_point(field_set:gameTick.ShipGameWaitLint.teamNumber)
}

// int32 left = 2;
inline void ShipGameWaitLint::clear_left() {
  left_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipGameWaitLint::_internal_left() const {
  return left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipGameWaitLint::left() const {
  // @@protoc_insertion_point(field_get:gameTick.ShipGameWaitLint.left)
  return _internal_left();
}
inline void ShipGameWaitLint::_internal_set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  left_ = value;
}
inline void ShipGameWaitLint::set_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:gameTick.ShipGameWaitLint.left)
}

// int32 right = 3;
inline void ShipGameWaitLint::clear_right() {
  right_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipGameWaitLint::_internal_right() const {
  return right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShipGameWaitLint::right() const {
  // @@protoc_insertion_point(field_get:gameTick.ShipGameWaitLint.right)
  return _internal_right();
}
inline void ShipGameWaitLint::_internal_set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  right_ = value;
}
inline void ShipGameWaitLint::set_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:gameTick.ShipGameWaitLint.right)
}

// -------------------------------------------------------------------

// JumpGameWaitLint

// int32 teamNumber = 1;
inline void JumpGameWaitLint::clear_teamnumber() {
  teamnumber_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpGameWaitLint::_internal_teamnumber() const {
  return teamnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpGameWaitLint::teamnumber() const {
  // @@protoc_insertion_point(field_get:gameTick.JumpGameWaitLint.teamNumber)
  return _internal_teamnumber();
}
inline void JumpGameWaitLint::_internal_set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  teamnumber_ = value;
}
inline void JumpGameWaitLint::set_teamnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_teamnumber(value);
  // @@protoc_insertion_point(field_set:gameTick.JumpGameWaitLint.teamNumber)
}

// int32 uid = 2;
inline void JumpGameWaitLint::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpGameWaitLint::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JumpGameWaitLint::uid() const {
  // @@protoc_insertion_point(field_get:gameTick.JumpGameWaitLint.uid)
  return _internal_uid();
}
inline void JumpGameWaitLint::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void JumpGameWaitLint::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:gameTick.JumpGameWaitLint.uid)
}

// -------------------------------------------------------------------

// CGameRank

// int32 gameId = 1;
inline void CGameRank::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRank::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGameRank::gameid() const {
  // @@protoc_insertion_point(field_get:gameTick.CGameRank.gameId)
  return _internal_gameid();
}
inline void CGameRank::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void CGameRank::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:gameTick.CGameRank.gameId)
}

// -------------------------------------------------------------------

// SGameRank

// repeated .gameTick.GameRank gameRank = 1;
inline int SGameRank::_internal_gamerank_size() const {
  return gamerank_.size();
}
inline int SGameRank::gamerank_size() const {
  return _internal_gamerank_size();
}
inline void SGameRank::clear_gamerank() {
  gamerank_.Clear();
}
inline ::gameTick::GameRank* SGameRank::mutable_gamerank(int index) {
  // @@protoc_insertion_point(field_mutable:gameTick.SGameRank.gameRank)
  return gamerank_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::GameRank >*
SGameRank::mutable_gamerank() {
  // @@protoc_insertion_point(field_mutable_list:gameTick.SGameRank.gameRank)
  return &gamerank_;
}
inline const ::gameTick::GameRank& SGameRank::_internal_gamerank(int index) const {
  return gamerank_.Get(index);
}
inline const ::gameTick::GameRank& SGameRank::gamerank(int index) const {
  // @@protoc_insertion_point(field_get:gameTick.SGameRank.gameRank)
  return _internal_gamerank(index);
}
inline ::gameTick::GameRank* SGameRank::_internal_add_gamerank() {
  return gamerank_.Add();
}
inline ::gameTick::GameRank* SGameRank::add_gamerank() {
  // @@protoc_insertion_point(field_add:gameTick.SGameRank.gameRank)
  return _internal_add_gamerank();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::GameRank >&
SGameRank::gamerank() const {
  // @@protoc_insertion_point(field_list:gameTick.SGameRank.gameRank)
  return gamerank_;
}

// int32 gameId = 2;
inline void SGameRank::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameRank::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameRank::gameid() const {
  // @@protoc_insertion_point(field_get:gameTick.SGameRank.gameId)
  return _internal_gameid();
}
inline void SGameRank::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void SGameRank::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:gameTick.SGameRank.gameId)
}

// -------------------------------------------------------------------

// GameRank

// int32 rank = 1;
inline void GameRank::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameRank::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameRank::rank() const {
  // @@protoc_insertion_point(field_get:gameTick.GameRank.rank)
  return _internal_rank();
}
inline void GameRank::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void GameRank::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:gameTick.GameRank.rank)
}

// string teamName = 2;
inline void GameRank::clear_teamname() {
  teamname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameRank::teamname() const {
  // @@protoc_insertion_point(field_get:gameTick.GameRank.teamName)
  return _internal_teamname();
}
inline void GameRank::set_teamname(const std::string& value) {
  _internal_set_teamname(value);
  // @@protoc_insertion_point(field_set:gameTick.GameRank.teamName)
}
inline std::string* GameRank::mutable_teamname() {
  // @@protoc_insertion_point(field_mutable:gameTick.GameRank.teamName)
  return _internal_mutable_teamname();
}
inline const std::string& GameRank::_internal_teamname() const {
  return teamname_.GetNoArena();
}
inline void GameRank::_internal_set_teamname(const std::string& value) {
  
  teamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameRank::set_teamname(std::string&& value) {
  
  teamname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameTick.GameRank.teamName)
}
inline void GameRank::set_teamname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  teamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameTick.GameRank.teamName)
}
inline void GameRank::set_teamname(const char* value, size_t size) {
  
  teamname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameTick.GameRank.teamName)
}
inline std::string* GameRank::_internal_mutable_teamname() {
  
  return teamname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameRank::release_teamname() {
  // @@protoc_insertion_point(field_release:gameTick.GameRank.teamName)
  
  return teamname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameRank::set_allocated_teamname(std::string* teamname) {
  if (teamname != nullptr) {
    
  } else {
    
  }
  teamname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), teamname);
  // @@protoc_insertion_point(field_set_allocated:gameTick.GameRank.teamName)
}

// int32 score = 3;
inline void GameRank::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameRank::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameRank::score() const {
  // @@protoc_insertion_point(field_get:gameTick.GameRank.score)
  return _internal_score();
}
inline void GameRank::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void GameRank::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:gameTick.GameRank.score)
}

// -------------------------------------------------------------------

// SJumpGameShootBullets

// int32 direction = 1;
inline void SJumpGameShootBullets::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameShootBullets::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameShootBullets::direction() const {
  // @@protoc_insertion_point(field_get:gameTick.SJumpGameShootBullets.direction)
  return _internal_direction();
}
inline void SJumpGameShootBullets::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
}
inline void SJumpGameShootBullets::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:gameTick.SJumpGameShootBullets.direction)
}

// float height = 2;
inline void SJumpGameShootBullets::clear_height() {
  height_ = 0;
}
inline float SJumpGameShootBullets::_internal_height() const {
  return height_;
}
inline float SJumpGameShootBullets::height() const {
  // @@protoc_insertion_point(field_get:gameTick.SJumpGameShootBullets.height)
  return _internal_height();
}
inline void SJumpGameShootBullets::_internal_set_height(float value) {
  
  height_ = value;
}
inline void SJumpGameShootBullets::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:gameTick.SJumpGameShootBullets.height)
}

// int32 num = 3;
inline void SJumpGameShootBullets::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameShootBullets::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SJumpGameShootBullets::num() const {
  // @@protoc_insertion_point(field_get:gameTick.SJumpGameShootBullets.num)
  return _internal_num();
}
inline void SJumpGameShootBullets::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void SJumpGameShootBullets::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:gameTick.SJumpGameShootBullets.num)
}

// float speed = 4;
inline void SJumpGameShootBullets::clear_speed() {
  speed_ = 0;
}
inline float SJumpGameShootBullets::_internal_speed() const {
  return speed_;
}
inline float SJumpGameShootBullets::speed() const {
  // @@protoc_insertion_point(field_get:gameTick.SJumpGameShootBullets.speed)
  return _internal_speed();
}
inline void SJumpGameShootBullets::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void SJumpGameShootBullets::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:gameTick.SJumpGameShootBullets.speed)
}

// float interval = 5;
inline void SJumpGameShootBullets::clear_interval() {
  interval_ = 0;
}
inline float SJumpGameShootBullets::_internal_interval() const {
  return interval_;
}
inline float SJumpGameShootBullets::interval() const {
  // @@protoc_insertion_point(field_get:gameTick.SJumpGameShootBullets.interval)
  return _internal_interval();
}
inline void SJumpGameShootBullets::_internal_set_interval(float value) {
  
  interval_ = value;
}
inline void SJumpGameShootBullets::set_interval(float value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:gameTick.SJumpGameShootBullets.interval)
}

// -------------------------------------------------------------------

// SGameAbnormalStop

// int32 gameId = 1;
inline void SGameAbnormalStop::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameAbnormalStop::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGameAbnormalStop::gameid() const {
  // @@protoc_insertion_point(field_get:gameTick.SGameAbnormalStop.gameId)
  return _internal_gameid();
}
inline void SGameAbnormalStop::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void SGameAbnormalStop::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:gameTick.SGameAbnormalStop.gameId)
}

// string msg = 2;
inline void SGameAbnormalStop::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGameAbnormalStop::msg() const {
  // @@protoc_insertion_point(field_get:gameTick.SGameAbnormalStop.msg)
  return _internal_msg();
}
inline void SGameAbnormalStop::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:gameTick.SGameAbnormalStop.msg)
}
inline std::string* SGameAbnormalStop::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:gameTick.SGameAbnormalStop.msg)
  return _internal_mutable_msg();
}
inline const std::string& SGameAbnormalStop::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SGameAbnormalStop::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGameAbnormalStop::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameTick.SGameAbnormalStop.msg)
}
inline void SGameAbnormalStop::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameTick.SGameAbnormalStop.msg)
}
inline void SGameAbnormalStop::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameTick.SGameAbnormalStop.msg)
}
inline std::string* SGameAbnormalStop::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGameAbnormalStop::release_msg() {
  // @@protoc_insertion_point(field_release:gameTick.SGameAbnormalStop.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGameAbnormalStop::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gameTick.SGameAbnormalStop.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gameTick

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spaceGame_2eproto
