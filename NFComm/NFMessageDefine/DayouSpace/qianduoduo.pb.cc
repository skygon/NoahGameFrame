// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qianduoduo.proto

#include "qianduoduo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_qianduoduo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BEarthOrderList_qianduoduo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_qianduoduo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMoneyOrderList_qianduoduo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PVector3_vector_2eproto;
namespace pb {
class BMoneyOrderListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BMoneyOrderList> _instance;
} _BMoneyOrderList_default_instance_;
class CMoneyOrderListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMoneyOrderList> _instance;
} _CMoneyOrderList_default_instance_;
class SMoneyOrderListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SMoneyOrderList> _instance;
} _SMoneyOrderList_default_instance_;
class CThrowOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CThrowOrder> _instance;
} _CThrowOrder_default_instance_;
class SThrowOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SThrowOrder> _instance;
} _SThrowOrder_default_instance_;
class BEarthOrderListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BEarthOrderList> _instance;
} _BEarthOrderList_default_instance_;
class CEarthOrderListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CEarthOrderList> _instance;
} _CEarthOrderList_default_instance_;
class SEarthOrderListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SEarthOrderList> _instance;
} _SEarthOrderList_default_instance_;
class CBuyMoneyOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CBuyMoneyOrder> _instance;
} _CBuyMoneyOrder_default_instance_;
class SBuyMoneyOrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SBuyMoneyOrder> _instance;
} _SBuyMoneyOrder_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_BEarthOrderList_qianduoduo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BEarthOrderList_default_instance_;
    new (ptr) ::pb::BEarthOrderList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BEarthOrderList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BEarthOrderList_qianduoduo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BEarthOrderList_qianduoduo_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_BMoneyOrderList_qianduoduo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BMoneyOrderList_default_instance_;
    new (ptr) ::pb::BMoneyOrderList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BMoneyOrderList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BMoneyOrderList_qianduoduo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BMoneyOrderList_qianduoduo_2eproto}, {}};

static void InitDefaultsscc_info_CBuyMoneyOrder_qianduoduo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CBuyMoneyOrder_default_instance_;
    new (ptr) ::pb::CBuyMoneyOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CBuyMoneyOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CBuyMoneyOrder_qianduoduo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CBuyMoneyOrder_qianduoduo_2eproto}, {}};

static void InitDefaultsscc_info_CEarthOrderList_qianduoduo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CEarthOrderList_default_instance_;
    new (ptr) ::pb::CEarthOrderList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CEarthOrderList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CEarthOrderList_qianduoduo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CEarthOrderList_qianduoduo_2eproto}, {}};

static void InitDefaultsscc_info_CMoneyOrderList_qianduoduo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CMoneyOrderList_default_instance_;
    new (ptr) ::pb::CMoneyOrderList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CMoneyOrderList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMoneyOrderList_qianduoduo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CMoneyOrderList_qianduoduo_2eproto}, {}};

static void InitDefaultsscc_info_CThrowOrder_qianduoduo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CThrowOrder_default_instance_;
    new (ptr) ::pb::CThrowOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CThrowOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CThrowOrder_qianduoduo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CThrowOrder_qianduoduo_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_SBuyMoneyOrder_qianduoduo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SBuyMoneyOrder_default_instance_;
    new (ptr) ::pb::SBuyMoneyOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SBuyMoneyOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SBuyMoneyOrder_qianduoduo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SBuyMoneyOrder_qianduoduo_2eproto}, {}};

static void InitDefaultsscc_info_SEarthOrderList_qianduoduo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SEarthOrderList_default_instance_;
    new (ptr) ::pb::SEarthOrderList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SEarthOrderList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SEarthOrderList_qianduoduo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SEarthOrderList_qianduoduo_2eproto}, {
      &scc_info_BEarthOrderList_qianduoduo_2eproto.base,}};

static void InitDefaultsscc_info_SMoneyOrderList_qianduoduo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SMoneyOrderList_default_instance_;
    new (ptr) ::pb::SMoneyOrderList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SMoneyOrderList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SMoneyOrderList_qianduoduo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SMoneyOrderList_qianduoduo_2eproto}, {
      &scc_info_BMoneyOrderList_qianduoduo_2eproto.base,}};

static void InitDefaultsscc_info_SThrowOrder_qianduoduo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SThrowOrder_default_instance_;
    new (ptr) ::pb::SThrowOrder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SThrowOrder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SThrowOrder_qianduoduo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SThrowOrder_qianduoduo_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_qianduoduo_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_qianduoduo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_qianduoduo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_qianduoduo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BMoneyOrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BMoneyOrderList, orderid_),
  PROTOBUF_FIELD_OFFSET(::pb::BMoneyOrderList, name_),
  PROTOBUF_FIELD_OFFSET(::pb::BMoneyOrderList, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CMoneyOrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SMoneyOrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SMoneyOrderList, list_),
  PROTOBUF_FIELD_OFFSET(::pb::SMoneyOrderList, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CThrowOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CThrowOrder, orderid_),
  PROTOBUF_FIELD_OFFSET(::pb::CThrowOrder, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SThrowOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SThrowOrder, orderid_),
  PROTOBUF_FIELD_OFFSET(::pb::SThrowOrder, uid_),
  PROTOBUF_FIELD_OFFSET(::pb::SThrowOrder, code_),
  PROTOBUF_FIELD_OFFSET(::pb::SThrowOrder, msg_),
  PROTOBUF_FIELD_OFFSET(::pb::SThrowOrder, position_),
  PROTOBUF_FIELD_OFFSET(::pb::SThrowOrder, expiretime_),
  PROTOBUF_FIELD_OFFSET(::pb::SThrowOrder, throwuid_),
  PROTOBUF_FIELD_OFFSET(::pb::SThrowOrder, goodsid_),
  PROTOBUF_FIELD_OFFSET(::pb::SThrowOrder, price_),
  PROTOBUF_FIELD_OFFSET(::pb::SThrowOrder, cointype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BEarthOrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BEarthOrderList, orderid_),
  PROTOBUF_FIELD_OFFSET(::pb::BEarthOrderList, name_),
  PROTOBUF_FIELD_OFFSET(::pb::BEarthOrderList, uid_),
  PROTOBUF_FIELD_OFFSET(::pb::BEarthOrderList, price_),
  PROTOBUF_FIELD_OFFSET(::pb::BEarthOrderList, cointype_),
  PROTOBUF_FIELD_OFFSET(::pb::BEarthOrderList, position_),
  PROTOBUF_FIELD_OFFSET(::pb::BEarthOrderList, goodsid_),
  PROTOBUF_FIELD_OFFSET(::pb::BEarthOrderList, expiretime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CEarthOrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SEarthOrderList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SEarthOrderList, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CBuyMoneyOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CBuyMoneyOrder, orderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SBuyMoneyOrder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SBuyMoneyOrder, orderid_),
  PROTOBUF_FIELD_OFFSET(::pb::SBuyMoneyOrder, code_),
  PROTOBUF_FIELD_OFFSET(::pb::SBuyMoneyOrder, msg_),
  PROTOBUF_FIELD_OFFSET(::pb::SBuyMoneyOrder, uid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::BMoneyOrderList)},
  { 8, -1, sizeof(::pb::CMoneyOrderList)},
  { 13, -1, sizeof(::pb::SMoneyOrderList)},
  { 20, -1, sizeof(::pb::CThrowOrder)},
  { 27, -1, sizeof(::pb::SThrowOrder)},
  { 42, -1, sizeof(::pb::BEarthOrderList)},
  { 55, -1, sizeof(::pb::CEarthOrderList)},
  { 60, -1, sizeof(::pb::SEarthOrderList)},
  { 66, -1, sizeof(::pb::CBuyMoneyOrder)},
  { 72, -1, sizeof(::pb::SBuyMoneyOrder)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BMoneyOrderList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CMoneyOrderList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SMoneyOrderList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CThrowOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SThrowOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BEarthOrderList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CEarthOrderList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SEarthOrderList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CBuyMoneyOrder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SBuyMoneyOrder_default_instance_),
};

const char descriptor_table_protodef_qianduoduo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020qianduoduo.proto\022\002pb\032\014vector.proto\"=\n\017"
  "BMoneyOrderList\022\017\n\007orderId\030\001 \001(\005\022\014\n\004name"
  "\030\002 \001(\t\022\013\n\003uid\030\003 \001(\005\"\021\n\017CMoneyOrderList\"A"
  "\n\017SMoneyOrderList\022!\n\004list\030\001 \003(\0132\023.pb.BMo"
  "neyOrderList\022\013\n\003uid\030\002 \001(\005\"B\n\013CThrowOrder"
  "\022\017\n\007orderId\030\001 \001(\005\022\"\n\010position\030\002 \001(\0132\020.ve"
  "ctor.PVector3\"\302\001\n\013SThrowOrder\022\017\n\007orderId"
  "\030\001 \001(\005\022\013\n\003uid\030\002 \001(\005\022\014\n\004code\030\003 \001(\005\022\013\n\003msg"
  "\030\004 \001(\t\022\"\n\010position\030\005 \001(\0132\020.vector.PVecto"
  "r3\022\022\n\nexpireTime\030\006 \001(\005\022\020\n\010throwUid\030\007 \001(\005"
  "\022\017\n\007goodsId\030\010 \001(\005\022\r\n\005price\030\t \001(\005\022\020\n\010coin"
  "Type\030\n \001(\005\"\247\001\n\017BEarthOrderList\022\017\n\007orderI"
  "d\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\013\n\003uid\030\003 \001(\005\022\r\n\005pr"
  "ice\030\004 \001(\005\022\020\n\010coinType\030\005 \001(\005\022\"\n\010position\030"
  "\006 \001(\0132\020.vector.PVector3\022\017\n\007goodsId\030\007 \001(\005"
  "\022\022\n\nexpireTime\030\010 \001(\005\"\021\n\017CEarthOrderList\""
  "4\n\017SEarthOrderList\022!\n\004list\030\001 \003(\0132\023.pb.BE"
  "arthOrderList\"!\n\016CBuyMoneyOrder\022\017\n\007order"
  "Id\030\001 \001(\005\"I\n\016SBuyMoneyOrder\022\017\n\007orderId\030\001 "
  "\001(\005\022\014\n\004code\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\022\013\n\003uid\030\004 "
  "\001(\005B-\n\030com.dayou.space.protobufB\nQianduo"
  "duoZ\005./;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_qianduoduo_2eproto_deps[1] = {
  &::descriptor_table_vector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_qianduoduo_2eproto_sccs[10] = {
  &scc_info_BEarthOrderList_qianduoduo_2eproto.base,
  &scc_info_BMoneyOrderList_qianduoduo_2eproto.base,
  &scc_info_CBuyMoneyOrder_qianduoduo_2eproto.base,
  &scc_info_CEarthOrderList_qianduoduo_2eproto.base,
  &scc_info_CMoneyOrderList_qianduoduo_2eproto.base,
  &scc_info_CThrowOrder_qianduoduo_2eproto.base,
  &scc_info_SBuyMoneyOrder_qianduoduo_2eproto.base,
  &scc_info_SEarthOrderList_qianduoduo_2eproto.base,
  &scc_info_SMoneyOrderList_qianduoduo_2eproto.base,
  &scc_info_SThrowOrder_qianduoduo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_qianduoduo_2eproto_once;
static bool descriptor_table_qianduoduo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_qianduoduo_2eproto = {
  &descriptor_table_qianduoduo_2eproto_initialized, descriptor_table_protodef_qianduoduo_2eproto, "qianduoduo.proto", 858,
  &descriptor_table_qianduoduo_2eproto_once, descriptor_table_qianduoduo_2eproto_sccs, descriptor_table_qianduoduo_2eproto_deps, 10, 1,
  schemas, file_default_instances, TableStruct_qianduoduo_2eproto::offsets,
  file_level_metadata_qianduoduo_2eproto, 10, file_level_enum_descriptors_qianduoduo_2eproto, file_level_service_descriptors_qianduoduo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_qianduoduo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_qianduoduo_2eproto), true);
namespace pb {

// ===================================================================

void BMoneyOrderList::InitAsDefaultInstance() {
}
class BMoneyOrderList::_Internal {
 public:
};

BMoneyOrderList::BMoneyOrderList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BMoneyOrderList)
}
BMoneyOrderList::BMoneyOrderList(const BMoneyOrderList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&orderid_, &from.orderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&orderid_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:pb.BMoneyOrderList)
}

void BMoneyOrderList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BMoneyOrderList_qianduoduo_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&orderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&orderid_)) + sizeof(uid_));
}

BMoneyOrderList::~BMoneyOrderList() {
  // @@protoc_insertion_point(destructor:pb.BMoneyOrderList)
  SharedDtor();
}

void BMoneyOrderList::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BMoneyOrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BMoneyOrderList& BMoneyOrderList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BMoneyOrderList_qianduoduo_2eproto.base);
  return *internal_default_instance();
}


void BMoneyOrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BMoneyOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&orderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&orderid_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* BMoneyOrderList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.BMoneyOrderList.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BMoneyOrderList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BMoneyOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 orderId = 1;
  if (this->orderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_orderid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BMoneyOrderList.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BMoneyOrderList)
  return target;
}

size_t BMoneyOrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BMoneyOrderList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 orderId = 1;
  if (this->orderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orderid());
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BMoneyOrderList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BMoneyOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const BMoneyOrderList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BMoneyOrderList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BMoneyOrderList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BMoneyOrderList)
    MergeFrom(*source);
  }
}

void BMoneyOrderList::MergeFrom(const BMoneyOrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BMoneyOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.orderid() != 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void BMoneyOrderList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BMoneyOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BMoneyOrderList::CopyFrom(const BMoneyOrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BMoneyOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BMoneyOrderList::IsInitialized() const {
  return true;
}

void BMoneyOrderList::InternalSwap(BMoneyOrderList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(orderid_, other->orderid_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BMoneyOrderList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMoneyOrderList::InitAsDefaultInstance() {
}
class CMoneyOrderList::_Internal {
 public:
};

CMoneyOrderList::CMoneyOrderList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CMoneyOrderList)
}
CMoneyOrderList::CMoneyOrderList(const CMoneyOrderList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CMoneyOrderList)
}

void CMoneyOrderList::SharedCtor() {
}

CMoneyOrderList::~CMoneyOrderList() {
  // @@protoc_insertion_point(destructor:pb.CMoneyOrderList)
  SharedDtor();
}

void CMoneyOrderList::SharedDtor() {
}

void CMoneyOrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMoneyOrderList& CMoneyOrderList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMoneyOrderList_qianduoduo_2eproto.base);
  return *internal_default_instance();
}


void CMoneyOrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CMoneyOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CMoneyOrderList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMoneyOrderList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CMoneyOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CMoneyOrderList)
  return target;
}

size_t CMoneyOrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CMoneyOrderList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMoneyOrderList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CMoneyOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMoneyOrderList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMoneyOrderList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CMoneyOrderList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CMoneyOrderList)
    MergeFrom(*source);
  }
}

void CMoneyOrderList::MergeFrom(const CMoneyOrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CMoneyOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMoneyOrderList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CMoneyOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMoneyOrderList::CopyFrom(const CMoneyOrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CMoneyOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMoneyOrderList::IsInitialized() const {
  return true;
}

void CMoneyOrderList::InternalSwap(CMoneyOrderList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMoneyOrderList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SMoneyOrderList::InitAsDefaultInstance() {
}
class SMoneyOrderList::_Internal {
 public:
};

SMoneyOrderList::SMoneyOrderList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SMoneyOrderList)
}
SMoneyOrderList::SMoneyOrderList(const SMoneyOrderList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:pb.SMoneyOrderList)
}

void SMoneyOrderList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SMoneyOrderList_qianduoduo_2eproto.base);
  uid_ = 0;
}

SMoneyOrderList::~SMoneyOrderList() {
  // @@protoc_insertion_point(destructor:pb.SMoneyOrderList)
  SharedDtor();
}

void SMoneyOrderList::SharedDtor() {
}

void SMoneyOrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SMoneyOrderList& SMoneyOrderList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SMoneyOrderList_qianduoduo_2eproto.base);
  return *internal_default_instance();
}


void SMoneyOrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SMoneyOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* SMoneyOrderList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.BMoneyOrderList list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SMoneyOrderList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SMoneyOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.BMoneyOrderList list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SMoneyOrderList)
  return target;
}

size_t SMoneyOrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SMoneyOrderList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.BMoneyOrderList list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SMoneyOrderList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SMoneyOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const SMoneyOrderList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SMoneyOrderList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SMoneyOrderList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SMoneyOrderList)
    MergeFrom(*source);
  }
}

void SMoneyOrderList::MergeFrom(const SMoneyOrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SMoneyOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SMoneyOrderList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SMoneyOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMoneyOrderList::CopyFrom(const SMoneyOrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SMoneyOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMoneyOrderList::IsInitialized() const {
  return true;
}

void SMoneyOrderList::InternalSwap(SMoneyOrderList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SMoneyOrderList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CThrowOrder::InitAsDefaultInstance() {
  ::pb::_CThrowOrder_default_instance_._instance.get_mutable()->position_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class CThrowOrder::_Internal {
 public:
  static const ::vector::PVector3& position(const CThrowOrder* msg);
};

const ::vector::PVector3&
CThrowOrder::_Internal::position(const CThrowOrder* msg) {
  return *msg->position_;
}
void CThrowOrder::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
CThrowOrder::CThrowOrder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CThrowOrder)
}
CThrowOrder::CThrowOrder(const CThrowOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::vector::PVector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  orderid_ = from.orderid_;
  // @@protoc_insertion_point(copy_constructor:pb.CThrowOrder)
}

void CThrowOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CThrowOrder_qianduoduo_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orderid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(orderid_));
}

CThrowOrder::~CThrowOrder() {
  // @@protoc_insertion_point(destructor:pb.CThrowOrder)
  SharedDtor();
}

void CThrowOrder::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void CThrowOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CThrowOrder& CThrowOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CThrowOrder_qianduoduo_2eproto.base);
  return *internal_default_instance();
}


void CThrowOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CThrowOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  orderid_ = 0;
  _internal_metadata_.Clear();
}

const char* CThrowOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CThrowOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CThrowOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 orderId = 1;
  if (this->orderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_orderid(), target);
  }

  // .vector.PVector3 position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CThrowOrder)
  return target;
}

size_t CThrowOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CThrowOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vector.PVector3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 orderId = 1;
  if (this->orderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orderid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CThrowOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CThrowOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CThrowOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CThrowOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CThrowOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CThrowOrder)
    MergeFrom(*source);
  }
}

void CThrowOrder::MergeFrom(const CThrowOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CThrowOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::vector::PVector3::MergeFrom(from._internal_position());
  }
  if (from.orderid() != 0) {
    _internal_set_orderid(from._internal_orderid());
  }
}

void CThrowOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CThrowOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CThrowOrder::CopyFrom(const CThrowOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CThrowOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CThrowOrder::IsInitialized() const {
  return true;
}

void CThrowOrder::InternalSwap(CThrowOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(orderid_, other->orderid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CThrowOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SThrowOrder::InitAsDefaultInstance() {
  ::pb::_SThrowOrder_default_instance_._instance.get_mutable()->position_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class SThrowOrder::_Internal {
 public:
  static const ::vector::PVector3& position(const SThrowOrder* msg);
};

const ::vector::PVector3&
SThrowOrder::_Internal::position(const SThrowOrder* msg) {
  return *msg->position_;
}
void SThrowOrder::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
SThrowOrder::SThrowOrder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SThrowOrder)
}
SThrowOrder::SThrowOrder(const SThrowOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from._internal_has_position()) {
    position_ = new ::vector::PVector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&orderid_, &from.orderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cointype_) -
    reinterpret_cast<char*>(&orderid_)) + sizeof(cointype_));
  // @@protoc_insertion_point(copy_constructor:pb.SThrowOrder)
}

void SThrowOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SThrowOrder_qianduoduo_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cointype_) -
      reinterpret_cast<char*>(&position_)) + sizeof(cointype_));
}

SThrowOrder::~SThrowOrder() {
  // @@protoc_insertion_point(destructor:pb.SThrowOrder)
  SharedDtor();
}

void SThrowOrder::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void SThrowOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SThrowOrder& SThrowOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SThrowOrder_qianduoduo_2eproto.base);
  return *internal_default_instance();
}


void SThrowOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SThrowOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&orderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cointype_) -
      reinterpret_cast<char*>(&orderid_)) + sizeof(cointype_));
  _internal_metadata_.Clear();
}

const char* SThrowOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SThrowOrder.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expireTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          expiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 throwUid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          throwuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coinType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cointype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SThrowOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SThrowOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 orderId = 1;
  if (this->orderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_orderid(), target);
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_uid(), target);
  }

  // int32 code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_code(), target);
  }

  // string msg = 4;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SThrowOrder.msg");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_msg(), target);
  }

  // .vector.PVector3 position = 5;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::position(this), target, stream);
  }

  // int32 expireTime = 6;
  if (this->expiretime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_expiretime(), target);
  }

  // int32 throwUid = 7;
  if (this->throwuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_throwuid(), target);
  }

  // int32 goodsId = 8;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_goodsid(), target);
  }

  // int32 price = 9;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_price(), target);
  }

  // int32 coinType = 10;
  if (this->cointype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_cointype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SThrowOrder)
  return target;
}

size_t SThrowOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SThrowOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .vector.PVector3 position = 5;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 orderId = 1;
  if (this->orderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orderid());
  }

  // int32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 expireTime = 6;
  if (this->expiretime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expiretime());
  }

  // int32 throwUid = 7;
  if (this->throwuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_throwuid());
  }

  // int32 goodsId = 8;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 price = 9;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  // int32 coinType = 10;
  if (this->cointype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cointype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SThrowOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SThrowOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const SThrowOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SThrowOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SThrowOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SThrowOrder)
    MergeFrom(*source);
  }
}

void SThrowOrder::MergeFrom(const SThrowOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SThrowOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_position()) {
    _internal_mutable_position()->::vector::PVector3::MergeFrom(from._internal_position());
  }
  if (from.orderid() != 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.expiretime() != 0) {
    _internal_set_expiretime(from._internal_expiretime());
  }
  if (from.throwuid() != 0) {
    _internal_set_throwuid(from._internal_throwuid());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.cointype() != 0) {
    _internal_set_cointype(from._internal_cointype());
  }
}

void SThrowOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SThrowOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SThrowOrder::CopyFrom(const SThrowOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SThrowOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SThrowOrder::IsInitialized() const {
  return true;
}

void SThrowOrder::InternalSwap(SThrowOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(orderid_, other->orderid_);
  swap(uid_, other->uid_);
  swap(code_, other->code_);
  swap(expiretime_, other->expiretime_);
  swap(throwuid_, other->throwuid_);
  swap(goodsid_, other->goodsid_);
  swap(price_, other->price_);
  swap(cointype_, other->cointype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SThrowOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BEarthOrderList::InitAsDefaultInstance() {
  ::pb::_BEarthOrderList_default_instance_._instance.get_mutable()->position_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class BEarthOrderList::_Internal {
 public:
  static const ::vector::PVector3& position(const BEarthOrderList* msg);
};

const ::vector::PVector3&
BEarthOrderList::_Internal::position(const BEarthOrderList* msg) {
  return *msg->position_;
}
void BEarthOrderList::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
BEarthOrderList::BEarthOrderList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BEarthOrderList)
}
BEarthOrderList::BEarthOrderList(const BEarthOrderList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_position()) {
    position_ = new ::vector::PVector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&orderid_, &from.orderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiretime_) -
    reinterpret_cast<char*>(&orderid_)) + sizeof(expiretime_));
  // @@protoc_insertion_point(copy_constructor:pb.BEarthOrderList)
}

void BEarthOrderList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BEarthOrderList_qianduoduo_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiretime_) -
      reinterpret_cast<char*>(&position_)) + sizeof(expiretime_));
}

BEarthOrderList::~BEarthOrderList() {
  // @@protoc_insertion_point(destructor:pb.BEarthOrderList)
  SharedDtor();
}

void BEarthOrderList::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void BEarthOrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BEarthOrderList& BEarthOrderList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BEarthOrderList_qianduoduo_2eproto.base);
  return *internal_default_instance();
}


void BEarthOrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BEarthOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&orderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiretime_) -
      reinterpret_cast<char*>(&orderid_)) + sizeof(expiretime_));
  _internal_metadata_.Clear();
}

const char* BEarthOrderList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.BEarthOrderList.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coinType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cointype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expireTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          expiretime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BEarthOrderList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BEarthOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 orderId = 1;
  if (this->orderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_orderid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BEarthOrderList.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_uid(), target);
  }

  // int32 price = 4;
  if (this->price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_price(), target);
  }

  // int32 coinType = 5;
  if (this->cointype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_cointype(), target);
  }

  // .vector.PVector3 position = 6;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::position(this), target, stream);
  }

  // int32 goodsId = 7;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_goodsid(), target);
  }

  // int32 expireTime = 8;
  if (this->expiretime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_expiretime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BEarthOrderList)
  return target;
}

size_t BEarthOrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BEarthOrderList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .vector.PVector3 position = 6;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 orderId = 1;
  if (this->orderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orderid());
  }

  // int32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 price = 4;
  if (this->price() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_price());
  }

  // int32 coinType = 5;
  if (this->cointype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cointype());
  }

  // int32 goodsId = 7;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  // int32 expireTime = 8;
  if (this->expiretime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expiretime());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BEarthOrderList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BEarthOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const BEarthOrderList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BEarthOrderList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BEarthOrderList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BEarthOrderList)
    MergeFrom(*source);
  }
}

void BEarthOrderList::MergeFrom(const BEarthOrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BEarthOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    _internal_mutable_position()->::vector::PVector3::MergeFrom(from._internal_position());
  }
  if (from.orderid() != 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from.cointype() != 0) {
    _internal_set_cointype(from._internal_cointype());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
  if (from.expiretime() != 0) {
    _internal_set_expiretime(from._internal_expiretime());
  }
}

void BEarthOrderList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BEarthOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BEarthOrderList::CopyFrom(const BEarthOrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BEarthOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BEarthOrderList::IsInitialized() const {
  return true;
}

void BEarthOrderList::InternalSwap(BEarthOrderList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(orderid_, other->orderid_);
  swap(uid_, other->uid_);
  swap(price_, other->price_);
  swap(cointype_, other->cointype_);
  swap(goodsid_, other->goodsid_);
  swap(expiretime_, other->expiretime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BEarthOrderList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CEarthOrderList::InitAsDefaultInstance() {
}
class CEarthOrderList::_Internal {
 public:
};

CEarthOrderList::CEarthOrderList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CEarthOrderList)
}
CEarthOrderList::CEarthOrderList(const CEarthOrderList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CEarthOrderList)
}

void CEarthOrderList::SharedCtor() {
}

CEarthOrderList::~CEarthOrderList() {
  // @@protoc_insertion_point(destructor:pb.CEarthOrderList)
  SharedDtor();
}

void CEarthOrderList::SharedDtor() {
}

void CEarthOrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEarthOrderList& CEarthOrderList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CEarthOrderList_qianduoduo_2eproto.base);
  return *internal_default_instance();
}


void CEarthOrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CEarthOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CEarthOrderList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CEarthOrderList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CEarthOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CEarthOrderList)
  return target;
}

size_t CEarthOrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CEarthOrderList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEarthOrderList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CEarthOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const CEarthOrderList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CEarthOrderList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CEarthOrderList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CEarthOrderList)
    MergeFrom(*source);
  }
}

void CEarthOrderList::MergeFrom(const CEarthOrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CEarthOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CEarthOrderList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CEarthOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEarthOrderList::CopyFrom(const CEarthOrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CEarthOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEarthOrderList::IsInitialized() const {
  return true;
}

void CEarthOrderList::InternalSwap(CEarthOrderList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CEarthOrderList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SEarthOrderList::InitAsDefaultInstance() {
}
class SEarthOrderList::_Internal {
 public:
};

SEarthOrderList::SEarthOrderList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SEarthOrderList)
}
SEarthOrderList::SEarthOrderList(const SEarthOrderList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      list_(from.list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.SEarthOrderList)
}

void SEarthOrderList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SEarthOrderList_qianduoduo_2eproto.base);
}

SEarthOrderList::~SEarthOrderList() {
  // @@protoc_insertion_point(destructor:pb.SEarthOrderList)
  SharedDtor();
}

void SEarthOrderList::SharedDtor() {
}

void SEarthOrderList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SEarthOrderList& SEarthOrderList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SEarthOrderList_qianduoduo_2eproto.base);
  return *internal_default_instance();
}


void SEarthOrderList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SEarthOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear();
}

const char* SEarthOrderList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.BEarthOrderList list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SEarthOrderList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SEarthOrderList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.BEarthOrderList list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SEarthOrderList)
  return target;
}

size_t SEarthOrderList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SEarthOrderList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.BEarthOrderList list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SEarthOrderList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SEarthOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  const SEarthOrderList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SEarthOrderList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SEarthOrderList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SEarthOrderList)
    MergeFrom(*source);
  }
}

void SEarthOrderList::MergeFrom(const SEarthOrderList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SEarthOrderList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void SEarthOrderList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SEarthOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SEarthOrderList::CopyFrom(const SEarthOrderList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SEarthOrderList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SEarthOrderList::IsInitialized() const {
  return true;
}

void SEarthOrderList::InternalSwap(SEarthOrderList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SEarthOrderList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CBuyMoneyOrder::InitAsDefaultInstance() {
}
class CBuyMoneyOrder::_Internal {
 public:
};

CBuyMoneyOrder::CBuyMoneyOrder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CBuyMoneyOrder)
}
CBuyMoneyOrder::CBuyMoneyOrder(const CBuyMoneyOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_ = from.orderid_;
  // @@protoc_insertion_point(copy_constructor:pb.CBuyMoneyOrder)
}

void CBuyMoneyOrder::SharedCtor() {
  orderid_ = 0;
}

CBuyMoneyOrder::~CBuyMoneyOrder() {
  // @@protoc_insertion_point(destructor:pb.CBuyMoneyOrder)
  SharedDtor();
}

void CBuyMoneyOrder::SharedDtor() {
}

void CBuyMoneyOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CBuyMoneyOrder& CBuyMoneyOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CBuyMoneyOrder_qianduoduo_2eproto.base);
  return *internal_default_instance();
}


void CBuyMoneyOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CBuyMoneyOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_ = 0;
  _internal_metadata_.Clear();
}

const char* CBuyMoneyOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CBuyMoneyOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CBuyMoneyOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 orderId = 1;
  if (this->orderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CBuyMoneyOrder)
  return target;
}

size_t CBuyMoneyOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CBuyMoneyOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 orderId = 1;
  if (this->orderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orderid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CBuyMoneyOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CBuyMoneyOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const CBuyMoneyOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CBuyMoneyOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CBuyMoneyOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CBuyMoneyOrder)
    MergeFrom(*source);
  }
}

void CBuyMoneyOrder::MergeFrom(const CBuyMoneyOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CBuyMoneyOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid() != 0) {
    _internal_set_orderid(from._internal_orderid());
  }
}

void CBuyMoneyOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CBuyMoneyOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBuyMoneyOrder::CopyFrom(const CBuyMoneyOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CBuyMoneyOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBuyMoneyOrder::IsInitialized() const {
  return true;
}

void CBuyMoneyOrder::InternalSwap(CBuyMoneyOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(orderid_, other->orderid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CBuyMoneyOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SBuyMoneyOrder::InitAsDefaultInstance() {
}
class SBuyMoneyOrder::_Internal {
 public:
};

SBuyMoneyOrder::SBuyMoneyOrder()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SBuyMoneyOrder)
}
SBuyMoneyOrder::SBuyMoneyOrder(const SBuyMoneyOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&orderid_, &from.orderid_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&orderid_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:pb.SBuyMoneyOrder)
}

void SBuyMoneyOrder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SBuyMoneyOrder_qianduoduo_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&orderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&orderid_)) + sizeof(uid_));
}

SBuyMoneyOrder::~SBuyMoneyOrder() {
  // @@protoc_insertion_point(destructor:pb.SBuyMoneyOrder)
  SharedDtor();
}

void SBuyMoneyOrder::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SBuyMoneyOrder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SBuyMoneyOrder& SBuyMoneyOrder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SBuyMoneyOrder_qianduoduo_2eproto.base);
  return *internal_default_instance();
}


void SBuyMoneyOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SBuyMoneyOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&orderid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&orderid_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

const char* SBuyMoneyOrder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SBuyMoneyOrder.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SBuyMoneyOrder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SBuyMoneyOrder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 orderId = 1;
  if (this->orderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_orderid(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SBuyMoneyOrder.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SBuyMoneyOrder)
  return target;
}

size_t SBuyMoneyOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SBuyMoneyOrder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // int32 orderId = 1;
  if (this->orderid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_orderid());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // int32 uid = 4;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SBuyMoneyOrder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SBuyMoneyOrder)
  GOOGLE_DCHECK_NE(&from, this);
  const SBuyMoneyOrder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SBuyMoneyOrder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SBuyMoneyOrder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SBuyMoneyOrder)
    MergeFrom(*source);
  }
}

void SBuyMoneyOrder::MergeFrom(const SBuyMoneyOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SBuyMoneyOrder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.orderid() != 0) {
    _internal_set_orderid(from._internal_orderid());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SBuyMoneyOrder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SBuyMoneyOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SBuyMoneyOrder::CopyFrom(const SBuyMoneyOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SBuyMoneyOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SBuyMoneyOrder::IsInitialized() const {
  return true;
}

void SBuyMoneyOrder::InternalSwap(SBuyMoneyOrder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(orderid_, other->orderid_);
  swap(code_, other->code_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SBuyMoneyOrder::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::BMoneyOrderList* Arena::CreateMaybeMessage< ::pb::BMoneyOrderList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BMoneyOrderList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CMoneyOrderList* Arena::CreateMaybeMessage< ::pb::CMoneyOrderList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CMoneyOrderList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SMoneyOrderList* Arena::CreateMaybeMessage< ::pb::SMoneyOrderList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SMoneyOrderList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CThrowOrder* Arena::CreateMaybeMessage< ::pb::CThrowOrder >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CThrowOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SThrowOrder* Arena::CreateMaybeMessage< ::pb::SThrowOrder >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SThrowOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BEarthOrderList* Arena::CreateMaybeMessage< ::pb::BEarthOrderList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BEarthOrderList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CEarthOrderList* Arena::CreateMaybeMessage< ::pb::CEarthOrderList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CEarthOrderList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SEarthOrderList* Arena::CreateMaybeMessage< ::pb::SEarthOrderList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SEarthOrderList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CBuyMoneyOrder* Arena::CreateMaybeMessage< ::pb::CBuyMoneyOrder >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CBuyMoneyOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SBuyMoneyOrder* Arena::CreateMaybeMessage< ::pb::SBuyMoneyOrder >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SBuyMoneyOrder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
