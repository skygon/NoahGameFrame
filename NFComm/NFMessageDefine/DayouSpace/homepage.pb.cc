// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: homepage.proto

#include "homepage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_homepage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BNewUserRewardConfig_homepage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_homepage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BNotice_homepage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_homepage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SHomepageConfig_homepage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_homepage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SNewHomepageConfig_homepage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PVector3_vector_2eproto;
namespace pb {
class CHomepageConfigListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHomepageConfigList> _instance;
} _CHomepageConfigList_default_instance_;
class SHomepageConfigListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHomepageConfigList> _instance;
} _SHomepageConfigList_default_instance_;
class SHomepageConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHomepageConfig> _instance;
} _SHomepageConfig_default_instance_;
class CNewHomepageConfigListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CNewHomepageConfigList> _instance;
} _CNewHomepageConfigList_default_instance_;
class SNewHomepageConfigListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNewHomepageConfigList> _instance;
} _SNewHomepageConfigList_default_instance_;
class SNewHomepageConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNewHomepageConfig> _instance;
} _SNewHomepageConfig_default_instance_;
class BNoticeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BNotice> _instance;
} _BNotice_default_instance_;
class SHomepageNewUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHomepageNewUser> _instance;
} _SHomepageNewUser_default_instance_;
class CHomepageNewUserProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHomepageNewUserProgress> _instance;
} _CHomepageNewUserProgress_default_instance_;
class SHomepageNewUserProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHomepageNewUserProgress> _instance;
} _SHomepageNewUserProgress_default_instance_;
class CHomepageNewUserEventRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHomepageNewUserEventReward> _instance;
} _CHomepageNewUserEventReward_default_instance_;
class SHomepageNewUserEventRewardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHomepageNewUserEventReward> _instance;
} _SHomepageNewUserEventReward_default_instance_;
class SNewUserRewardConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNewUserRewardConfig> _instance;
} _SNewUserRewardConfig_default_instance_;
class BNewUserRewardConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BNewUserRewardConfig> _instance;
} _BNewUserRewardConfig_default_instance_;
class CNewUserRewardFinishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CNewUserRewardFinish> _instance;
} _CNewUserRewardFinish_default_instance_;
class SNewUserRewardFinishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SNewUserRewardFinish> _instance;
} _SNewUserRewardFinish_default_instance_;
}  // namespace pb
static void InitDefaultsscc_info_BNewUserRewardConfig_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BNewUserRewardConfig_default_instance_;
    new (ptr) ::pb::BNewUserRewardConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BNewUserRewardConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BNewUserRewardConfig_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BNewUserRewardConfig_homepage_2eproto}, {}};

static void InitDefaultsscc_info_BNotice_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_BNotice_default_instance_;
    new (ptr) ::pb::BNotice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::BNotice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BNotice_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BNotice_homepage_2eproto}, {}};

static void InitDefaultsscc_info_CHomepageConfigList_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CHomepageConfigList_default_instance_;
    new (ptr) ::pb::CHomepageConfigList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CHomepageConfigList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHomepageConfigList_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHomepageConfigList_homepage_2eproto}, {}};

static void InitDefaultsscc_info_CHomepageNewUserEventReward_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CHomepageNewUserEventReward_default_instance_;
    new (ptr) ::pb::CHomepageNewUserEventReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CHomepageNewUserEventReward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHomepageNewUserEventReward_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHomepageNewUserEventReward_homepage_2eproto}, {}};

static void InitDefaultsscc_info_CHomepageNewUserProgress_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CHomepageNewUserProgress_default_instance_;
    new (ptr) ::pb::CHomepageNewUserProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CHomepageNewUserProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHomepageNewUserProgress_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHomepageNewUserProgress_homepage_2eproto}, {}};

static void InitDefaultsscc_info_CNewHomepageConfigList_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CNewHomepageConfigList_default_instance_;
    new (ptr) ::pb::CNewHomepageConfigList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CNewHomepageConfigList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CNewHomepageConfigList_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CNewHomepageConfigList_homepage_2eproto}, {}};

static void InitDefaultsscc_info_CNewUserRewardFinish_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_CNewUserRewardFinish_default_instance_;
    new (ptr) ::pb::CNewUserRewardFinish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::CNewUserRewardFinish::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CNewUserRewardFinish_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CNewUserRewardFinish_homepage_2eproto}, {}};

static void InitDefaultsscc_info_SHomepageConfig_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SHomepageConfig_default_instance_;
    new (ptr) ::pb::SHomepageConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SHomepageConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SHomepageConfig_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SHomepageConfig_homepage_2eproto}, {
      &scc_info_BNotice_homepage_2eproto.base,}};

static void InitDefaultsscc_info_SHomepageConfigList_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SHomepageConfigList_default_instance_;
    new (ptr) ::pb::SHomepageConfigList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SHomepageConfigList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SHomepageConfigList_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SHomepageConfigList_homepage_2eproto}, {
      &scc_info_SHomepageConfig_homepage_2eproto.base,}};

static void InitDefaultsscc_info_SHomepageNewUser_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SHomepageNewUser_default_instance_;
    new (ptr) ::pb::SHomepageNewUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SHomepageNewUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SHomepageNewUser_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SHomepageNewUser_homepage_2eproto}, {
      &scc_info_PVector3_vector_2eproto.base,}};

static void InitDefaultsscc_info_SHomepageNewUserEventReward_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SHomepageNewUserEventReward_default_instance_;
    new (ptr) ::pb::SHomepageNewUserEventReward();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SHomepageNewUserEventReward::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHomepageNewUserEventReward_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SHomepageNewUserEventReward_homepage_2eproto}, {}};

static void InitDefaultsscc_info_SHomepageNewUserProgress_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SHomepageNewUserProgress_default_instance_;
    new (ptr) ::pb::SHomepageNewUserProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SHomepageNewUserProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHomepageNewUserProgress_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SHomepageNewUserProgress_homepage_2eproto}, {}};

static void InitDefaultsscc_info_SNewHomepageConfig_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SNewHomepageConfig_default_instance_;
    new (ptr) ::pb::SNewHomepageConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SNewHomepageConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SNewHomepageConfig_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SNewHomepageConfig_homepage_2eproto}, {}};

static void InitDefaultsscc_info_SNewHomepageConfigList_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SNewHomepageConfigList_default_instance_;
    new (ptr) ::pb::SNewHomepageConfigList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SNewHomepageConfigList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SNewHomepageConfigList_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SNewHomepageConfigList_homepage_2eproto}, {
      &scc_info_SNewHomepageConfig_homepage_2eproto.base,}};

static void InitDefaultsscc_info_SNewUserRewardConfig_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SNewUserRewardConfig_default_instance_;
    new (ptr) ::pb::SNewUserRewardConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SNewUserRewardConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SNewUserRewardConfig_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SNewUserRewardConfig_homepage_2eproto}, {
      &scc_info_BNewUserRewardConfig_homepage_2eproto.base,}};

static void InitDefaultsscc_info_SNewUserRewardFinish_homepage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pb::_SNewUserRewardFinish_default_instance_;
    new (ptr) ::pb::SNewUserRewardFinish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pb::SNewUserRewardFinish::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SNewUserRewardFinish_homepage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SNewUserRewardFinish_homepage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_homepage_2eproto[16];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_homepage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_homepage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_homepage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CHomepageConfigList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CHomepageConfigList, locationkeys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfigList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfigList, configlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, location_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, title_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, weight_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, media_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, mediatype_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, performer_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, linktype_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, link_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, validstarttime_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, validendtime_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, status_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, noticelist_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, housetype_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageConfig, locationkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CNewHomepageConfigList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CNewHomepageConfigList, locationkeys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SNewHomepageConfigList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SNewHomepageConfigList, configlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SNewHomepageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SNewHomepageConfig, key_),
  PROTOBUF_FIELD_OFFSET(::pb::SNewHomepageConfig, configvalue_),
  PROTOBUF_FIELD_OFFSET(::pb::SNewHomepageConfig, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BNotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BNotice, content_),
  PROTOBUF_FIELD_OFFSET(::pb::BNotice, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUser, positionone_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUser, positiontwo_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUser, positionthree_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUser, positiononeimage_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUser, eventonescope_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUser, eventoneid_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUser, eventtwoscope_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUser, eventtwoid_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUser, userprogress_),
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUser, eventonerewardstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CHomepageNewUserProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CHomepageNewUserProgress, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUserProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUserProgress, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CHomepageNewUserEventReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CHomepageNewUserEventReward, eventid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUserEventReward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SHomepageNewUserEventReward, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SNewUserRewardConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SNewUserRewardConfig, configlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::BNewUserRewardConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::BNewUserRewardConfig, id_),
  PROTOBUF_FIELD_OFFSET(::pb::BNewUserRewardConfig, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::CNewUserRewardFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::CNewUserRewardFinish, id_),
  PROTOBUF_FIELD_OFFSET(::pb::CNewUserRewardFinish, profituid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pb::SNewUserRewardFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pb::SNewUserRewardFinish, state_),
  PROTOBUF_FIELD_OFFSET(::pb::SNewUserRewardFinish, id_),
  PROTOBUF_FIELD_OFFSET(::pb::SNewUserRewardFinish, profituid_),
  PROTOBUF_FIELD_OFFSET(::pb::SNewUserRewardFinish, reportuid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pb::CHomepageConfigList)},
  { 6, -1, sizeof(::pb::SHomepageConfigList)},
  { 12, -1, sizeof(::pb::SHomepageConfig)},
  { 31, -1, sizeof(::pb::CNewHomepageConfigList)},
  { 37, -1, sizeof(::pb::SNewHomepageConfigList)},
  { 43, -1, sizeof(::pb::SNewHomepageConfig)},
  { 51, -1, sizeof(::pb::BNotice)},
  { 58, -1, sizeof(::pb::SHomepageNewUser)},
  { 73, -1, sizeof(::pb::CHomepageNewUserProgress)},
  { 79, -1, sizeof(::pb::SHomepageNewUserProgress)},
  { 85, -1, sizeof(::pb::CHomepageNewUserEventReward)},
  { 91, -1, sizeof(::pb::SHomepageNewUserEventReward)},
  { 97, -1, sizeof(::pb::SNewUserRewardConfig)},
  { 103, -1, sizeof(::pb::BNewUserRewardConfig)},
  { 110, -1, sizeof(::pb::CNewUserRewardFinish)},
  { 117, -1, sizeof(::pb::SNewUserRewardFinish)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CHomepageConfigList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SHomepageConfigList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SHomepageConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CNewHomepageConfigList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SNewHomepageConfigList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SNewHomepageConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BNotice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SHomepageNewUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CHomepageNewUserProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SHomepageNewUserProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CHomepageNewUserEventReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SHomepageNewUserEventReward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SNewUserRewardConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_BNewUserRewardConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_CNewUserRewardFinish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pb::_SNewUserRewardFinish_default_instance_),
};

const char descriptor_table_protodef_homepage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016homepage.proto\022\002pb\032\014vector.proto\"+\n\023CH"
  "omepageConfigList\022\024\n\014locationKeys\030\001 \003(\t\""
  ">\n\023SHomepageConfigList\022\'\n\nconfigList\030\001 \003"
  "(\0132\023.pb.SHomepageConfig\"\236\002\n\017SHomepageCon"
  "fig\022\020\n\010location\030\001 \001(\005\022\r\n\005title\030\002 \001(\t\022\016\n\006"
  "weight\030\003 \001(\005\022\r\n\005media\030\004 \001(\t\022\021\n\tmediaType"
  "\030\005 \001(\005\022\021\n\tperformer\030\006 \001(\t\022\020\n\010linkType\030\007 "
  "\001(\005\022\014\n\004link\030\010 \001(\t\022\026\n\016validStartTime\030\t \001("
  "\005\022\024\n\014validEndTime\030\n \001(\005\022\016\n\006status\030\014 \001(\005\022"
  "\037\n\nnoticeList\030\r \003(\0132\013.pb.BNotice\022\021\n\thous"
  "eType\030\016 \001(\005\022\023\n\013locationKey\030\017 \001(\t\".\n\026CNew"
  "HomepageConfigList\022\024\n\014locationKeys\030\001 \003(\t"
  "\"D\n\026SNewHomepageConfigList\022*\n\nconfigList"
  "\030\001 \003(\0132\026.pb.SNewHomepageConfig\"F\n\022SNewHo"
  "mepageConfig\022\013\n\003key\030\001 \001(\t\022\023\n\013configValue"
  "\030\002 \001(\t\022\016\n\006weight\030\003 \001(\005\")\n\007BNotice\022\017\n\007con"
  "tent\030\001 \001(\t\022\r\n\005speed\030\002 \001(\005\"\254\002\n\020SHomepageN"
  "ewUser\022%\n\013positionOne\030\001 \001(\0132\020.vector.PVe"
  "ctor3\022%\n\013positionTwo\030\002 \001(\0132\020.vector.PVec"
  "tor3\022\'\n\rpositionThree\030\003 \001(\0132\020.vector.PVe"
  "ctor3\022\030\n\020positionOneImage\030\004 \001(\t\022\025\n\revent"
  "OneScope\030\005 \001(\005\022\022\n\neventOneId\030\006 \001(\005\022\025\n\rev"
  "entTwoScope\030\007 \001(\005\022\022\n\neventTwoId\030\010 \001(\005\022\024\n"
  "\014userProgress\030\t \001(\005\022\033\n\023eventOneRewardSta"
  "te\030\n \001(\005\",\n\030CHomepageNewUserProgress\022\020\n\010"
  "progress\030\001 \001(\005\")\n\030SHomepageNewUserProgre"
  "ss\022\r\n\005state\030\001 \001(\005\".\n\033CHomepageNewUserEve"
  "ntReward\022\017\n\007eventId\030\001 \001(\005\",\n\033SHomepageNe"
  "wUserEventReward\022\r\n\005state\030\001 \001(\005\"D\n\024SNewU"
  "serRewardConfig\022,\n\nconfigList\030\001 \003(\0132\030.pb"
  ".BNewUserRewardConfig\"1\n\024BNewUserRewardC"
  "onfig\022\n\n\002id\030\001 \001(\005\022\r\n\005state\030\002 \001(\005\"5\n\024CNew"
  "UserRewardFinish\022\n\n\002id\030\001 \001(\005\022\021\n\tprofitUi"
  "d\030\002 \001(\005\"W\n\024SNewUserRewardFinish\022\r\n\005state"
  "\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\021\n\tprofitUid\030\003 \001(\005\022\021\n"
  "\treportUid\030\004 \001(\005B-\n\030com.dayou.space.prot"
  "obufB\010HomepageZ\002./\252\002\002Pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_homepage_2eproto_deps[1] = {
  &::descriptor_table_vector_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_homepage_2eproto_sccs[16] = {
  &scc_info_BNewUserRewardConfig_homepage_2eproto.base,
  &scc_info_BNotice_homepage_2eproto.base,
  &scc_info_CHomepageConfigList_homepage_2eproto.base,
  &scc_info_CHomepageNewUserEventReward_homepage_2eproto.base,
  &scc_info_CHomepageNewUserProgress_homepage_2eproto.base,
  &scc_info_CNewHomepageConfigList_homepage_2eproto.base,
  &scc_info_CNewUserRewardFinish_homepage_2eproto.base,
  &scc_info_SHomepageConfig_homepage_2eproto.base,
  &scc_info_SHomepageConfigList_homepage_2eproto.base,
  &scc_info_SHomepageNewUser_homepage_2eproto.base,
  &scc_info_SHomepageNewUserEventReward_homepage_2eproto.base,
  &scc_info_SHomepageNewUserProgress_homepage_2eproto.base,
  &scc_info_SNewHomepageConfig_homepage_2eproto.base,
  &scc_info_SNewHomepageConfigList_homepage_2eproto.base,
  &scc_info_SNewUserRewardConfig_homepage_2eproto.base,
  &scc_info_SNewUserRewardFinish_homepage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_homepage_2eproto_once;
static bool descriptor_table_homepage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_homepage_2eproto = {
  &descriptor_table_homepage_2eproto_initialized, descriptor_table_protodef_homepage_2eproto, "homepage.proto", 1471,
  &descriptor_table_homepage_2eproto_once, descriptor_table_homepage_2eproto_sccs, descriptor_table_homepage_2eproto_deps, 16, 1,
  schemas, file_default_instances, TableStruct_homepage_2eproto::offsets,
  file_level_metadata_homepage_2eproto, 16, file_level_enum_descriptors_homepage_2eproto, file_level_service_descriptors_homepage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_homepage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_homepage_2eproto), true);
namespace pb {

// ===================================================================

void CHomepageConfigList::InitAsDefaultInstance() {
}
class CHomepageConfigList::_Internal {
 public:
};

CHomepageConfigList::CHomepageConfigList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CHomepageConfigList)
}
CHomepageConfigList::CHomepageConfigList(const CHomepageConfigList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      locationkeys_(from.locationkeys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CHomepageConfigList)
}

void CHomepageConfigList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CHomepageConfigList_homepage_2eproto.base);
}

CHomepageConfigList::~CHomepageConfigList() {
  // @@protoc_insertion_point(destructor:pb.CHomepageConfigList)
  SharedDtor();
}

void CHomepageConfigList::SharedDtor() {
}

void CHomepageConfigList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHomepageConfigList& CHomepageConfigList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHomepageConfigList_homepage_2eproto.base);
  return *internal_default_instance();
}


void CHomepageConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CHomepageConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locationkeys_.Clear();
  _internal_metadata_.Clear();
}

const char* CHomepageConfigList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string locationKeys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_locationkeys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.CHomepageConfigList.locationKeys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHomepageConfigList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CHomepageConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string locationKeys = 1;
  for (int i = 0, n = this->_internal_locationkeys_size(); i < n; i++) {
    const auto& s = this->_internal_locationkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.CHomepageConfigList.locationKeys");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CHomepageConfigList)
  return target;
}

size_t CHomepageConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CHomepageConfigList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string locationKeys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(locationkeys_.size());
  for (int i = 0, n = locationkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      locationkeys_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHomepageConfigList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CHomepageConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  const CHomepageConfigList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHomepageConfigList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CHomepageConfigList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CHomepageConfigList)
    MergeFrom(*source);
  }
}

void CHomepageConfigList::MergeFrom(const CHomepageConfigList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CHomepageConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locationkeys_.MergeFrom(from.locationkeys_);
}

void CHomepageConfigList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CHomepageConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHomepageConfigList::CopyFrom(const CHomepageConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CHomepageConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHomepageConfigList::IsInitialized() const {
  return true;
}

void CHomepageConfigList::InternalSwap(CHomepageConfigList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  locationkeys_.InternalSwap(&other->locationkeys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHomepageConfigList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHomepageConfigList::InitAsDefaultInstance() {
}
class SHomepageConfigList::_Internal {
 public:
};

SHomepageConfigList::SHomepageConfigList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SHomepageConfigList)
}
SHomepageConfigList::SHomepageConfigList(const SHomepageConfigList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      configlist_(from.configlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.SHomepageConfigList)
}

void SHomepageConfigList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SHomepageConfigList_homepage_2eproto.base);
}

SHomepageConfigList::~SHomepageConfigList() {
  // @@protoc_insertion_point(destructor:pb.SHomepageConfigList)
  SharedDtor();
}

void SHomepageConfigList::SharedDtor() {
}

void SHomepageConfigList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHomepageConfigList& SHomepageConfigList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHomepageConfigList_homepage_2eproto.base);
  return *internal_default_instance();
}


void SHomepageConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SHomepageConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configlist_.Clear();
  _internal_metadata_.Clear();
}

const char* SHomepageConfigList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.SHomepageConfig configList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHomepageConfigList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SHomepageConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.SHomepageConfig configList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_configlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SHomepageConfigList)
  return target;
}

size_t SHomepageConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SHomepageConfigList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.SHomepageConfig configList = 1;
  total_size += 1UL * this->_internal_configlist_size();
  for (const auto& msg : this->configlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHomepageConfigList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SHomepageConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  const SHomepageConfigList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHomepageConfigList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SHomepageConfigList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SHomepageConfigList)
    MergeFrom(*source);
  }
}

void SHomepageConfigList::MergeFrom(const SHomepageConfigList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SHomepageConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configlist_.MergeFrom(from.configlist_);
}

void SHomepageConfigList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SHomepageConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHomepageConfigList::CopyFrom(const SHomepageConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SHomepageConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHomepageConfigList::IsInitialized() const {
  return true;
}

void SHomepageConfigList::InternalSwap(SHomepageConfigList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  configlist_.InternalSwap(&other->configlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHomepageConfigList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHomepageConfig::InitAsDefaultInstance() {
}
class SHomepageConfig::_Internal {
 public:
};

SHomepageConfig::SHomepageConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SHomepageConfig)
}
SHomepageConfig::SHomepageConfig(const SHomepageConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      noticelist_(from.noticelist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  media_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_media().empty()) {
    media_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.media_);
  }
  performer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_performer().empty()) {
    performer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.performer_);
  }
  link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_link().empty()) {
    link_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
  locationkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_locationkey().empty()) {
    locationkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locationkey_);
  }
  ::memcpy(&location_, &from.location_,
    static_cast<size_t>(reinterpret_cast<char*>(&housetype_) -
    reinterpret_cast<char*>(&location_)) + sizeof(housetype_));
  // @@protoc_insertion_point(copy_constructor:pb.SHomepageConfig)
}

void SHomepageConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SHomepageConfig_homepage_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  performer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locationkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&housetype_) -
      reinterpret_cast<char*>(&location_)) + sizeof(housetype_));
}

SHomepageConfig::~SHomepageConfig() {
  // @@protoc_insertion_point(destructor:pb.SHomepageConfig)
  SharedDtor();
}

void SHomepageConfig::SharedDtor() {
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  performer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locationkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SHomepageConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHomepageConfig& SHomepageConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHomepageConfig_homepage_2eproto.base);
  return *internal_default_instance();
}


void SHomepageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SHomepageConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  noticelist_.Clear();
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  performer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locationkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&housetype_) -
      reinterpret_cast<char*>(&location_)) + sizeof(housetype_));
  _internal_metadata_.Clear();
}

const char* SHomepageConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SHomepageConfig.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string media = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_media();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SHomepageConfig.media"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mediaType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mediatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string performer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_performer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SHomepageConfig.performer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 linkType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          linktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string link = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SHomepageConfig.link"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 validStartTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          validstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 validEndTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          validendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pb.BNotice noticeList = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_noticelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 houseType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          housetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string locationKey = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_locationkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SHomepageConfig.locationKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHomepageConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SHomepageConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 location = 1;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_location(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SHomepageConfig.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // int32 weight = 3;
  if (this->weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_weight(), target);
  }

  // string media = 4;
  if (this->media().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media().data(), static_cast<int>(this->_internal_media().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SHomepageConfig.media");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_media(), target);
  }

  // int32 mediaType = 5;
  if (this->mediatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mediatype(), target);
  }

  // string performer = 6;
  if (this->performer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_performer().data(), static_cast<int>(this->_internal_performer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SHomepageConfig.performer");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_performer(), target);
  }

  // int32 linkType = 7;
  if (this->linktype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_linktype(), target);
  }

  // string link = 8;
  if (this->link().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link().data(), static_cast<int>(this->_internal_link().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SHomepageConfig.link");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_link(), target);
  }

  // int32 validStartTime = 9;
  if (this->validstarttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_validstarttime(), target);
  }

  // int32 validEndTime = 10;
  if (this->validendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_validendtime(), target);
  }

  // int32 status = 12;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_status(), target);
  }

  // repeated .pb.BNotice noticeList = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_noticelist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_noticelist(i), target, stream);
  }

  // int32 houseType = 14;
  if (this->housetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_housetype(), target);
  }

  // string locationKey = 15;
  if (this->locationkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_locationkey().data(), static_cast<int>(this->_internal_locationkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SHomepageConfig.locationKey");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_locationkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SHomepageConfig)
  return target;
}

size_t SHomepageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SHomepageConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.BNotice noticeList = 13;
  total_size += 1UL * this->_internal_noticelist_size();
  for (const auto& msg : this->noticelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string media = 4;
  if (this->media().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media());
  }

  // string performer = 6;
  if (this->performer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_performer());
  }

  // string link = 8;
  if (this->link().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link());
  }

  // string locationKey = 15;
  if (this->locationkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locationkey());
  }

  // int32 location = 1;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_location());
  }

  // int32 weight = 3;
  if (this->weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weight());
  }

  // int32 mediaType = 5;
  if (this->mediatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mediatype());
  }

  // int32 linkType = 7;
  if (this->linktype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_linktype());
  }

  // int32 validStartTime = 9;
  if (this->validstarttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_validstarttime());
  }

  // int32 validEndTime = 10;
  if (this->validendtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_validendtime());
  }

  // int32 status = 12;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 houseType = 14;
  if (this->housetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_housetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHomepageConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SHomepageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SHomepageConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHomepageConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SHomepageConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SHomepageConfig)
    MergeFrom(*source);
  }
}

void SHomepageConfig::MergeFrom(const SHomepageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SHomepageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  noticelist_.MergeFrom(from.noticelist_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.media().size() > 0) {

    media_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.media_);
  }
  if (from.performer().size() > 0) {

    performer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.performer_);
  }
  if (from.link().size() > 0) {

    link_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
  if (from.locationkey().size() > 0) {

    locationkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locationkey_);
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
  if (from.weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  if (from.mediatype() != 0) {
    _internal_set_mediatype(from._internal_mediatype());
  }
  if (from.linktype() != 0) {
    _internal_set_linktype(from._internal_linktype());
  }
  if (from.validstarttime() != 0) {
    _internal_set_validstarttime(from._internal_validstarttime());
  }
  if (from.validendtime() != 0) {
    _internal_set_validendtime(from._internal_validendtime());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.housetype() != 0) {
    _internal_set_housetype(from._internal_housetype());
  }
}

void SHomepageConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SHomepageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHomepageConfig::CopyFrom(const SHomepageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SHomepageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHomepageConfig::IsInitialized() const {
  return true;
}

void SHomepageConfig::InternalSwap(SHomepageConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  noticelist_.InternalSwap(&other->noticelist_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  media_.Swap(&other->media_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  performer_.Swap(&other->performer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  link_.Swap(&other->link_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locationkey_.Swap(&other->locationkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_, other->location_);
  swap(weight_, other->weight_);
  swap(mediatype_, other->mediatype_);
  swap(linktype_, other->linktype_);
  swap(validstarttime_, other->validstarttime_);
  swap(validendtime_, other->validendtime_);
  swap(status_, other->status_);
  swap(housetype_, other->housetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHomepageConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CNewHomepageConfigList::InitAsDefaultInstance() {
}
class CNewHomepageConfigList::_Internal {
 public:
};

CNewHomepageConfigList::CNewHomepageConfigList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CNewHomepageConfigList)
}
CNewHomepageConfigList::CNewHomepageConfigList(const CNewHomepageConfigList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      locationkeys_(from.locationkeys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.CNewHomepageConfigList)
}

void CNewHomepageConfigList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CNewHomepageConfigList_homepage_2eproto.base);
}

CNewHomepageConfigList::~CNewHomepageConfigList() {
  // @@protoc_insertion_point(destructor:pb.CNewHomepageConfigList)
  SharedDtor();
}

void CNewHomepageConfigList::SharedDtor() {
}

void CNewHomepageConfigList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CNewHomepageConfigList& CNewHomepageConfigList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CNewHomepageConfigList_homepage_2eproto.base);
  return *internal_default_instance();
}


void CNewHomepageConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CNewHomepageConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locationkeys_.Clear();
  _internal_metadata_.Clear();
}

const char* CNewHomepageConfigList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string locationKeys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_locationkeys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.CNewHomepageConfigList.locationKeys"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNewHomepageConfigList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CNewHomepageConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string locationKeys = 1;
  for (int i = 0, n = this->_internal_locationkeys_size(); i < n; i++) {
    const auto& s = this->_internal_locationkeys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.CNewHomepageConfigList.locationKeys");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CNewHomepageConfigList)
  return target;
}

size_t CNewHomepageConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CNewHomepageConfigList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string locationKeys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(locationkeys_.size());
  for (int i = 0, n = locationkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      locationkeys_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNewHomepageConfigList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CNewHomepageConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  const CNewHomepageConfigList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNewHomepageConfigList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CNewHomepageConfigList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CNewHomepageConfigList)
    MergeFrom(*source);
  }
}

void CNewHomepageConfigList::MergeFrom(const CNewHomepageConfigList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CNewHomepageConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locationkeys_.MergeFrom(from.locationkeys_);
}

void CNewHomepageConfigList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CNewHomepageConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNewHomepageConfigList::CopyFrom(const CNewHomepageConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CNewHomepageConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNewHomepageConfigList::IsInitialized() const {
  return true;
}

void CNewHomepageConfigList::InternalSwap(CNewHomepageConfigList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  locationkeys_.InternalSwap(&other->locationkeys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNewHomepageConfigList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNewHomepageConfigList::InitAsDefaultInstance() {
}
class SNewHomepageConfigList::_Internal {
 public:
};

SNewHomepageConfigList::SNewHomepageConfigList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SNewHomepageConfigList)
}
SNewHomepageConfigList::SNewHomepageConfigList(const SNewHomepageConfigList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      configlist_(from.configlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.SNewHomepageConfigList)
}

void SNewHomepageConfigList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SNewHomepageConfigList_homepage_2eproto.base);
}

SNewHomepageConfigList::~SNewHomepageConfigList() {
  // @@protoc_insertion_point(destructor:pb.SNewHomepageConfigList)
  SharedDtor();
}

void SNewHomepageConfigList::SharedDtor() {
}

void SNewHomepageConfigList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNewHomepageConfigList& SNewHomepageConfigList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNewHomepageConfigList_homepage_2eproto.base);
  return *internal_default_instance();
}


void SNewHomepageConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SNewHomepageConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configlist_.Clear();
  _internal_metadata_.Clear();
}

const char* SNewHomepageConfigList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.SNewHomepageConfig configList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNewHomepageConfigList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SNewHomepageConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.SNewHomepageConfig configList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_configlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SNewHomepageConfigList)
  return target;
}

size_t SNewHomepageConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SNewHomepageConfigList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.SNewHomepageConfig configList = 1;
  total_size += 1UL * this->_internal_configlist_size();
  for (const auto& msg : this->configlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNewHomepageConfigList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SNewHomepageConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  const SNewHomepageConfigList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNewHomepageConfigList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SNewHomepageConfigList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SNewHomepageConfigList)
    MergeFrom(*source);
  }
}

void SNewHomepageConfigList::MergeFrom(const SNewHomepageConfigList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SNewHomepageConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configlist_.MergeFrom(from.configlist_);
}

void SNewHomepageConfigList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SNewHomepageConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNewHomepageConfigList::CopyFrom(const SNewHomepageConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SNewHomepageConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNewHomepageConfigList::IsInitialized() const {
  return true;
}

void SNewHomepageConfigList::InternalSwap(SNewHomepageConfigList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  configlist_.InternalSwap(&other->configlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNewHomepageConfigList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNewHomepageConfig::InitAsDefaultInstance() {
}
class SNewHomepageConfig::_Internal {
 public:
};

SNewHomepageConfig::SNewHomepageConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SNewHomepageConfig)
}
SNewHomepageConfig::SNewHomepageConfig(const SNewHomepageConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  configvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_configvalue().empty()) {
    configvalue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configvalue_);
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:pb.SNewHomepageConfig)
}

void SNewHomepageConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SNewHomepageConfig_homepage_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weight_ = 0;
}

SNewHomepageConfig::~SNewHomepageConfig() {
  // @@protoc_insertion_point(destructor:pb.SNewHomepageConfig)
  SharedDtor();
}

void SNewHomepageConfig::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SNewHomepageConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNewHomepageConfig& SNewHomepageConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNewHomepageConfig_homepage_2eproto.base);
  return *internal_default_instance();
}


void SNewHomepageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SNewHomepageConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configvalue_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weight_ = 0;
  _internal_metadata_.Clear();
}

const char* SNewHomepageConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SNewHomepageConfig.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string configValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_configvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SNewHomepageConfig.configValue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNewHomepageConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SNewHomepageConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SNewHomepageConfig.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string configValue = 2;
  if (this->configvalue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configvalue().data(), static_cast<int>(this->_internal_configvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SNewHomepageConfig.configValue");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_configvalue(), target);
  }

  // int32 weight = 3;
  if (this->weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SNewHomepageConfig)
  return target;
}

size_t SNewHomepageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SNewHomepageConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string configValue = 2;
  if (this->configvalue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configvalue());
  }

  // int32 weight = 3;
  if (this->weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNewHomepageConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SNewHomepageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SNewHomepageConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNewHomepageConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SNewHomepageConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SNewHomepageConfig)
    MergeFrom(*source);
  }
}

void SNewHomepageConfig::MergeFrom(const SNewHomepageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SNewHomepageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.configvalue().size() > 0) {

    configvalue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configvalue_);
  }
  if (from.weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
}

void SNewHomepageConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SNewHomepageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNewHomepageConfig::CopyFrom(const SNewHomepageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SNewHomepageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNewHomepageConfig::IsInitialized() const {
  return true;
}

void SNewHomepageConfig::InternalSwap(SNewHomepageConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  configvalue_.Swap(&other->configvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNewHomepageConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BNotice::InitAsDefaultInstance() {
}
class BNotice::_Internal {
 public:
};

BNotice::BNotice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BNotice)
}
BNotice::BNotice(const BNotice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  speed_ = from.speed_;
  // @@protoc_insertion_point(copy_constructor:pb.BNotice)
}

void BNotice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BNotice_homepage_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  speed_ = 0;
}

BNotice::~BNotice() {
  // @@protoc_insertion_point(destructor:pb.BNotice)
  SharedDtor();
}

void BNotice::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BNotice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BNotice& BNotice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BNotice_homepage_2eproto.base);
  return *internal_default_instance();
}


void BNotice::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BNotice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  speed_ = 0;
  _internal_metadata_.Clear();
}

const char* BNotice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.BNotice.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BNotice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BNotice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.BNotice.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  // int32 speed = 2;
  if (this->speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BNotice)
  return target;
}

size_t BNotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BNotice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int32 speed = 2;
  if (this->speed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_speed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BNotice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BNotice)
  GOOGLE_DCHECK_NE(&from, this);
  const BNotice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BNotice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BNotice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BNotice)
    MergeFrom(*source);
  }
}

void BNotice::MergeFrom(const BNotice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BNotice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.speed() != 0) {
    _internal_set_speed(from._internal_speed());
  }
}

void BNotice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BNotice::CopyFrom(const BNotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BNotice::IsInitialized() const {
  return true;
}

void BNotice::InternalSwap(BNotice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BNotice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHomepageNewUser::InitAsDefaultInstance() {
  ::pb::_SHomepageNewUser_default_instance_._instance.get_mutable()->positionone_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
  ::pb::_SHomepageNewUser_default_instance_._instance.get_mutable()->positiontwo_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
  ::pb::_SHomepageNewUser_default_instance_._instance.get_mutable()->positionthree_ = const_cast< ::vector::PVector3*>(
      ::vector::PVector3::internal_default_instance());
}
class SHomepageNewUser::_Internal {
 public:
  static const ::vector::PVector3& positionone(const SHomepageNewUser* msg);
  static const ::vector::PVector3& positiontwo(const SHomepageNewUser* msg);
  static const ::vector::PVector3& positionthree(const SHomepageNewUser* msg);
};

const ::vector::PVector3&
SHomepageNewUser::_Internal::positionone(const SHomepageNewUser* msg) {
  return *msg->positionone_;
}
const ::vector::PVector3&
SHomepageNewUser::_Internal::positiontwo(const SHomepageNewUser* msg) {
  return *msg->positiontwo_;
}
const ::vector::PVector3&
SHomepageNewUser::_Internal::positionthree(const SHomepageNewUser* msg) {
  return *msg->positionthree_;
}
void SHomepageNewUser::clear_positionone() {
  if (GetArenaNoVirtual() == nullptr && positionone_ != nullptr) {
    delete positionone_;
  }
  positionone_ = nullptr;
}
void SHomepageNewUser::clear_positiontwo() {
  if (GetArenaNoVirtual() == nullptr && positiontwo_ != nullptr) {
    delete positiontwo_;
  }
  positiontwo_ = nullptr;
}
void SHomepageNewUser::clear_positionthree() {
  if (GetArenaNoVirtual() == nullptr && positionthree_ != nullptr) {
    delete positionthree_;
  }
  positionthree_ = nullptr;
}
SHomepageNewUser::SHomepageNewUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SHomepageNewUser)
}
SHomepageNewUser::SHomepageNewUser(const SHomepageNewUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  positiononeimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_positiononeimage().empty()) {
    positiononeimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.positiononeimage_);
  }
  if (from._internal_has_positionone()) {
    positionone_ = new ::vector::PVector3(*from.positionone_);
  } else {
    positionone_ = nullptr;
  }
  if (from._internal_has_positiontwo()) {
    positiontwo_ = new ::vector::PVector3(*from.positiontwo_);
  } else {
    positiontwo_ = nullptr;
  }
  if (from._internal_has_positionthree()) {
    positionthree_ = new ::vector::PVector3(*from.positionthree_);
  } else {
    positionthree_ = nullptr;
  }
  ::memcpy(&eventonescope_, &from.eventonescope_,
    static_cast<size_t>(reinterpret_cast<char*>(&eventonerewardstate_) -
    reinterpret_cast<char*>(&eventonescope_)) + sizeof(eventonerewardstate_));
  // @@protoc_insertion_point(copy_constructor:pb.SHomepageNewUser)
}

void SHomepageNewUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SHomepageNewUser_homepage_2eproto.base);
  positiononeimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&positionone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventonerewardstate_) -
      reinterpret_cast<char*>(&positionone_)) + sizeof(eventonerewardstate_));
}

SHomepageNewUser::~SHomepageNewUser() {
  // @@protoc_insertion_point(destructor:pb.SHomepageNewUser)
  SharedDtor();
}

void SHomepageNewUser::SharedDtor() {
  positiononeimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete positionone_;
  if (this != internal_default_instance()) delete positiontwo_;
  if (this != internal_default_instance()) delete positionthree_;
}

void SHomepageNewUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHomepageNewUser& SHomepageNewUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHomepageNewUser_homepage_2eproto.base);
  return *internal_default_instance();
}


void SHomepageNewUser::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SHomepageNewUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positiononeimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && positionone_ != nullptr) {
    delete positionone_;
  }
  positionone_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && positiontwo_ != nullptr) {
    delete positiontwo_;
  }
  positiontwo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && positionthree_ != nullptr) {
    delete positionthree_;
  }
  positionthree_ = nullptr;
  ::memset(&eventonescope_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventonerewardstate_) -
      reinterpret_cast<char*>(&eventonescope_)) + sizeof(eventonerewardstate_));
  _internal_metadata_.Clear();
}

const char* SHomepageNewUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vector.PVector3 positionOne = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 positionTwo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_positiontwo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vector.PVector3 positionThree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionthree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string positionOneImage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_positiononeimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pb.SHomepageNewUser.positionOneImage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 eventOneScope = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          eventonescope_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 eventOneId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          eventoneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 eventTwoScope = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          eventtwoscope_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 eventTwoId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          eventtwoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 userProgress = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          userprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 eventOneRewardState = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          eventonerewardstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHomepageNewUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SHomepageNewUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vector.PVector3 positionOne = 1;
  if (this->has_positionone()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::positionone(this), target, stream);
  }

  // .vector.PVector3 positionTwo = 2;
  if (this->has_positiontwo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::positiontwo(this), target, stream);
  }

  // .vector.PVector3 positionThree = 3;
  if (this->has_positionthree()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::positionthree(this), target, stream);
  }

  // string positionOneImage = 4;
  if (this->positiononeimage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_positiononeimage().data(), static_cast<int>(this->_internal_positiononeimage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pb.SHomepageNewUser.positionOneImage");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_positiononeimage(), target);
  }

  // int32 eventOneScope = 5;
  if (this->eventonescope() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_eventonescope(), target);
  }

  // int32 eventOneId = 6;
  if (this->eventoneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_eventoneid(), target);
  }

  // int32 eventTwoScope = 7;
  if (this->eventtwoscope() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_eventtwoscope(), target);
  }

  // int32 eventTwoId = 8;
  if (this->eventtwoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_eventtwoid(), target);
  }

  // int32 userProgress = 9;
  if (this->userprogress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_userprogress(), target);
  }

  // int32 eventOneRewardState = 10;
  if (this->eventonerewardstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_eventonerewardstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SHomepageNewUser)
  return target;
}

size_t SHomepageNewUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SHomepageNewUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string positionOneImage = 4;
  if (this->positiononeimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_positiononeimage());
  }

  // .vector.PVector3 positionOne = 1;
  if (this->has_positionone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionone_);
  }

  // .vector.PVector3 positionTwo = 2;
  if (this->has_positiontwo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positiontwo_);
  }

  // .vector.PVector3 positionThree = 3;
  if (this->has_positionthree()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionthree_);
  }

  // int32 eventOneScope = 5;
  if (this->eventonescope() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eventonescope());
  }

  // int32 eventOneId = 6;
  if (this->eventoneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eventoneid());
  }

  // int32 eventTwoScope = 7;
  if (this->eventtwoscope() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eventtwoscope());
  }

  // int32 eventTwoId = 8;
  if (this->eventtwoid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eventtwoid());
  }

  // int32 userProgress = 9;
  if (this->userprogress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userprogress());
  }

  // int32 eventOneRewardState = 10;
  if (this->eventonerewardstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eventonerewardstate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHomepageNewUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SHomepageNewUser)
  GOOGLE_DCHECK_NE(&from, this);
  const SHomepageNewUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHomepageNewUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SHomepageNewUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SHomepageNewUser)
    MergeFrom(*source);
  }
}

void SHomepageNewUser::MergeFrom(const SHomepageNewUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SHomepageNewUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.positiononeimage().size() > 0) {

    positiononeimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.positiononeimage_);
  }
  if (from.has_positionone()) {
    _internal_mutable_positionone()->::vector::PVector3::MergeFrom(from._internal_positionone());
  }
  if (from.has_positiontwo()) {
    _internal_mutable_positiontwo()->::vector::PVector3::MergeFrom(from._internal_positiontwo());
  }
  if (from.has_positionthree()) {
    _internal_mutable_positionthree()->::vector::PVector3::MergeFrom(from._internal_positionthree());
  }
  if (from.eventonescope() != 0) {
    _internal_set_eventonescope(from._internal_eventonescope());
  }
  if (from.eventoneid() != 0) {
    _internal_set_eventoneid(from._internal_eventoneid());
  }
  if (from.eventtwoscope() != 0) {
    _internal_set_eventtwoscope(from._internal_eventtwoscope());
  }
  if (from.eventtwoid() != 0) {
    _internal_set_eventtwoid(from._internal_eventtwoid());
  }
  if (from.userprogress() != 0) {
    _internal_set_userprogress(from._internal_userprogress());
  }
  if (from.eventonerewardstate() != 0) {
    _internal_set_eventonerewardstate(from._internal_eventonerewardstate());
  }
}

void SHomepageNewUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SHomepageNewUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHomepageNewUser::CopyFrom(const SHomepageNewUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SHomepageNewUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHomepageNewUser::IsInitialized() const {
  return true;
}

void SHomepageNewUser::InternalSwap(SHomepageNewUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  positiononeimage_.Swap(&other->positiononeimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(positionone_, other->positionone_);
  swap(positiontwo_, other->positiontwo_);
  swap(positionthree_, other->positionthree_);
  swap(eventonescope_, other->eventonescope_);
  swap(eventoneid_, other->eventoneid_);
  swap(eventtwoscope_, other->eventtwoscope_);
  swap(eventtwoid_, other->eventtwoid_);
  swap(userprogress_, other->userprogress_);
  swap(eventonerewardstate_, other->eventonerewardstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHomepageNewUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHomepageNewUserProgress::InitAsDefaultInstance() {
}
class CHomepageNewUserProgress::_Internal {
 public:
};

CHomepageNewUserProgress::CHomepageNewUserProgress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CHomepageNewUserProgress)
}
CHomepageNewUserProgress::CHomepageNewUserProgress(const CHomepageNewUserProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:pb.CHomepageNewUserProgress)
}

void CHomepageNewUserProgress::SharedCtor() {
  progress_ = 0;
}

CHomepageNewUserProgress::~CHomepageNewUserProgress() {
  // @@protoc_insertion_point(destructor:pb.CHomepageNewUserProgress)
  SharedDtor();
}

void CHomepageNewUserProgress::SharedDtor() {
}

void CHomepageNewUserProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHomepageNewUserProgress& CHomepageNewUserProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHomepageNewUserProgress_homepage_2eproto.base);
  return *internal_default_instance();
}


void CHomepageNewUserProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CHomepageNewUserProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  progress_ = 0;
  _internal_metadata_.Clear();
}

const char* CHomepageNewUserProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHomepageNewUserProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CHomepageNewUserProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 progress = 1;
  if (this->progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CHomepageNewUserProgress)
  return target;
}

size_t CHomepageNewUserProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CHomepageNewUserProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 progress = 1;
  if (this->progress() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_progress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHomepageNewUserProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CHomepageNewUserProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CHomepageNewUserProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHomepageNewUserProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CHomepageNewUserProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CHomepageNewUserProgress)
    MergeFrom(*source);
  }
}

void CHomepageNewUserProgress::MergeFrom(const CHomepageNewUserProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CHomepageNewUserProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.progress() != 0) {
    _internal_set_progress(from._internal_progress());
  }
}

void CHomepageNewUserProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CHomepageNewUserProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHomepageNewUserProgress::CopyFrom(const CHomepageNewUserProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CHomepageNewUserProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHomepageNewUserProgress::IsInitialized() const {
  return true;
}

void CHomepageNewUserProgress::InternalSwap(CHomepageNewUserProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHomepageNewUserProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHomepageNewUserProgress::InitAsDefaultInstance() {
}
class SHomepageNewUserProgress::_Internal {
 public:
};

SHomepageNewUserProgress::SHomepageNewUserProgress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SHomepageNewUserProgress)
}
SHomepageNewUserProgress::SHomepageNewUserProgress(const SHomepageNewUserProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:pb.SHomepageNewUserProgress)
}

void SHomepageNewUserProgress::SharedCtor() {
  state_ = 0;
}

SHomepageNewUserProgress::~SHomepageNewUserProgress() {
  // @@protoc_insertion_point(destructor:pb.SHomepageNewUserProgress)
  SharedDtor();
}

void SHomepageNewUserProgress::SharedDtor() {
}

void SHomepageNewUserProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHomepageNewUserProgress& SHomepageNewUserProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHomepageNewUserProgress_homepage_2eproto.base);
  return *internal_default_instance();
}


void SHomepageNewUserProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SHomepageNewUserProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SHomepageNewUserProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHomepageNewUserProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SHomepageNewUserProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SHomepageNewUserProgress)
  return target;
}

size_t SHomepageNewUserProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SHomepageNewUserProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHomepageNewUserProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SHomepageNewUserProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const SHomepageNewUserProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHomepageNewUserProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SHomepageNewUserProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SHomepageNewUserProgress)
    MergeFrom(*source);
  }
}

void SHomepageNewUserProgress::MergeFrom(const SHomepageNewUserProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SHomepageNewUserProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SHomepageNewUserProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SHomepageNewUserProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHomepageNewUserProgress::CopyFrom(const SHomepageNewUserProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SHomepageNewUserProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHomepageNewUserProgress::IsInitialized() const {
  return true;
}

void SHomepageNewUserProgress::InternalSwap(SHomepageNewUserProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHomepageNewUserProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHomepageNewUserEventReward::InitAsDefaultInstance() {
}
class CHomepageNewUserEventReward::_Internal {
 public:
};

CHomepageNewUserEventReward::CHomepageNewUserEventReward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CHomepageNewUserEventReward)
}
CHomepageNewUserEventReward::CHomepageNewUserEventReward(const CHomepageNewUserEventReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:pb.CHomepageNewUserEventReward)
}

void CHomepageNewUserEventReward::SharedCtor() {
  eventid_ = 0;
}

CHomepageNewUserEventReward::~CHomepageNewUserEventReward() {
  // @@protoc_insertion_point(destructor:pb.CHomepageNewUserEventReward)
  SharedDtor();
}

void CHomepageNewUserEventReward::SharedDtor() {
}

void CHomepageNewUserEventReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHomepageNewUserEventReward& CHomepageNewUserEventReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHomepageNewUserEventReward_homepage_2eproto.base);
  return *internal_default_instance();
}


void CHomepageNewUserEventReward::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CHomepageNewUserEventReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventid_ = 0;
  _internal_metadata_.Clear();
}

const char* CHomepageNewUserEventReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 eventId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHomepageNewUserEventReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CHomepageNewUserEventReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 eventId = 1;
  if (this->eventid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eventid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CHomepageNewUserEventReward)
  return target;
}

size_t CHomepageNewUserEventReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CHomepageNewUserEventReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 eventId = 1;
  if (this->eventid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eventid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHomepageNewUserEventReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CHomepageNewUserEventReward)
  GOOGLE_DCHECK_NE(&from, this);
  const CHomepageNewUserEventReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHomepageNewUserEventReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CHomepageNewUserEventReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CHomepageNewUserEventReward)
    MergeFrom(*source);
  }
}

void CHomepageNewUserEventReward::MergeFrom(const CHomepageNewUserEventReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CHomepageNewUserEventReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.eventid() != 0) {
    _internal_set_eventid(from._internal_eventid());
  }
}

void CHomepageNewUserEventReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CHomepageNewUserEventReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHomepageNewUserEventReward::CopyFrom(const CHomepageNewUserEventReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CHomepageNewUserEventReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHomepageNewUserEventReward::IsInitialized() const {
  return true;
}

void CHomepageNewUserEventReward::InternalSwap(CHomepageNewUserEventReward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(eventid_, other->eventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHomepageNewUserEventReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHomepageNewUserEventReward::InitAsDefaultInstance() {
}
class SHomepageNewUserEventReward::_Internal {
 public:
};

SHomepageNewUserEventReward::SHomepageNewUserEventReward()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SHomepageNewUserEventReward)
}
SHomepageNewUserEventReward::SHomepageNewUserEventReward(const SHomepageNewUserEventReward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:pb.SHomepageNewUserEventReward)
}

void SHomepageNewUserEventReward::SharedCtor() {
  state_ = 0;
}

SHomepageNewUserEventReward::~SHomepageNewUserEventReward() {
  // @@protoc_insertion_point(destructor:pb.SHomepageNewUserEventReward)
  SharedDtor();
}

void SHomepageNewUserEventReward::SharedDtor() {
}

void SHomepageNewUserEventReward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHomepageNewUserEventReward& SHomepageNewUserEventReward::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHomepageNewUserEventReward_homepage_2eproto.base);
  return *internal_default_instance();
}


void SHomepageNewUserEventReward::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SHomepageNewUserEventReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SHomepageNewUserEventReward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHomepageNewUserEventReward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SHomepageNewUserEventReward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SHomepageNewUserEventReward)
  return target;
}

size_t SHomepageNewUserEventReward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SHomepageNewUserEventReward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHomepageNewUserEventReward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SHomepageNewUserEventReward)
  GOOGLE_DCHECK_NE(&from, this);
  const SHomepageNewUserEventReward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHomepageNewUserEventReward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SHomepageNewUserEventReward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SHomepageNewUserEventReward)
    MergeFrom(*source);
  }
}

void SHomepageNewUserEventReward::MergeFrom(const SHomepageNewUserEventReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SHomepageNewUserEventReward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SHomepageNewUserEventReward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SHomepageNewUserEventReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHomepageNewUserEventReward::CopyFrom(const SHomepageNewUserEventReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SHomepageNewUserEventReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHomepageNewUserEventReward::IsInitialized() const {
  return true;
}

void SHomepageNewUserEventReward::InternalSwap(SHomepageNewUserEventReward* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHomepageNewUserEventReward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNewUserRewardConfig::InitAsDefaultInstance() {
}
class SNewUserRewardConfig::_Internal {
 public:
};

SNewUserRewardConfig::SNewUserRewardConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SNewUserRewardConfig)
}
SNewUserRewardConfig::SNewUserRewardConfig(const SNewUserRewardConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      configlist_(from.configlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pb.SNewUserRewardConfig)
}

void SNewUserRewardConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SNewUserRewardConfig_homepage_2eproto.base);
}

SNewUserRewardConfig::~SNewUserRewardConfig() {
  // @@protoc_insertion_point(destructor:pb.SNewUserRewardConfig)
  SharedDtor();
}

void SNewUserRewardConfig::SharedDtor() {
}

void SNewUserRewardConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNewUserRewardConfig& SNewUserRewardConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNewUserRewardConfig_homepage_2eproto.base);
  return *internal_default_instance();
}


void SNewUserRewardConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SNewUserRewardConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configlist_.Clear();
  _internal_metadata_.Clear();
}

const char* SNewUserRewardConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .pb.BNewUserRewardConfig configList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNewUserRewardConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SNewUserRewardConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pb.BNewUserRewardConfig configList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_configlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SNewUserRewardConfig)
  return target;
}

size_t SNewUserRewardConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SNewUserRewardConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pb.BNewUserRewardConfig configList = 1;
  total_size += 1UL * this->_internal_configlist_size();
  for (const auto& msg : this->configlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNewUserRewardConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SNewUserRewardConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SNewUserRewardConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNewUserRewardConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SNewUserRewardConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SNewUserRewardConfig)
    MergeFrom(*source);
  }
}

void SNewUserRewardConfig::MergeFrom(const SNewUserRewardConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SNewUserRewardConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configlist_.MergeFrom(from.configlist_);
}

void SNewUserRewardConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SNewUserRewardConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNewUserRewardConfig::CopyFrom(const SNewUserRewardConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SNewUserRewardConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNewUserRewardConfig::IsInitialized() const {
  return true;
}

void SNewUserRewardConfig::InternalSwap(SNewUserRewardConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  configlist_.InternalSwap(&other->configlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNewUserRewardConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BNewUserRewardConfig::InitAsDefaultInstance() {
}
class BNewUserRewardConfig::_Internal {
 public:
};

BNewUserRewardConfig::BNewUserRewardConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BNewUserRewardConfig)
}
BNewUserRewardConfig::BNewUserRewardConfig(const BNewUserRewardConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:pb.BNewUserRewardConfig)
}

void BNewUserRewardConfig::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

BNewUserRewardConfig::~BNewUserRewardConfig() {
  // @@protoc_insertion_point(destructor:pb.BNewUserRewardConfig)
  SharedDtor();
}

void BNewUserRewardConfig::SharedDtor() {
}

void BNewUserRewardConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BNewUserRewardConfig& BNewUserRewardConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BNewUserRewardConfig_homepage_2eproto.base);
  return *internal_default_instance();
}


void BNewUserRewardConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.BNewUserRewardConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

const char* BNewUserRewardConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BNewUserRewardConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BNewUserRewardConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BNewUserRewardConfig)
  return target;
}

size_t BNewUserRewardConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.BNewUserRewardConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BNewUserRewardConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.BNewUserRewardConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BNewUserRewardConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BNewUserRewardConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.BNewUserRewardConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.BNewUserRewardConfig)
    MergeFrom(*source);
  }
}

void BNewUserRewardConfig::MergeFrom(const BNewUserRewardConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.BNewUserRewardConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void BNewUserRewardConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.BNewUserRewardConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BNewUserRewardConfig::CopyFrom(const BNewUserRewardConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.BNewUserRewardConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BNewUserRewardConfig::IsInitialized() const {
  return true;
}

void BNewUserRewardConfig::InternalSwap(BNewUserRewardConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BNewUserRewardConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CNewUserRewardFinish::InitAsDefaultInstance() {
}
class CNewUserRewardFinish::_Internal {
 public:
};

CNewUserRewardFinish::CNewUserRewardFinish()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CNewUserRewardFinish)
}
CNewUserRewardFinish::CNewUserRewardFinish(const CNewUserRewardFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&profituid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(profituid_));
  // @@protoc_insertion_point(copy_constructor:pb.CNewUserRewardFinish)
}

void CNewUserRewardFinish::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&profituid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(profituid_));
}

CNewUserRewardFinish::~CNewUserRewardFinish() {
  // @@protoc_insertion_point(destructor:pb.CNewUserRewardFinish)
  SharedDtor();
}

void CNewUserRewardFinish::SharedDtor() {
}

void CNewUserRewardFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CNewUserRewardFinish& CNewUserRewardFinish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CNewUserRewardFinish_homepage_2eproto.base);
  return *internal_default_instance();
}


void CNewUserRewardFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.CNewUserRewardFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&profituid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(profituid_));
  _internal_metadata_.Clear();
}

const char* CNewUserRewardFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 profitUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          profituid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CNewUserRewardFinish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CNewUserRewardFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 profitUid = 2;
  if (this->profituid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_profituid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CNewUserRewardFinish)
  return target;
}

size_t CNewUserRewardFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.CNewUserRewardFinish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 profitUid = 2;
  if (this->profituid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_profituid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CNewUserRewardFinish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.CNewUserRewardFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const CNewUserRewardFinish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CNewUserRewardFinish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.CNewUserRewardFinish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.CNewUserRewardFinish)
    MergeFrom(*source);
  }
}

void CNewUserRewardFinish::MergeFrom(const CNewUserRewardFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.CNewUserRewardFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.profituid() != 0) {
    _internal_set_profituid(from._internal_profituid());
  }
}

void CNewUserRewardFinish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.CNewUserRewardFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNewUserRewardFinish::CopyFrom(const CNewUserRewardFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.CNewUserRewardFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNewUserRewardFinish::IsInitialized() const {
  return true;
}

void CNewUserRewardFinish::InternalSwap(CNewUserRewardFinish* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(profituid_, other->profituid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CNewUserRewardFinish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SNewUserRewardFinish::InitAsDefaultInstance() {
}
class SNewUserRewardFinish::_Internal {
 public:
};

SNewUserRewardFinish::SNewUserRewardFinish()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SNewUserRewardFinish)
}
SNewUserRewardFinish::SNewUserRewardFinish(const SNewUserRewardFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&reportuid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(reportuid_));
  // @@protoc_insertion_point(copy_constructor:pb.SNewUserRewardFinish)
}

void SNewUserRewardFinish::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reportuid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(reportuid_));
}

SNewUserRewardFinish::~SNewUserRewardFinish() {
  // @@protoc_insertion_point(destructor:pb.SNewUserRewardFinish)
  SharedDtor();
}

void SNewUserRewardFinish::SharedDtor() {
}

void SNewUserRewardFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SNewUserRewardFinish& SNewUserRewardFinish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SNewUserRewardFinish_homepage_2eproto.base);
  return *internal_default_instance();
}


void SNewUserRewardFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:pb.SNewUserRewardFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reportuid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(reportuid_));
  _internal_metadata_.Clear();
}

const char* SNewUserRewardFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 profitUid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          profituid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reportUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reportuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SNewUserRewardFinish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SNewUserRewardFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // int32 profitUid = 3;
  if (this->profituid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_profituid(), target);
  }

  // int32 reportUid = 4;
  if (this->reportuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_reportuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SNewUserRewardFinish)
  return target;
}

size_t SNewUserRewardFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pb.SNewUserRewardFinish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 profitUid = 3;
  if (this->profituid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_profituid());
  }

  // int32 reportUid = 4;
  if (this->reportuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_reportuid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SNewUserRewardFinish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pb.SNewUserRewardFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const SNewUserRewardFinish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SNewUserRewardFinish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pb.SNewUserRewardFinish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pb.SNewUserRewardFinish)
    MergeFrom(*source);
  }
}

void SNewUserRewardFinish::MergeFrom(const SNewUserRewardFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pb.SNewUserRewardFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.profituid() != 0) {
    _internal_set_profituid(from._internal_profituid());
  }
  if (from.reportuid() != 0) {
    _internal_set_reportuid(from._internal_reportuid());
  }
}

void SNewUserRewardFinish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pb.SNewUserRewardFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SNewUserRewardFinish::CopyFrom(const SNewUserRewardFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pb.SNewUserRewardFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SNewUserRewardFinish::IsInitialized() const {
  return true;
}

void SNewUserRewardFinish::InternalSwap(SNewUserRewardFinish* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
  swap(id_, other->id_);
  swap(profituid_, other->profituid_);
  swap(reportuid_, other->reportuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SNewUserRewardFinish::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pb::CHomepageConfigList* Arena::CreateMaybeMessage< ::pb::CHomepageConfigList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CHomepageConfigList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SHomepageConfigList* Arena::CreateMaybeMessage< ::pb::SHomepageConfigList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SHomepageConfigList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SHomepageConfig* Arena::CreateMaybeMessage< ::pb::SHomepageConfig >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SHomepageConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CNewHomepageConfigList* Arena::CreateMaybeMessage< ::pb::CNewHomepageConfigList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CNewHomepageConfigList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SNewHomepageConfigList* Arena::CreateMaybeMessage< ::pb::SNewHomepageConfigList >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SNewHomepageConfigList >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SNewHomepageConfig* Arena::CreateMaybeMessage< ::pb::SNewHomepageConfig >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SNewHomepageConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BNotice* Arena::CreateMaybeMessage< ::pb::BNotice >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BNotice >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SHomepageNewUser* Arena::CreateMaybeMessage< ::pb::SHomepageNewUser >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SHomepageNewUser >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CHomepageNewUserProgress* Arena::CreateMaybeMessage< ::pb::CHomepageNewUserProgress >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CHomepageNewUserProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SHomepageNewUserProgress* Arena::CreateMaybeMessage< ::pb::SHomepageNewUserProgress >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SHomepageNewUserProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CHomepageNewUserEventReward* Arena::CreateMaybeMessage< ::pb::CHomepageNewUserEventReward >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CHomepageNewUserEventReward >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SHomepageNewUserEventReward* Arena::CreateMaybeMessage< ::pb::SHomepageNewUserEventReward >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SHomepageNewUserEventReward >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SNewUserRewardConfig* Arena::CreateMaybeMessage< ::pb::SNewUserRewardConfig >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SNewUserRewardConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::BNewUserRewardConfig* Arena::CreateMaybeMessage< ::pb::BNewUserRewardConfig >(Arena* arena) {
  return Arena::CreateInternal< ::pb::BNewUserRewardConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::CNewUserRewardFinish* Arena::CreateMaybeMessage< ::pb::CNewUserRewardFinish >(Arena* arena) {
  return Arena::CreateInternal< ::pb::CNewUserRewardFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::pb::SNewUserRewardFinish* Arena::CreateMaybeMessage< ::pb::SNewUserRewardFinish >(Arena* arena) {
  return Arena::CreateInternal< ::pb::SNewUserRewardFinish >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
