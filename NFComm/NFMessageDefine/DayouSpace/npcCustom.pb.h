// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: npcCustom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_npcCustom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_npcCustom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_npcCustom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_npcCustom_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_npcCustom_2eproto;
namespace gpt {
class BPromptRecord;
class BPromptRecordDefaultTypeInternal;
extern BPromptRecordDefaultTypeInternal _BPromptRecord_default_instance_;
class CChangePrompt;
class CChangePromptDefaultTypeInternal;
extern CChangePromptDefaultTypeInternal _CChangePrompt_default_instance_;
class CCopyNpc;
class CCopyNpcDefaultTypeInternal;
extern CCopyNpcDefaultTypeInternal _CCopyNpc_default_instance_;
class CNpcCustomChat;
class CNpcCustomChatDefaultTypeInternal;
extern CNpcCustomChatDefaultTypeInternal _CNpcCustomChat_default_instance_;
class CNpcCustomChatStream;
class CNpcCustomChatStreamDefaultTypeInternal;
extern CNpcCustomChatStreamDefaultTypeInternal _CNpcCustomChatStream_default_instance_;
class CPromptHistory;
class CPromptHistoryDefaultTypeInternal;
extern CPromptHistoryDefaultTypeInternal _CPromptHistory_default_instance_;
class CPromptRollback;
class CPromptRollbackDefaultTypeInternal;
extern CPromptRollbackDefaultTypeInternal _CPromptRollback_default_instance_;
class SChangePrompt;
class SChangePromptDefaultTypeInternal;
extern SChangePromptDefaultTypeInternal _SChangePrompt_default_instance_;
class SCopyNpc;
class SCopyNpcDefaultTypeInternal;
extern SCopyNpcDefaultTypeInternal _SCopyNpc_default_instance_;
class SNpcCustomChat;
class SNpcCustomChatDefaultTypeInternal;
extern SNpcCustomChatDefaultTypeInternal _SNpcCustomChat_default_instance_;
class SNpcCustomChatStream;
class SNpcCustomChatStreamDefaultTypeInternal;
extern SNpcCustomChatStreamDefaultTypeInternal _SNpcCustomChatStream_default_instance_;
class SPromptHistory;
class SPromptHistoryDefaultTypeInternal;
extern SPromptHistoryDefaultTypeInternal _SPromptHistory_default_instance_;
class SPromptRollback;
class SPromptRollbackDefaultTypeInternal;
extern SPromptRollbackDefaultTypeInternal _SPromptRollback_default_instance_;
}  // namespace gpt
PROTOBUF_NAMESPACE_OPEN
template<> ::gpt::BPromptRecord* Arena::CreateMaybeMessage<::gpt::BPromptRecord>(Arena*);
template<> ::gpt::CChangePrompt* Arena::CreateMaybeMessage<::gpt::CChangePrompt>(Arena*);
template<> ::gpt::CCopyNpc* Arena::CreateMaybeMessage<::gpt::CCopyNpc>(Arena*);
template<> ::gpt::CNpcCustomChat* Arena::CreateMaybeMessage<::gpt::CNpcCustomChat>(Arena*);
template<> ::gpt::CNpcCustomChatStream* Arena::CreateMaybeMessage<::gpt::CNpcCustomChatStream>(Arena*);
template<> ::gpt::CPromptHistory* Arena::CreateMaybeMessage<::gpt::CPromptHistory>(Arena*);
template<> ::gpt::CPromptRollback* Arena::CreateMaybeMessage<::gpt::CPromptRollback>(Arena*);
template<> ::gpt::SChangePrompt* Arena::CreateMaybeMessage<::gpt::SChangePrompt>(Arena*);
template<> ::gpt::SCopyNpc* Arena::CreateMaybeMessage<::gpt::SCopyNpc>(Arena*);
template<> ::gpt::SNpcCustomChat* Arena::CreateMaybeMessage<::gpt::SNpcCustomChat>(Arena*);
template<> ::gpt::SNpcCustomChatStream* Arena::CreateMaybeMessage<::gpt::SNpcCustomChatStream>(Arena*);
template<> ::gpt::SPromptHistory* Arena::CreateMaybeMessage<::gpt::SPromptHistory>(Arena*);
template<> ::gpt::SPromptRollback* Arena::CreateMaybeMessage<::gpt::SPromptRollback>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gpt {

// ===================================================================

class CCopyNpc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.CCopyNpc) */ {
 public:
  CCopyNpc();
  virtual ~CCopyNpc();

  CCopyNpc(const CCopyNpc& from);
  CCopyNpc(CCopyNpc&& from) noexcept
    : CCopyNpc() {
    *this = ::std::move(from);
  }

  inline CCopyNpc& operator=(const CCopyNpc& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCopyNpc& operator=(CCopyNpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCopyNpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCopyNpc* internal_default_instance() {
    return reinterpret_cast<const CCopyNpc*>(
               &_CCopyNpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCopyNpc& a, CCopyNpc& b) {
    a.Swap(&b);
  }
  inline void Swap(CCopyNpc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCopyNpc* New() const final {
    return CreateMaybeMessage<CCopyNpc>(nullptr);
  }

  CCopyNpc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCopyNpc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCopyNpc& from);
  void MergeFrom(const CCopyNpc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCopyNpc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.CCopyNpc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsIdFieldNumber = 1,
  };
  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.CCopyNpc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// -------------------------------------------------------------------

class SCopyNpc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.SCopyNpc) */ {
 public:
  SCopyNpc();
  virtual ~SCopyNpc();

  SCopyNpc(const SCopyNpc& from);
  SCopyNpc(SCopyNpc&& from) noexcept
    : SCopyNpc() {
    *this = ::std::move(from);
  }

  inline SCopyNpc& operator=(const SCopyNpc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCopyNpc& operator=(SCopyNpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCopyNpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCopyNpc* internal_default_instance() {
    return reinterpret_cast<const SCopyNpc*>(
               &_SCopyNpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SCopyNpc& a, SCopyNpc& b) {
    a.Swap(&b);
  }
  inline void Swap(SCopyNpc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCopyNpc* New() const final {
    return CreateMaybeMessage<SCopyNpc>(nullptr);
  }

  SCopyNpc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCopyNpc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCopyNpc& from);
  void MergeFrom(const SCopyNpc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCopyNpc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.SCopyNpc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsIdFieldNumber = 1,
    kIsSuccessFieldNumber = 2,
  };
  // int32 goodsId = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isSuccess = 2;
  void clear_issuccess();
  ::PROTOBUF_NAMESPACE_ID::int32 issuccess() const;
  void set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_issuccess() const;
  void _internal_set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.SCopyNpc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 issuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// -------------------------------------------------------------------

class CChangePrompt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.CChangePrompt) */ {
 public:
  CChangePrompt();
  virtual ~CChangePrompt();

  CChangePrompt(const CChangePrompt& from);
  CChangePrompt(CChangePrompt&& from) noexcept
    : CChangePrompt() {
    *this = ::std::move(from);
  }

  inline CChangePrompt& operator=(const CChangePrompt& from) {
    CopyFrom(from);
    return *this;
  }
  inline CChangePrompt& operator=(CChangePrompt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CChangePrompt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CChangePrompt* internal_default_instance() {
    return reinterpret_cast<const CChangePrompt*>(
               &_CChangePrompt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CChangePrompt& a, CChangePrompt& b) {
    a.Swap(&b);
  }
  inline void Swap(CChangePrompt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CChangePrompt* New() const final {
    return CreateMaybeMessage<CChangePrompt>(nullptr);
  }

  CChangePrompt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CChangePrompt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CChangePrompt& from);
  void MergeFrom(const CChangePrompt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CChangePrompt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.CChangePrompt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcNameFieldNumber = 2,
    kTextFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string npcName = 2;
  void clear_npcname();
  const std::string& npcname() const;
  void set_npcname(const std::string& value);
  void set_npcname(std::string&& value);
  void set_npcname(const char* value);
  void set_npcname(const char* value, size_t size);
  std::string* mutable_npcname();
  std::string* release_npcname();
  void set_allocated_npcname(std::string* npcname);
  private:
  const std::string& _internal_npcname() const;
  void _internal_set_npcname(const std::string& value);
  std::string* _internal_mutable_npcname();
  public:

  // string text = 3;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.CChangePrompt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr npcname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// -------------------------------------------------------------------

class SChangePrompt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.SChangePrompt) */ {
 public:
  SChangePrompt();
  virtual ~SChangePrompt();

  SChangePrompt(const SChangePrompt& from);
  SChangePrompt(SChangePrompt&& from) noexcept
    : SChangePrompt() {
    *this = ::std::move(from);
  }

  inline SChangePrompt& operator=(const SChangePrompt& from) {
    CopyFrom(from);
    return *this;
  }
  inline SChangePrompt& operator=(SChangePrompt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SChangePrompt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SChangePrompt* internal_default_instance() {
    return reinterpret_cast<const SChangePrompt*>(
               &_SChangePrompt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SChangePrompt& a, SChangePrompt& b) {
    a.Swap(&b);
  }
  inline void Swap(SChangePrompt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SChangePrompt* New() const final {
    return CreateMaybeMessage<SChangePrompt>(nullptr);
  }

  SChangePrompt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SChangePrompt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SChangePrompt& from);
  void MergeFrom(const SChangePrompt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SChangePrompt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.SChangePrompt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIsSuccessFieldNumber = 2,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isSuccess = 2;
  void clear_issuccess();
  ::PROTOBUF_NAMESPACE_ID::int32 issuccess() const;
  void set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_issuccess() const;
  void _internal_set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.SChangePrompt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 issuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// -------------------------------------------------------------------

class CPromptHistory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.CPromptHistory) */ {
 public:
  CPromptHistory();
  virtual ~CPromptHistory();

  CPromptHistory(const CPromptHistory& from);
  CPromptHistory(CPromptHistory&& from) noexcept
    : CPromptHistory() {
    *this = ::std::move(from);
  }

  inline CPromptHistory& operator=(const CPromptHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPromptHistory& operator=(CPromptHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPromptHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPromptHistory* internal_default_instance() {
    return reinterpret_cast<const CPromptHistory*>(
               &_CPromptHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CPromptHistory& a, CPromptHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CPromptHistory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPromptHistory* New() const final {
    return CreateMaybeMessage<CPromptHistory>(nullptr);
  }

  CPromptHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPromptHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPromptHistory& from);
  void MergeFrom(const CPromptHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPromptHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.CPromptHistory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcNameFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string npcName = 2;
  void clear_npcname();
  const std::string& npcname() const;
  void set_npcname(const std::string& value);
  void set_npcname(std::string&& value);
  void set_npcname(const char* value);
  void set_npcname(const char* value, size_t size);
  std::string* mutable_npcname();
  std::string* release_npcname();
  void set_allocated_npcname(std::string* npcname);
  private:
  const std::string& _internal_npcname() const;
  void _internal_set_npcname(const std::string& value);
  std::string* _internal_mutable_npcname();
  public:

  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.CPromptHistory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr npcname_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// -------------------------------------------------------------------

class SPromptHistory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.SPromptHistory) */ {
 public:
  SPromptHistory();
  virtual ~SPromptHistory();

  SPromptHistory(const SPromptHistory& from);
  SPromptHistory(SPromptHistory&& from) noexcept
    : SPromptHistory() {
    *this = ::std::move(from);
  }

  inline SPromptHistory& operator=(const SPromptHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPromptHistory& operator=(SPromptHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPromptHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPromptHistory* internal_default_instance() {
    return reinterpret_cast<const SPromptHistory*>(
               &_SPromptHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SPromptHistory& a, SPromptHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(SPromptHistory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPromptHistory* New() const final {
    return CreateMaybeMessage<SPromptHistory>(nullptr);
  }

  SPromptHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPromptHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPromptHistory& from);
  void MergeFrom(const SPromptHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPromptHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.SPromptHistory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryFieldNumber = 2,
    kCurrPromptFieldNumber = 1,
  };
  // repeated .gpt.BPromptRecord history = 2;
  int history_size() const;
  private:
  int _internal_history_size() const;
  public:
  void clear_history();
  ::gpt::BPromptRecord* mutable_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpt::BPromptRecord >*
      mutable_history();
  private:
  const ::gpt::BPromptRecord& _internal_history(int index) const;
  ::gpt::BPromptRecord* _internal_add_history();
  public:
  const ::gpt::BPromptRecord& history(int index) const;
  ::gpt::BPromptRecord* add_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpt::BPromptRecord >&
      history() const;

  // .gpt.BPromptRecord currPrompt = 1;
  bool has_currprompt() const;
  private:
  bool _internal_has_currprompt() const;
  public:
  void clear_currprompt();
  const ::gpt::BPromptRecord& currprompt() const;
  ::gpt::BPromptRecord* release_currprompt();
  ::gpt::BPromptRecord* mutable_currprompt();
  void set_allocated_currprompt(::gpt::BPromptRecord* currprompt);
  private:
  const ::gpt::BPromptRecord& _internal_currprompt() const;
  ::gpt::BPromptRecord* _internal_mutable_currprompt();
  public:

  // @@protoc_insertion_point(class_scope:gpt.SPromptHistory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpt::BPromptRecord > history_;
  ::gpt::BPromptRecord* currprompt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// -------------------------------------------------------------------

class BPromptRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.BPromptRecord) */ {
 public:
  BPromptRecord();
  virtual ~BPromptRecord();

  BPromptRecord(const BPromptRecord& from);
  BPromptRecord(BPromptRecord&& from) noexcept
    : BPromptRecord() {
    *this = ::std::move(from);
  }

  inline BPromptRecord& operator=(const BPromptRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline BPromptRecord& operator=(BPromptRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BPromptRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BPromptRecord* internal_default_instance() {
    return reinterpret_cast<const BPromptRecord*>(
               &_BPromptRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BPromptRecord& a, BPromptRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(BPromptRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BPromptRecord* New() const final {
    return CreateMaybeMessage<BPromptRecord>(nullptr);
  }

  BPromptRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BPromptRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BPromptRecord& from);
  void MergeFrom(const BPromptRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BPromptRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.BPromptRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kRecordIdFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string timestamp = 3;
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // int32 recordId = 1;
  void clear_recordid();
  ::PROTOBUF_NAMESPACE_ID::int32 recordid() const;
  void set_recordid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_recordid() const;
  void _internal_set_recordid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.BPromptRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 recordid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// -------------------------------------------------------------------

class CPromptRollback :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.CPromptRollback) */ {
 public:
  CPromptRollback();
  virtual ~CPromptRollback();

  CPromptRollback(const CPromptRollback& from);
  CPromptRollback(CPromptRollback&& from) noexcept
    : CPromptRollback() {
    *this = ::std::move(from);
  }

  inline CPromptRollback& operator=(const CPromptRollback& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPromptRollback& operator=(CPromptRollback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CPromptRollback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CPromptRollback* internal_default_instance() {
    return reinterpret_cast<const CPromptRollback*>(
               &_CPromptRollback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CPromptRollback& a, CPromptRollback& b) {
    a.Swap(&b);
  }
  inline void Swap(CPromptRollback* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CPromptRollback* New() const final {
    return CreateMaybeMessage<CPromptRollback>(nullptr);
  }

  CPromptRollback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CPromptRollback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CPromptRollback& from);
  void MergeFrom(const CPromptRollback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPromptRollback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.CPromptRollback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIdFieldNumber = 1,
  };
  // int32 recordId = 1;
  void clear_recordid();
  ::PROTOBUF_NAMESPACE_ID::int32 recordid() const;
  void set_recordid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_recordid() const;
  void _internal_set_recordid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.CPromptRollback)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 recordid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// -------------------------------------------------------------------

class SPromptRollback :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.SPromptRollback) */ {
 public:
  SPromptRollback();
  virtual ~SPromptRollback();

  SPromptRollback(const SPromptRollback& from);
  SPromptRollback(SPromptRollback&& from) noexcept
    : SPromptRollback() {
    *this = ::std::move(from);
  }

  inline SPromptRollback& operator=(const SPromptRollback& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPromptRollback& operator=(SPromptRollback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SPromptRollback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SPromptRollback* internal_default_instance() {
    return reinterpret_cast<const SPromptRollback*>(
               &_SPromptRollback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SPromptRollback& a, SPromptRollback& b) {
    a.Swap(&b);
  }
  inline void Swap(SPromptRollback* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SPromptRollback* New() const final {
    return CreateMaybeMessage<SPromptRollback>(nullptr);
  }

  SPromptRollback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SPromptRollback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SPromptRollback& from);
  void MergeFrom(const SPromptRollback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPromptRollback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.SPromptRollback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSuccessFieldNumber = 1,
  };
  // int32 isSuccess = 1;
  void clear_issuccess();
  ::PROTOBUF_NAMESPACE_ID::int32 issuccess() const;
  void set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_issuccess() const;
  void _internal_set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.SPromptRollback)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 issuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// -------------------------------------------------------------------

class CNpcCustomChat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.CNpcCustomChat) */ {
 public:
  CNpcCustomChat();
  virtual ~CNpcCustomChat();

  CNpcCustomChat(const CNpcCustomChat& from);
  CNpcCustomChat(CNpcCustomChat&& from) noexcept
    : CNpcCustomChat() {
    *this = ::std::move(from);
  }

  inline CNpcCustomChat& operator=(const CNpcCustomChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNpcCustomChat& operator=(CNpcCustomChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNpcCustomChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CNpcCustomChat* internal_default_instance() {
    return reinterpret_cast<const CNpcCustomChat*>(
               &_CNpcCustomChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CNpcCustomChat& a, CNpcCustomChat& b) {
    a.Swap(&b);
  }
  inline void Swap(CNpcCustomChat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNpcCustomChat* New() const final {
    return CreateMaybeMessage<CNpcCustomChat>(nullptr);
  }

  CNpcCustomChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNpcCustomChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNpcCustomChat& from);
  void MergeFrom(const CNpcCustomChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNpcCustomChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.CNpcCustomChat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcNameFieldNumber = 1,
    kVoiceModelFieldNumber = 2,
    kReqTextFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string npcName = 1;
  void clear_npcname();
  const std::string& npcname() const;
  void set_npcname(const std::string& value);
  void set_npcname(std::string&& value);
  void set_npcname(const char* value);
  void set_npcname(const char* value, size_t size);
  std::string* mutable_npcname();
  std::string* release_npcname();
  void set_allocated_npcname(std::string* npcname);
  private:
  const std::string& _internal_npcname() const;
  void _internal_set_npcname(const std::string& value);
  std::string* _internal_mutable_npcname();
  public:

  // string voiceModel = 2;
  void clear_voicemodel();
  const std::string& voicemodel() const;
  void set_voicemodel(const std::string& value);
  void set_voicemodel(std::string&& value);
  void set_voicemodel(const char* value);
  void set_voicemodel(const char* value, size_t size);
  std::string* mutable_voicemodel();
  std::string* release_voicemodel();
  void set_allocated_voicemodel(std::string* voicemodel);
  private:
  const std::string& _internal_voicemodel() const;
  void _internal_set_voicemodel(const std::string& value);
  std::string* _internal_mutable_voicemodel();
  public:

  // string reqText = 3;
  void clear_reqtext();
  const std::string& reqtext() const;
  void set_reqtext(const std::string& value);
  void set_reqtext(std::string&& value);
  void set_reqtext(const char* value);
  void set_reqtext(const char* value, size_t size);
  std::string* mutable_reqtext();
  std::string* release_reqtext();
  void set_allocated_reqtext(std::string* reqtext);
  private:
  const std::string& _internal_reqtext() const;
  void _internal_set_reqtext(const std::string& value);
  std::string* _internal_mutable_reqtext();
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.CNpcCustomChat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr npcname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voicemodel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reqtext_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// -------------------------------------------------------------------

class SNpcCustomChat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.SNpcCustomChat) */ {
 public:
  SNpcCustomChat();
  virtual ~SNpcCustomChat();

  SNpcCustomChat(const SNpcCustomChat& from);
  SNpcCustomChat(SNpcCustomChat&& from) noexcept
    : SNpcCustomChat() {
    *this = ::std::move(from);
  }

  inline SNpcCustomChat& operator=(const SNpcCustomChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNpcCustomChat& operator=(SNpcCustomChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNpcCustomChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNpcCustomChat* internal_default_instance() {
    return reinterpret_cast<const SNpcCustomChat*>(
               &_SNpcCustomChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SNpcCustomChat& a, SNpcCustomChat& b) {
    a.Swap(&b);
  }
  inline void Swap(SNpcCustomChat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SNpcCustomChat* New() const final {
    return CreateMaybeMessage<SNpcCustomChat>(nullptr);
  }

  SNpcCustomChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNpcCustomChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNpcCustomChat& from);
  void MergeFrom(const SNpcCustomChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNpcCustomChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.SNpcCustomChat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kReqTextFieldNumber = 2,
    kRespTextFieldNumber = 3,
    kActionFieldNumber = 4,
    kTypeFieldNumber = 5,
    kSamplingRateFieldNumber = 6,
  };
  // bytes audio = 1;
  void clear_audio();
  const std::string& audio() const;
  void set_audio(const std::string& value);
  void set_audio(std::string&& value);
  void set_audio(const char* value);
  void set_audio(const void* value, size_t size);
  std::string* mutable_audio();
  std::string* release_audio();
  void set_allocated_audio(std::string* audio);
  private:
  const std::string& _internal_audio() const;
  void _internal_set_audio(const std::string& value);
  std::string* _internal_mutable_audio();
  public:

  // string reqText = 2;
  void clear_reqtext();
  const std::string& reqtext() const;
  void set_reqtext(const std::string& value);
  void set_reqtext(std::string&& value);
  void set_reqtext(const char* value);
  void set_reqtext(const char* value, size_t size);
  std::string* mutable_reqtext();
  std::string* release_reqtext();
  void set_allocated_reqtext(std::string* reqtext);
  private:
  const std::string& _internal_reqtext() const;
  void _internal_set_reqtext(const std::string& value);
  std::string* _internal_mutable_reqtext();
  public:

  // string respText = 3;
  void clear_resptext();
  const std::string& resptext() const;
  void set_resptext(const std::string& value);
  void set_resptext(std::string&& value);
  void set_resptext(const char* value);
  void set_resptext(const char* value, size_t size);
  std::string* mutable_resptext();
  std::string* release_resptext();
  void set_allocated_resptext(std::string* resptext);
  private:
  const std::string& _internal_resptext() const;
  void _internal_set_resptext(const std::string& value);
  std::string* _internal_mutable_resptext();
  public:

  // string action = 4;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // int32 type = 5;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 samplingRate = 6;
  void clear_samplingrate();
  ::PROTOBUF_NAMESPACE_ID::int32 samplingrate() const;
  void set_samplingrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_samplingrate() const;
  void _internal_set_samplingrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.SNpcCustomChat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reqtext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resptext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 samplingrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// -------------------------------------------------------------------

class CNpcCustomChatStream :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.CNpcCustomChatStream) */ {
 public:
  CNpcCustomChatStream();
  virtual ~CNpcCustomChatStream();

  CNpcCustomChatStream(const CNpcCustomChatStream& from);
  CNpcCustomChatStream(CNpcCustomChatStream&& from) noexcept
    : CNpcCustomChatStream() {
    *this = ::std::move(from);
  }

  inline CNpcCustomChatStream& operator=(const CNpcCustomChatStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNpcCustomChatStream& operator=(CNpcCustomChatStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNpcCustomChatStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CNpcCustomChatStream* internal_default_instance() {
    return reinterpret_cast<const CNpcCustomChatStream*>(
               &_CNpcCustomChatStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CNpcCustomChatStream& a, CNpcCustomChatStream& b) {
    a.Swap(&b);
  }
  inline void Swap(CNpcCustomChatStream* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNpcCustomChatStream* New() const final {
    return CreateMaybeMessage<CNpcCustomChatStream>(nullptr);
  }

  CNpcCustomChatStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNpcCustomChatStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNpcCustomChatStream& from);
  void MergeFrom(const CNpcCustomChatStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNpcCustomChatStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.CNpcCustomChatStream";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcNameFieldNumber = 1,
    kVoiceModelFieldNumber = 2,
    kReqTextFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string npcName = 1;
  void clear_npcname();
  const std::string& npcname() const;
  void set_npcname(const std::string& value);
  void set_npcname(std::string&& value);
  void set_npcname(const char* value);
  void set_npcname(const char* value, size_t size);
  std::string* mutable_npcname();
  std::string* release_npcname();
  void set_allocated_npcname(std::string* npcname);
  private:
  const std::string& _internal_npcname() const;
  void _internal_set_npcname(const std::string& value);
  std::string* _internal_mutable_npcname();
  public:

  // string voiceModel = 2;
  void clear_voicemodel();
  const std::string& voicemodel() const;
  void set_voicemodel(const std::string& value);
  void set_voicemodel(std::string&& value);
  void set_voicemodel(const char* value);
  void set_voicemodel(const char* value, size_t size);
  std::string* mutable_voicemodel();
  std::string* release_voicemodel();
  void set_allocated_voicemodel(std::string* voicemodel);
  private:
  const std::string& _internal_voicemodel() const;
  void _internal_set_voicemodel(const std::string& value);
  std::string* _internal_mutable_voicemodel();
  public:

  // string reqText = 3;
  void clear_reqtext();
  const std::string& reqtext() const;
  void set_reqtext(const std::string& value);
  void set_reqtext(std::string&& value);
  void set_reqtext(const char* value);
  void set_reqtext(const char* value, size_t size);
  std::string* mutable_reqtext();
  std::string* release_reqtext();
  void set_allocated_reqtext(std::string* reqtext);
  private:
  const std::string& _internal_reqtext() const;
  void _internal_set_reqtext(const std::string& value);
  std::string* _internal_mutable_reqtext();
  public:

  // int32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.CNpcCustomChatStream)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr npcname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voicemodel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reqtext_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// -------------------------------------------------------------------

class SNpcCustomChatStream :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gpt.SNpcCustomChatStream) */ {
 public:
  SNpcCustomChatStream();
  virtual ~SNpcCustomChatStream();

  SNpcCustomChatStream(const SNpcCustomChatStream& from);
  SNpcCustomChatStream(SNpcCustomChatStream&& from) noexcept
    : SNpcCustomChatStream() {
    *this = ::std::move(from);
  }

  inline SNpcCustomChatStream& operator=(const SNpcCustomChatStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline SNpcCustomChatStream& operator=(SNpcCustomChatStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SNpcCustomChatStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SNpcCustomChatStream* internal_default_instance() {
    return reinterpret_cast<const SNpcCustomChatStream*>(
               &_SNpcCustomChatStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SNpcCustomChatStream& a, SNpcCustomChatStream& b) {
    a.Swap(&b);
  }
  inline void Swap(SNpcCustomChatStream* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SNpcCustomChatStream* New() const final {
    return CreateMaybeMessage<SNpcCustomChatStream>(nullptr);
  }

  SNpcCustomChatStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SNpcCustomChatStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SNpcCustomChatStream& from);
  void MergeFrom(const SNpcCustomChatStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SNpcCustomChatStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gpt.SNpcCustomChatStream";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_npcCustom_2eproto);
    return ::descriptor_table_npcCustom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioFieldNumber = 1,
    kReqTextFieldNumber = 2,
    kRespTextFieldNumber = 3,
    kActionFieldNumber = 4,
    kTypeFieldNumber = 5,
    kIsEndFieldNumber = 6,
    kSamplingRateFieldNumber = 7,
  };
  // bytes audio = 1;
  void clear_audio();
  const std::string& audio() const;
  void set_audio(const std::string& value);
  void set_audio(std::string&& value);
  void set_audio(const char* value);
  void set_audio(const void* value, size_t size);
  std::string* mutable_audio();
  std::string* release_audio();
  void set_allocated_audio(std::string* audio);
  private:
  const std::string& _internal_audio() const;
  void _internal_set_audio(const std::string& value);
  std::string* _internal_mutable_audio();
  public:

  // string reqText = 2;
  void clear_reqtext();
  const std::string& reqtext() const;
  void set_reqtext(const std::string& value);
  void set_reqtext(std::string&& value);
  void set_reqtext(const char* value);
  void set_reqtext(const char* value, size_t size);
  std::string* mutable_reqtext();
  std::string* release_reqtext();
  void set_allocated_reqtext(std::string* reqtext);
  private:
  const std::string& _internal_reqtext() const;
  void _internal_set_reqtext(const std::string& value);
  std::string* _internal_mutable_reqtext();
  public:

  // string respText = 3;
  void clear_resptext();
  const std::string& resptext() const;
  void set_resptext(const std::string& value);
  void set_resptext(std::string&& value);
  void set_resptext(const char* value);
  void set_resptext(const char* value, size_t size);
  std::string* mutable_resptext();
  std::string* release_resptext();
  void set_allocated_resptext(std::string* resptext);
  private:
  const std::string& _internal_resptext() const;
  void _internal_set_resptext(const std::string& value);
  std::string* _internal_mutable_resptext();
  public:

  // string action = 4;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // int32 type = 5;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isEnd = 6;
  void clear_isend();
  bool isend() const;
  void set_isend(bool value);
  private:
  bool _internal_isend() const;
  void _internal_set_isend(bool value);
  public:

  // int32 samplingRate = 7;
  void clear_samplingrate();
  ::PROTOBUF_NAMESPACE_ID::int32 samplingrate() const;
  void set_samplingrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_samplingrate() const;
  void _internal_set_samplingrate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gpt.SNpcCustomChatStream)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reqtext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resptext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  bool isend_;
  ::PROTOBUF_NAMESPACE_ID::int32 samplingrate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_npcCustom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCopyNpc

// int32 goodsId = 1;
inline void CCopyNpc::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyNpc::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCopyNpc::goodsid() const {
  // @@protoc_insertion_point(field_get:gpt.CCopyNpc.goodsId)
  return _internal_goodsid();
}
inline void CCopyNpc::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void CCopyNpc::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:gpt.CCopyNpc.goodsId)
}

// -------------------------------------------------------------------

// SCopyNpc

// int32 goodsId = 1;
inline void SCopyNpc::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyNpc::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyNpc::goodsid() const {
  // @@protoc_insertion_point(field_get:gpt.SCopyNpc.goodsId)
  return _internal_goodsid();
}
inline void SCopyNpc::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void SCopyNpc::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:gpt.SCopyNpc.goodsId)
}

// int32 isSuccess = 2;
inline void SCopyNpc::clear_issuccess() {
  issuccess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyNpc::_internal_issuccess() const {
  return issuccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCopyNpc::issuccess() const {
  // @@protoc_insertion_point(field_get:gpt.SCopyNpc.isSuccess)
  return _internal_issuccess();
}
inline void SCopyNpc::_internal_set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  issuccess_ = value;
}
inline void SCopyNpc::set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_issuccess(value);
  // @@protoc_insertion_point(field_set:gpt.SCopyNpc.isSuccess)
}

// -------------------------------------------------------------------

// CChangePrompt

// int32 type = 1;
inline void CChangePrompt::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChangePrompt::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CChangePrompt::type() const {
  // @@protoc_insertion_point(field_get:gpt.CChangePrompt.type)
  return _internal_type();
}
inline void CChangePrompt::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CChangePrompt::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gpt.CChangePrompt.type)
}

// string npcName = 2;
inline void CChangePrompt::clear_npcname() {
  npcname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CChangePrompt::npcname() const {
  // @@protoc_insertion_point(field_get:gpt.CChangePrompt.npcName)
  return _internal_npcname();
}
inline void CChangePrompt::set_npcname(const std::string& value) {
  _internal_set_npcname(value);
  // @@protoc_insertion_point(field_set:gpt.CChangePrompt.npcName)
}
inline std::string* CChangePrompt::mutable_npcname() {
  // @@protoc_insertion_point(field_mutable:gpt.CChangePrompt.npcName)
  return _internal_mutable_npcname();
}
inline const std::string& CChangePrompt::_internal_npcname() const {
  return npcname_.GetNoArena();
}
inline void CChangePrompt::_internal_set_npcname(const std::string& value) {
  
  npcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CChangePrompt::set_npcname(std::string&& value) {
  
  npcname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.CChangePrompt.npcName)
}
inline void CChangePrompt::set_npcname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  npcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.CChangePrompt.npcName)
}
inline void CChangePrompt::set_npcname(const char* value, size_t size) {
  
  npcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.CChangePrompt.npcName)
}
inline std::string* CChangePrompt::_internal_mutable_npcname() {
  
  return npcname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CChangePrompt::release_npcname() {
  // @@protoc_insertion_point(field_release:gpt.CChangePrompt.npcName)
  
  return npcname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CChangePrompt::set_allocated_npcname(std::string* npcname) {
  if (npcname != nullptr) {
    
  } else {
    
  }
  npcname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), npcname);
  // @@protoc_insertion_point(field_set_allocated:gpt.CChangePrompt.npcName)
}

// string text = 3;
inline void CChangePrompt::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CChangePrompt::text() const {
  // @@protoc_insertion_point(field_get:gpt.CChangePrompt.text)
  return _internal_text();
}
inline void CChangePrompt::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:gpt.CChangePrompt.text)
}
inline std::string* CChangePrompt::mutable_text() {
  // @@protoc_insertion_point(field_mutable:gpt.CChangePrompt.text)
  return _internal_mutable_text();
}
inline const std::string& CChangePrompt::_internal_text() const {
  return text_.GetNoArena();
}
inline void CChangePrompt::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CChangePrompt::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.CChangePrompt.text)
}
inline void CChangePrompt::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.CChangePrompt.text)
}
inline void CChangePrompt::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.CChangePrompt.text)
}
inline std::string* CChangePrompt::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CChangePrompt::release_text() {
  // @@protoc_insertion_point(field_release:gpt.CChangePrompt.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CChangePrompt::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gpt.CChangePrompt.text)
}

// -------------------------------------------------------------------

// SChangePrompt

// int32 type = 1;
inline void SChangePrompt::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChangePrompt::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChangePrompt::type() const {
  // @@protoc_insertion_point(field_get:gpt.SChangePrompt.type)
  return _internal_type();
}
inline void SChangePrompt::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SChangePrompt::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gpt.SChangePrompt.type)
}

// int32 isSuccess = 2;
inline void SChangePrompt::clear_issuccess() {
  issuccess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChangePrompt::_internal_issuccess() const {
  return issuccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SChangePrompt::issuccess() const {
  // @@protoc_insertion_point(field_get:gpt.SChangePrompt.isSuccess)
  return _internal_issuccess();
}
inline void SChangePrompt::_internal_set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  issuccess_ = value;
}
inline void SChangePrompt::set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_issuccess(value);
  // @@protoc_insertion_point(field_set:gpt.SChangePrompt.isSuccess)
}

// -------------------------------------------------------------------

// CPromptHistory

// int32 type = 1;
inline void CPromptHistory::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPromptHistory::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPromptHistory::type() const {
  // @@protoc_insertion_point(field_get:gpt.CPromptHistory.type)
  return _internal_type();
}
inline void CPromptHistory::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CPromptHistory::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gpt.CPromptHistory.type)
}

// string npcName = 2;
inline void CPromptHistory::clear_npcname() {
  npcname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CPromptHistory::npcname() const {
  // @@protoc_insertion_point(field_get:gpt.CPromptHistory.npcName)
  return _internal_npcname();
}
inline void CPromptHistory::set_npcname(const std::string& value) {
  _internal_set_npcname(value);
  // @@protoc_insertion_point(field_set:gpt.CPromptHistory.npcName)
}
inline std::string* CPromptHistory::mutable_npcname() {
  // @@protoc_insertion_point(field_mutable:gpt.CPromptHistory.npcName)
  return _internal_mutable_npcname();
}
inline const std::string& CPromptHistory::_internal_npcname() const {
  return npcname_.GetNoArena();
}
inline void CPromptHistory::_internal_set_npcname(const std::string& value) {
  
  npcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CPromptHistory::set_npcname(std::string&& value) {
  
  npcname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.CPromptHistory.npcName)
}
inline void CPromptHistory::set_npcname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  npcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.CPromptHistory.npcName)
}
inline void CPromptHistory::set_npcname(const char* value, size_t size) {
  
  npcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.CPromptHistory.npcName)
}
inline std::string* CPromptHistory::_internal_mutable_npcname() {
  
  return npcname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CPromptHistory::release_npcname() {
  // @@protoc_insertion_point(field_release:gpt.CPromptHistory.npcName)
  
  return npcname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CPromptHistory::set_allocated_npcname(std::string* npcname) {
  if (npcname != nullptr) {
    
  } else {
    
  }
  npcname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), npcname);
  // @@protoc_insertion_point(field_set_allocated:gpt.CPromptHistory.npcName)
}

// -------------------------------------------------------------------

// SPromptHistory

// .gpt.BPromptRecord currPrompt = 1;
inline bool SPromptHistory::_internal_has_currprompt() const {
  return this != internal_default_instance() && currprompt_ != nullptr;
}
inline bool SPromptHistory::has_currprompt() const {
  return _internal_has_currprompt();
}
inline void SPromptHistory::clear_currprompt() {
  if (GetArenaNoVirtual() == nullptr && currprompt_ != nullptr) {
    delete currprompt_;
  }
  currprompt_ = nullptr;
}
inline const ::gpt::BPromptRecord& SPromptHistory::_internal_currprompt() const {
  const ::gpt::BPromptRecord* p = currprompt_;
  return p != nullptr ? *p : *reinterpret_cast<const ::gpt::BPromptRecord*>(
      &::gpt::_BPromptRecord_default_instance_);
}
inline const ::gpt::BPromptRecord& SPromptHistory::currprompt() const {
  // @@protoc_insertion_point(field_get:gpt.SPromptHistory.currPrompt)
  return _internal_currprompt();
}
inline ::gpt::BPromptRecord* SPromptHistory::release_currprompt() {
  // @@protoc_insertion_point(field_release:gpt.SPromptHistory.currPrompt)
  
  ::gpt::BPromptRecord* temp = currprompt_;
  currprompt_ = nullptr;
  return temp;
}
inline ::gpt::BPromptRecord* SPromptHistory::_internal_mutable_currprompt() {
  
  if (currprompt_ == nullptr) {
    auto* p = CreateMaybeMessage<::gpt::BPromptRecord>(GetArenaNoVirtual());
    currprompt_ = p;
  }
  return currprompt_;
}
inline ::gpt::BPromptRecord* SPromptHistory::mutable_currprompt() {
  // @@protoc_insertion_point(field_mutable:gpt.SPromptHistory.currPrompt)
  return _internal_mutable_currprompt();
}
inline void SPromptHistory::set_allocated_currprompt(::gpt::BPromptRecord* currprompt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete currprompt_;
  }
  if (currprompt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      currprompt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currprompt, submessage_arena);
    }
    
  } else {
    
  }
  currprompt_ = currprompt;
  // @@protoc_insertion_point(field_set_allocated:gpt.SPromptHistory.currPrompt)
}

// repeated .gpt.BPromptRecord history = 2;
inline int SPromptHistory::_internal_history_size() const {
  return history_.size();
}
inline int SPromptHistory::history_size() const {
  return _internal_history_size();
}
inline void SPromptHistory::clear_history() {
  history_.Clear();
}
inline ::gpt::BPromptRecord* SPromptHistory::mutable_history(int index) {
  // @@protoc_insertion_point(field_mutable:gpt.SPromptHistory.history)
  return history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpt::BPromptRecord >*
SPromptHistory::mutable_history() {
  // @@protoc_insertion_point(field_mutable_list:gpt.SPromptHistory.history)
  return &history_;
}
inline const ::gpt::BPromptRecord& SPromptHistory::_internal_history(int index) const {
  return history_.Get(index);
}
inline const ::gpt::BPromptRecord& SPromptHistory::history(int index) const {
  // @@protoc_insertion_point(field_get:gpt.SPromptHistory.history)
  return _internal_history(index);
}
inline ::gpt::BPromptRecord* SPromptHistory::_internal_add_history() {
  return history_.Add();
}
inline ::gpt::BPromptRecord* SPromptHistory::add_history() {
  // @@protoc_insertion_point(field_add:gpt.SPromptHistory.history)
  return _internal_add_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gpt::BPromptRecord >&
SPromptHistory::history() const {
  // @@protoc_insertion_point(field_list:gpt.SPromptHistory.history)
  return history_;
}

// -------------------------------------------------------------------

// BPromptRecord

// int32 recordId = 1;
inline void BPromptRecord::clear_recordid() {
  recordid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BPromptRecord::_internal_recordid() const {
  return recordid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BPromptRecord::recordid() const {
  // @@protoc_insertion_point(field_get:gpt.BPromptRecord.recordId)
  return _internal_recordid();
}
inline void BPromptRecord::_internal_set_recordid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  recordid_ = value;
}
inline void BPromptRecord::set_recordid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:gpt.BPromptRecord.recordId)
}

// string text = 2;
inline void BPromptRecord::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BPromptRecord::text() const {
  // @@protoc_insertion_point(field_get:gpt.BPromptRecord.text)
  return _internal_text();
}
inline void BPromptRecord::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:gpt.BPromptRecord.text)
}
inline std::string* BPromptRecord::mutable_text() {
  // @@protoc_insertion_point(field_mutable:gpt.BPromptRecord.text)
  return _internal_mutable_text();
}
inline const std::string& BPromptRecord::_internal_text() const {
  return text_.GetNoArena();
}
inline void BPromptRecord::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BPromptRecord::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.BPromptRecord.text)
}
inline void BPromptRecord::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.BPromptRecord.text)
}
inline void BPromptRecord::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.BPromptRecord.text)
}
inline std::string* BPromptRecord::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BPromptRecord::release_text() {
  // @@protoc_insertion_point(field_release:gpt.BPromptRecord.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BPromptRecord::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:gpt.BPromptRecord.text)
}

// string timestamp = 3;
inline void BPromptRecord::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BPromptRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:gpt.BPromptRecord.timestamp)
  return _internal_timestamp();
}
inline void BPromptRecord::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:gpt.BPromptRecord.timestamp)
}
inline std::string* BPromptRecord::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:gpt.BPromptRecord.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& BPromptRecord::_internal_timestamp() const {
  return timestamp_.GetNoArena();
}
inline void BPromptRecord::_internal_set_timestamp(const std::string& value) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BPromptRecord::set_timestamp(std::string&& value) {
  
  timestamp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.BPromptRecord.timestamp)
}
inline void BPromptRecord::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.BPromptRecord.timestamp)
}
inline void BPromptRecord::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.BPromptRecord.timestamp)
}
inline std::string* BPromptRecord::_internal_mutable_timestamp() {
  
  return timestamp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BPromptRecord::release_timestamp() {
  // @@protoc_insertion_point(field_release:gpt.BPromptRecord.timestamp)
  
  return timestamp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BPromptRecord::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:gpt.BPromptRecord.timestamp)
}

// -------------------------------------------------------------------

// CPromptRollback

// int32 recordId = 1;
inline void CPromptRollback::clear_recordid() {
  recordid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPromptRollback::_internal_recordid() const {
  return recordid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CPromptRollback::recordid() const {
  // @@protoc_insertion_point(field_get:gpt.CPromptRollback.recordId)
  return _internal_recordid();
}
inline void CPromptRollback::_internal_set_recordid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  recordid_ = value;
}
inline void CPromptRollback::set_recordid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:gpt.CPromptRollback.recordId)
}

// -------------------------------------------------------------------

// SPromptRollback

// int32 isSuccess = 1;
inline void SPromptRollback::clear_issuccess() {
  issuccess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPromptRollback::_internal_issuccess() const {
  return issuccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SPromptRollback::issuccess() const {
  // @@protoc_insertion_point(field_get:gpt.SPromptRollback.isSuccess)
  return _internal_issuccess();
}
inline void SPromptRollback::_internal_set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  issuccess_ = value;
}
inline void SPromptRollback::set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_issuccess(value);
  // @@protoc_insertion_point(field_set:gpt.SPromptRollback.isSuccess)
}

// -------------------------------------------------------------------

// CNpcCustomChat

// string npcName = 1;
inline void CNpcCustomChat::clear_npcname() {
  npcname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CNpcCustomChat::npcname() const {
  // @@protoc_insertion_point(field_get:gpt.CNpcCustomChat.npcName)
  return _internal_npcname();
}
inline void CNpcCustomChat::set_npcname(const std::string& value) {
  _internal_set_npcname(value);
  // @@protoc_insertion_point(field_set:gpt.CNpcCustomChat.npcName)
}
inline std::string* CNpcCustomChat::mutable_npcname() {
  // @@protoc_insertion_point(field_mutable:gpt.CNpcCustomChat.npcName)
  return _internal_mutable_npcname();
}
inline const std::string& CNpcCustomChat::_internal_npcname() const {
  return npcname_.GetNoArena();
}
inline void CNpcCustomChat::_internal_set_npcname(const std::string& value) {
  
  npcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CNpcCustomChat::set_npcname(std::string&& value) {
  
  npcname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.CNpcCustomChat.npcName)
}
inline void CNpcCustomChat::set_npcname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  npcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.CNpcCustomChat.npcName)
}
inline void CNpcCustomChat::set_npcname(const char* value, size_t size) {
  
  npcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.CNpcCustomChat.npcName)
}
inline std::string* CNpcCustomChat::_internal_mutable_npcname() {
  
  return npcname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CNpcCustomChat::release_npcname() {
  // @@protoc_insertion_point(field_release:gpt.CNpcCustomChat.npcName)
  
  return npcname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CNpcCustomChat::set_allocated_npcname(std::string* npcname) {
  if (npcname != nullptr) {
    
  } else {
    
  }
  npcname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), npcname);
  // @@protoc_insertion_point(field_set_allocated:gpt.CNpcCustomChat.npcName)
}

// string voiceModel = 2;
inline void CNpcCustomChat::clear_voicemodel() {
  voicemodel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CNpcCustomChat::voicemodel() const {
  // @@protoc_insertion_point(field_get:gpt.CNpcCustomChat.voiceModel)
  return _internal_voicemodel();
}
inline void CNpcCustomChat::set_voicemodel(const std::string& value) {
  _internal_set_voicemodel(value);
  // @@protoc_insertion_point(field_set:gpt.CNpcCustomChat.voiceModel)
}
inline std::string* CNpcCustomChat::mutable_voicemodel() {
  // @@protoc_insertion_point(field_mutable:gpt.CNpcCustomChat.voiceModel)
  return _internal_mutable_voicemodel();
}
inline const std::string& CNpcCustomChat::_internal_voicemodel() const {
  return voicemodel_.GetNoArena();
}
inline void CNpcCustomChat::_internal_set_voicemodel(const std::string& value) {
  
  voicemodel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CNpcCustomChat::set_voicemodel(std::string&& value) {
  
  voicemodel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.CNpcCustomChat.voiceModel)
}
inline void CNpcCustomChat::set_voicemodel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  voicemodel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.CNpcCustomChat.voiceModel)
}
inline void CNpcCustomChat::set_voicemodel(const char* value, size_t size) {
  
  voicemodel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.CNpcCustomChat.voiceModel)
}
inline std::string* CNpcCustomChat::_internal_mutable_voicemodel() {
  
  return voicemodel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CNpcCustomChat::release_voicemodel() {
  // @@protoc_insertion_point(field_release:gpt.CNpcCustomChat.voiceModel)
  
  return voicemodel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CNpcCustomChat::set_allocated_voicemodel(std::string* voicemodel) {
  if (voicemodel != nullptr) {
    
  } else {
    
  }
  voicemodel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voicemodel);
  // @@protoc_insertion_point(field_set_allocated:gpt.CNpcCustomChat.voiceModel)
}

// string reqText = 3;
inline void CNpcCustomChat::clear_reqtext() {
  reqtext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CNpcCustomChat::reqtext() const {
  // @@protoc_insertion_point(field_get:gpt.CNpcCustomChat.reqText)
  return _internal_reqtext();
}
inline void CNpcCustomChat::set_reqtext(const std::string& value) {
  _internal_set_reqtext(value);
  // @@protoc_insertion_point(field_set:gpt.CNpcCustomChat.reqText)
}
inline std::string* CNpcCustomChat::mutable_reqtext() {
  // @@protoc_insertion_point(field_mutable:gpt.CNpcCustomChat.reqText)
  return _internal_mutable_reqtext();
}
inline const std::string& CNpcCustomChat::_internal_reqtext() const {
  return reqtext_.GetNoArena();
}
inline void CNpcCustomChat::_internal_set_reqtext(const std::string& value) {
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CNpcCustomChat::set_reqtext(std::string&& value) {
  
  reqtext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.CNpcCustomChat.reqText)
}
inline void CNpcCustomChat::set_reqtext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.CNpcCustomChat.reqText)
}
inline void CNpcCustomChat::set_reqtext(const char* value, size_t size) {
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.CNpcCustomChat.reqText)
}
inline std::string* CNpcCustomChat::_internal_mutable_reqtext() {
  
  return reqtext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CNpcCustomChat::release_reqtext() {
  // @@protoc_insertion_point(field_release:gpt.CNpcCustomChat.reqText)
  
  return reqtext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CNpcCustomChat::set_allocated_reqtext(std::string* reqtext) {
  if (reqtext != nullptr) {
    
  } else {
    
  }
  reqtext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reqtext);
  // @@protoc_insertion_point(field_set_allocated:gpt.CNpcCustomChat.reqText)
}

// int32 type = 4;
inline void CNpcCustomChat::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNpcCustomChat::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNpcCustomChat::type() const {
  // @@protoc_insertion_point(field_get:gpt.CNpcCustomChat.type)
  return _internal_type();
}
inline void CNpcCustomChat::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CNpcCustomChat::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gpt.CNpcCustomChat.type)
}

// -------------------------------------------------------------------

// SNpcCustomChat

// bytes audio = 1;
inline void SNpcCustomChat::clear_audio() {
  audio_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNpcCustomChat::audio() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChat.audio)
  return _internal_audio();
}
inline void SNpcCustomChat::set_audio(const std::string& value) {
  _internal_set_audio(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChat.audio)
}
inline std::string* SNpcCustomChat::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:gpt.SNpcCustomChat.audio)
  return _internal_mutable_audio();
}
inline const std::string& SNpcCustomChat::_internal_audio() const {
  return audio_.GetNoArena();
}
inline void SNpcCustomChat::_internal_set_audio(const std::string& value) {
  
  audio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SNpcCustomChat::set_audio(std::string&& value) {
  
  audio_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.SNpcCustomChat.audio)
}
inline void SNpcCustomChat::set_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.SNpcCustomChat.audio)
}
inline void SNpcCustomChat::set_audio(const void* value, size_t size) {
  
  audio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.SNpcCustomChat.audio)
}
inline std::string* SNpcCustomChat::_internal_mutable_audio() {
  
  return audio_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNpcCustomChat::release_audio() {
  // @@protoc_insertion_point(field_release:gpt.SNpcCustomChat.audio)
  
  return audio_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNpcCustomChat::set_allocated_audio(std::string* audio) {
  if (audio != nullptr) {
    
  } else {
    
  }
  audio_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio);
  // @@protoc_insertion_point(field_set_allocated:gpt.SNpcCustomChat.audio)
}

// string reqText = 2;
inline void SNpcCustomChat::clear_reqtext() {
  reqtext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNpcCustomChat::reqtext() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChat.reqText)
  return _internal_reqtext();
}
inline void SNpcCustomChat::set_reqtext(const std::string& value) {
  _internal_set_reqtext(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChat.reqText)
}
inline std::string* SNpcCustomChat::mutable_reqtext() {
  // @@protoc_insertion_point(field_mutable:gpt.SNpcCustomChat.reqText)
  return _internal_mutable_reqtext();
}
inline const std::string& SNpcCustomChat::_internal_reqtext() const {
  return reqtext_.GetNoArena();
}
inline void SNpcCustomChat::_internal_set_reqtext(const std::string& value) {
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SNpcCustomChat::set_reqtext(std::string&& value) {
  
  reqtext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.SNpcCustomChat.reqText)
}
inline void SNpcCustomChat::set_reqtext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.SNpcCustomChat.reqText)
}
inline void SNpcCustomChat::set_reqtext(const char* value, size_t size) {
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.SNpcCustomChat.reqText)
}
inline std::string* SNpcCustomChat::_internal_mutable_reqtext() {
  
  return reqtext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNpcCustomChat::release_reqtext() {
  // @@protoc_insertion_point(field_release:gpt.SNpcCustomChat.reqText)
  
  return reqtext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNpcCustomChat::set_allocated_reqtext(std::string* reqtext) {
  if (reqtext != nullptr) {
    
  } else {
    
  }
  reqtext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reqtext);
  // @@protoc_insertion_point(field_set_allocated:gpt.SNpcCustomChat.reqText)
}

// string respText = 3;
inline void SNpcCustomChat::clear_resptext() {
  resptext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNpcCustomChat::resptext() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChat.respText)
  return _internal_resptext();
}
inline void SNpcCustomChat::set_resptext(const std::string& value) {
  _internal_set_resptext(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChat.respText)
}
inline std::string* SNpcCustomChat::mutable_resptext() {
  // @@protoc_insertion_point(field_mutable:gpt.SNpcCustomChat.respText)
  return _internal_mutable_resptext();
}
inline const std::string& SNpcCustomChat::_internal_resptext() const {
  return resptext_.GetNoArena();
}
inline void SNpcCustomChat::_internal_set_resptext(const std::string& value) {
  
  resptext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SNpcCustomChat::set_resptext(std::string&& value) {
  
  resptext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.SNpcCustomChat.respText)
}
inline void SNpcCustomChat::set_resptext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resptext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.SNpcCustomChat.respText)
}
inline void SNpcCustomChat::set_resptext(const char* value, size_t size) {
  
  resptext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.SNpcCustomChat.respText)
}
inline std::string* SNpcCustomChat::_internal_mutable_resptext() {
  
  return resptext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNpcCustomChat::release_resptext() {
  // @@protoc_insertion_point(field_release:gpt.SNpcCustomChat.respText)
  
  return resptext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNpcCustomChat::set_allocated_resptext(std::string* resptext) {
  if (resptext != nullptr) {
    
  } else {
    
  }
  resptext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resptext);
  // @@protoc_insertion_point(field_set_allocated:gpt.SNpcCustomChat.respText)
}

// string action = 4;
inline void SNpcCustomChat::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNpcCustomChat::action() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChat.action)
  return _internal_action();
}
inline void SNpcCustomChat::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChat.action)
}
inline std::string* SNpcCustomChat::mutable_action() {
  // @@protoc_insertion_point(field_mutable:gpt.SNpcCustomChat.action)
  return _internal_mutable_action();
}
inline const std::string& SNpcCustomChat::_internal_action() const {
  return action_.GetNoArena();
}
inline void SNpcCustomChat::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SNpcCustomChat::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.SNpcCustomChat.action)
}
inline void SNpcCustomChat::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.SNpcCustomChat.action)
}
inline void SNpcCustomChat::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.SNpcCustomChat.action)
}
inline std::string* SNpcCustomChat::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNpcCustomChat::release_action() {
  // @@protoc_insertion_point(field_release:gpt.SNpcCustomChat.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNpcCustomChat::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:gpt.SNpcCustomChat.action)
}

// int32 type = 5;
inline void SNpcCustomChat::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNpcCustomChat::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNpcCustomChat::type() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChat.type)
  return _internal_type();
}
inline void SNpcCustomChat::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SNpcCustomChat::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChat.type)
}

// int32 samplingRate = 6;
inline void SNpcCustomChat::clear_samplingrate() {
  samplingrate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNpcCustomChat::_internal_samplingrate() const {
  return samplingrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNpcCustomChat::samplingrate() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChat.samplingRate)
  return _internal_samplingrate();
}
inline void SNpcCustomChat::_internal_set_samplingrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  samplingrate_ = value;
}
inline void SNpcCustomChat::set_samplingrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_samplingrate(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChat.samplingRate)
}

// -------------------------------------------------------------------

// CNpcCustomChatStream

// string npcName = 1;
inline void CNpcCustomChatStream::clear_npcname() {
  npcname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CNpcCustomChatStream::npcname() const {
  // @@protoc_insertion_point(field_get:gpt.CNpcCustomChatStream.npcName)
  return _internal_npcname();
}
inline void CNpcCustomChatStream::set_npcname(const std::string& value) {
  _internal_set_npcname(value);
  // @@protoc_insertion_point(field_set:gpt.CNpcCustomChatStream.npcName)
}
inline std::string* CNpcCustomChatStream::mutable_npcname() {
  // @@protoc_insertion_point(field_mutable:gpt.CNpcCustomChatStream.npcName)
  return _internal_mutable_npcname();
}
inline const std::string& CNpcCustomChatStream::_internal_npcname() const {
  return npcname_.GetNoArena();
}
inline void CNpcCustomChatStream::_internal_set_npcname(const std::string& value) {
  
  npcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CNpcCustomChatStream::set_npcname(std::string&& value) {
  
  npcname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.CNpcCustomChatStream.npcName)
}
inline void CNpcCustomChatStream::set_npcname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  npcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.CNpcCustomChatStream.npcName)
}
inline void CNpcCustomChatStream::set_npcname(const char* value, size_t size) {
  
  npcname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.CNpcCustomChatStream.npcName)
}
inline std::string* CNpcCustomChatStream::_internal_mutable_npcname() {
  
  return npcname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CNpcCustomChatStream::release_npcname() {
  // @@protoc_insertion_point(field_release:gpt.CNpcCustomChatStream.npcName)
  
  return npcname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CNpcCustomChatStream::set_allocated_npcname(std::string* npcname) {
  if (npcname != nullptr) {
    
  } else {
    
  }
  npcname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), npcname);
  // @@protoc_insertion_point(field_set_allocated:gpt.CNpcCustomChatStream.npcName)
}

// string voiceModel = 2;
inline void CNpcCustomChatStream::clear_voicemodel() {
  voicemodel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CNpcCustomChatStream::voicemodel() const {
  // @@protoc_insertion_point(field_get:gpt.CNpcCustomChatStream.voiceModel)
  return _internal_voicemodel();
}
inline void CNpcCustomChatStream::set_voicemodel(const std::string& value) {
  _internal_set_voicemodel(value);
  // @@protoc_insertion_point(field_set:gpt.CNpcCustomChatStream.voiceModel)
}
inline std::string* CNpcCustomChatStream::mutable_voicemodel() {
  // @@protoc_insertion_point(field_mutable:gpt.CNpcCustomChatStream.voiceModel)
  return _internal_mutable_voicemodel();
}
inline const std::string& CNpcCustomChatStream::_internal_voicemodel() const {
  return voicemodel_.GetNoArena();
}
inline void CNpcCustomChatStream::_internal_set_voicemodel(const std::string& value) {
  
  voicemodel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CNpcCustomChatStream::set_voicemodel(std::string&& value) {
  
  voicemodel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.CNpcCustomChatStream.voiceModel)
}
inline void CNpcCustomChatStream::set_voicemodel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  voicemodel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.CNpcCustomChatStream.voiceModel)
}
inline void CNpcCustomChatStream::set_voicemodel(const char* value, size_t size) {
  
  voicemodel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.CNpcCustomChatStream.voiceModel)
}
inline std::string* CNpcCustomChatStream::_internal_mutable_voicemodel() {
  
  return voicemodel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CNpcCustomChatStream::release_voicemodel() {
  // @@protoc_insertion_point(field_release:gpt.CNpcCustomChatStream.voiceModel)
  
  return voicemodel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CNpcCustomChatStream::set_allocated_voicemodel(std::string* voicemodel) {
  if (voicemodel != nullptr) {
    
  } else {
    
  }
  voicemodel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voicemodel);
  // @@protoc_insertion_point(field_set_allocated:gpt.CNpcCustomChatStream.voiceModel)
}

// string reqText = 3;
inline void CNpcCustomChatStream::clear_reqtext() {
  reqtext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CNpcCustomChatStream::reqtext() const {
  // @@protoc_insertion_point(field_get:gpt.CNpcCustomChatStream.reqText)
  return _internal_reqtext();
}
inline void CNpcCustomChatStream::set_reqtext(const std::string& value) {
  _internal_set_reqtext(value);
  // @@protoc_insertion_point(field_set:gpt.CNpcCustomChatStream.reqText)
}
inline std::string* CNpcCustomChatStream::mutable_reqtext() {
  // @@protoc_insertion_point(field_mutable:gpt.CNpcCustomChatStream.reqText)
  return _internal_mutable_reqtext();
}
inline const std::string& CNpcCustomChatStream::_internal_reqtext() const {
  return reqtext_.GetNoArena();
}
inline void CNpcCustomChatStream::_internal_set_reqtext(const std::string& value) {
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CNpcCustomChatStream::set_reqtext(std::string&& value) {
  
  reqtext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.CNpcCustomChatStream.reqText)
}
inline void CNpcCustomChatStream::set_reqtext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.CNpcCustomChatStream.reqText)
}
inline void CNpcCustomChatStream::set_reqtext(const char* value, size_t size) {
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.CNpcCustomChatStream.reqText)
}
inline std::string* CNpcCustomChatStream::_internal_mutable_reqtext() {
  
  return reqtext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CNpcCustomChatStream::release_reqtext() {
  // @@protoc_insertion_point(field_release:gpt.CNpcCustomChatStream.reqText)
  
  return reqtext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CNpcCustomChatStream::set_allocated_reqtext(std::string* reqtext) {
  if (reqtext != nullptr) {
    
  } else {
    
  }
  reqtext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reqtext);
  // @@protoc_insertion_point(field_set_allocated:gpt.CNpcCustomChatStream.reqText)
}

// int32 type = 4;
inline void CNpcCustomChatStream::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNpcCustomChatStream::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNpcCustomChatStream::type() const {
  // @@protoc_insertion_point(field_get:gpt.CNpcCustomChatStream.type)
  return _internal_type();
}
inline void CNpcCustomChatStream::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CNpcCustomChatStream::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gpt.CNpcCustomChatStream.type)
}

// -------------------------------------------------------------------

// SNpcCustomChatStream

// bytes audio = 1;
inline void SNpcCustomChatStream::clear_audio() {
  audio_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNpcCustomChatStream::audio() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChatStream.audio)
  return _internal_audio();
}
inline void SNpcCustomChatStream::set_audio(const std::string& value) {
  _internal_set_audio(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChatStream.audio)
}
inline std::string* SNpcCustomChatStream::mutable_audio() {
  // @@protoc_insertion_point(field_mutable:gpt.SNpcCustomChatStream.audio)
  return _internal_mutable_audio();
}
inline const std::string& SNpcCustomChatStream::_internal_audio() const {
  return audio_.GetNoArena();
}
inline void SNpcCustomChatStream::_internal_set_audio(const std::string& value) {
  
  audio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SNpcCustomChatStream::set_audio(std::string&& value) {
  
  audio_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.SNpcCustomChatStream.audio)
}
inline void SNpcCustomChatStream::set_audio(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.SNpcCustomChatStream.audio)
}
inline void SNpcCustomChatStream::set_audio(const void* value, size_t size) {
  
  audio_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.SNpcCustomChatStream.audio)
}
inline std::string* SNpcCustomChatStream::_internal_mutable_audio() {
  
  return audio_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNpcCustomChatStream::release_audio() {
  // @@protoc_insertion_point(field_release:gpt.SNpcCustomChatStream.audio)
  
  return audio_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNpcCustomChatStream::set_allocated_audio(std::string* audio) {
  if (audio != nullptr) {
    
  } else {
    
  }
  audio_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio);
  // @@protoc_insertion_point(field_set_allocated:gpt.SNpcCustomChatStream.audio)
}

// string reqText = 2;
inline void SNpcCustomChatStream::clear_reqtext() {
  reqtext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNpcCustomChatStream::reqtext() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChatStream.reqText)
  return _internal_reqtext();
}
inline void SNpcCustomChatStream::set_reqtext(const std::string& value) {
  _internal_set_reqtext(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChatStream.reqText)
}
inline std::string* SNpcCustomChatStream::mutable_reqtext() {
  // @@protoc_insertion_point(field_mutable:gpt.SNpcCustomChatStream.reqText)
  return _internal_mutable_reqtext();
}
inline const std::string& SNpcCustomChatStream::_internal_reqtext() const {
  return reqtext_.GetNoArena();
}
inline void SNpcCustomChatStream::_internal_set_reqtext(const std::string& value) {
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SNpcCustomChatStream::set_reqtext(std::string&& value) {
  
  reqtext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.SNpcCustomChatStream.reqText)
}
inline void SNpcCustomChatStream::set_reqtext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.SNpcCustomChatStream.reqText)
}
inline void SNpcCustomChatStream::set_reqtext(const char* value, size_t size) {
  
  reqtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.SNpcCustomChatStream.reqText)
}
inline std::string* SNpcCustomChatStream::_internal_mutable_reqtext() {
  
  return reqtext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNpcCustomChatStream::release_reqtext() {
  // @@protoc_insertion_point(field_release:gpt.SNpcCustomChatStream.reqText)
  
  return reqtext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNpcCustomChatStream::set_allocated_reqtext(std::string* reqtext) {
  if (reqtext != nullptr) {
    
  } else {
    
  }
  reqtext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reqtext);
  // @@protoc_insertion_point(field_set_allocated:gpt.SNpcCustomChatStream.reqText)
}

// string respText = 3;
inline void SNpcCustomChatStream::clear_resptext() {
  resptext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNpcCustomChatStream::resptext() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChatStream.respText)
  return _internal_resptext();
}
inline void SNpcCustomChatStream::set_resptext(const std::string& value) {
  _internal_set_resptext(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChatStream.respText)
}
inline std::string* SNpcCustomChatStream::mutable_resptext() {
  // @@protoc_insertion_point(field_mutable:gpt.SNpcCustomChatStream.respText)
  return _internal_mutable_resptext();
}
inline const std::string& SNpcCustomChatStream::_internal_resptext() const {
  return resptext_.GetNoArena();
}
inline void SNpcCustomChatStream::_internal_set_resptext(const std::string& value) {
  
  resptext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SNpcCustomChatStream::set_resptext(std::string&& value) {
  
  resptext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.SNpcCustomChatStream.respText)
}
inline void SNpcCustomChatStream::set_resptext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resptext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.SNpcCustomChatStream.respText)
}
inline void SNpcCustomChatStream::set_resptext(const char* value, size_t size) {
  
  resptext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.SNpcCustomChatStream.respText)
}
inline std::string* SNpcCustomChatStream::_internal_mutable_resptext() {
  
  return resptext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNpcCustomChatStream::release_resptext() {
  // @@protoc_insertion_point(field_release:gpt.SNpcCustomChatStream.respText)
  
  return resptext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNpcCustomChatStream::set_allocated_resptext(std::string* resptext) {
  if (resptext != nullptr) {
    
  } else {
    
  }
  resptext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resptext);
  // @@protoc_insertion_point(field_set_allocated:gpt.SNpcCustomChatStream.respText)
}

// string action = 4;
inline void SNpcCustomChatStream::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SNpcCustomChatStream::action() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChatStream.action)
  return _internal_action();
}
inline void SNpcCustomChatStream::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChatStream.action)
}
inline std::string* SNpcCustomChatStream::mutable_action() {
  // @@protoc_insertion_point(field_mutable:gpt.SNpcCustomChatStream.action)
  return _internal_mutable_action();
}
inline const std::string& SNpcCustomChatStream::_internal_action() const {
  return action_.GetNoArena();
}
inline void SNpcCustomChatStream::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SNpcCustomChatStream::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gpt.SNpcCustomChatStream.action)
}
inline void SNpcCustomChatStream::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gpt.SNpcCustomChatStream.action)
}
inline void SNpcCustomChatStream::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gpt.SNpcCustomChatStream.action)
}
inline std::string* SNpcCustomChatStream::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SNpcCustomChatStream::release_action() {
  // @@protoc_insertion_point(field_release:gpt.SNpcCustomChatStream.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SNpcCustomChatStream::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:gpt.SNpcCustomChatStream.action)
}

// int32 type = 5;
inline void SNpcCustomChatStream::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNpcCustomChatStream::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNpcCustomChatStream::type() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChatStream.type)
  return _internal_type();
}
inline void SNpcCustomChatStream::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SNpcCustomChatStream::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChatStream.type)
}

// bool isEnd = 6;
inline void SNpcCustomChatStream::clear_isend() {
  isend_ = false;
}
inline bool SNpcCustomChatStream::_internal_isend() const {
  return isend_;
}
inline bool SNpcCustomChatStream::isend() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChatStream.isEnd)
  return _internal_isend();
}
inline void SNpcCustomChatStream::_internal_set_isend(bool value) {
  
  isend_ = value;
}
inline void SNpcCustomChatStream::set_isend(bool value) {
  _internal_set_isend(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChatStream.isEnd)
}

// int32 samplingRate = 7;
inline void SNpcCustomChatStream::clear_samplingrate() {
  samplingrate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNpcCustomChatStream::_internal_samplingrate() const {
  return samplingrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SNpcCustomChatStream::samplingrate() const {
  // @@protoc_insertion_point(field_get:gpt.SNpcCustomChatStream.samplingRate)
  return _internal_samplingrate();
}
inline void SNpcCustomChatStream::_internal_set_samplingrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  samplingrate_ = value;
}
inline void SNpcCustomChatStream::set_samplingrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_samplingrate(value);
  // @@protoc_insertion_point(field_set:gpt.SNpcCustomChatStream.samplingRate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpt

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_npcCustom_2eproto
