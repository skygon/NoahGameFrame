// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameTick.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gameTick_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gameTick_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gameTick_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gameTick_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gameTick_2eproto;
namespace gameTick {
class BoatInfo;
class BoatInfoDefaultTypeInternal;
extern BoatInfoDefaultTypeInternal _BoatInfo_default_instance_;
class SStartLineUp;
class SStartLineUpDefaultTypeInternal;
extern SStartLineUpDefaultTypeInternal _SStartLineUp_default_instance_;
class STickGameOver;
class STickGameOverDefaultTypeInternal;
extern STickGameOverDefaultTypeInternal _STickGameOver_default_instance_;
class STickOfficialStartGame;
class STickOfficialStartGameDefaultTypeInternal;
extern STickOfficialStartGameDefaultTypeInternal _STickOfficialStartGame_default_instance_;
class STickStartGame;
class STickStartGameDefaultTypeInternal;
extern STickStartGameDefaultTypeInternal _STickStartGame_default_instance_;
}  // namespace gameTick
PROTOBUF_NAMESPACE_OPEN
template<> ::gameTick::BoatInfo* Arena::CreateMaybeMessage<::gameTick::BoatInfo>(Arena*);
template<> ::gameTick::SStartLineUp* Arena::CreateMaybeMessage<::gameTick::SStartLineUp>(Arena*);
template<> ::gameTick::STickGameOver* Arena::CreateMaybeMessage<::gameTick::STickGameOver>(Arena*);
template<> ::gameTick::STickOfficialStartGame* Arena::CreateMaybeMessage<::gameTick::STickOfficialStartGame>(Arena*);
template<> ::gameTick::STickStartGame* Arena::CreateMaybeMessage<::gameTick::STickStartGame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gameTick {

// ===================================================================

class SStartLineUp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.SStartLineUp) */ {
 public:
  SStartLineUp();
  virtual ~SStartLineUp();

  SStartLineUp(const SStartLineUp& from);
  SStartLineUp(SStartLineUp&& from) noexcept
    : SStartLineUp() {
    *this = ::std::move(from);
  }

  inline SStartLineUp& operator=(const SStartLineUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SStartLineUp& operator=(SStartLineUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SStartLineUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SStartLineUp* internal_default_instance() {
    return reinterpret_cast<const SStartLineUp*>(
               &_SStartLineUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SStartLineUp& a, SStartLineUp& b) {
    a.Swap(&b);
  }
  inline void Swap(SStartLineUp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SStartLineUp* New() const final {
    return CreateMaybeMessage<SStartLineUp>(nullptr);
  }

  SStartLineUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SStartLineUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SStartLineUp& from);
  void MergeFrom(const SStartLineUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SStartLineUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.SStartLineUp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameTick_2eproto);
    return ::descriptor_table_gameTick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
    kGameStartStampFieldNumber = 2,
  };
  // int32 gameId = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gameStartStamp = 2;
  void clear_gamestartstamp();
  ::PROTOBUF_NAMESPACE_ID::int32 gamestartstamp() const;
  void set_gamestartstamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamestartstamp() const;
  void _internal_set_gamestartstamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.SStartLineUp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamestartstamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameTick_2eproto;
};
// -------------------------------------------------------------------

class STickStartGame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.STickStartGame) */ {
 public:
  STickStartGame();
  virtual ~STickStartGame();

  STickStartGame(const STickStartGame& from);
  STickStartGame(STickStartGame&& from) noexcept
    : STickStartGame() {
    *this = ::std::move(from);
  }

  inline STickStartGame& operator=(const STickStartGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline STickStartGame& operator=(STickStartGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STickStartGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STickStartGame* internal_default_instance() {
    return reinterpret_cast<const STickStartGame*>(
               &_STickStartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(STickStartGame& a, STickStartGame& b) {
    a.Swap(&b);
  }
  inline void Swap(STickStartGame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STickStartGame* New() const final {
    return CreateMaybeMessage<STickStartGame>(nullptr);
  }

  STickStartGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STickStartGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STickStartGame& from);
  void MergeFrom(const STickStartGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STickStartGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.STickStartGame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameTick_2eproto);
    return ::descriptor_table_gameTick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoatInfoFieldNumber = 4,
    kGameIdFieldNumber = 1,
    kGameStartStampFieldNumber = 2,
    kOfficialStartTimeFieldNumber = 3,
    kStatusFieldNumber = 5,
  };
  // repeated .gameTick.BoatInfo boatInfo = 4;
  int boatinfo_size() const;
  private:
  int _internal_boatinfo_size() const;
  public:
  void clear_boatinfo();
  ::gameTick::BoatInfo* mutable_boatinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::BoatInfo >*
      mutable_boatinfo();
  private:
  const ::gameTick::BoatInfo& _internal_boatinfo(int index) const;
  ::gameTick::BoatInfo* _internal_add_boatinfo();
  public:
  const ::gameTick::BoatInfo& boatinfo(int index) const;
  ::gameTick::BoatInfo* add_boatinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::BoatInfo >&
      boatinfo() const;

  // int32 gameId = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gameStartStamp = 2;
  void clear_gamestartstamp();
  ::PROTOBUF_NAMESPACE_ID::int32 gamestartstamp() const;
  void set_gamestartstamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamestartstamp() const;
  void _internal_set_gamestartstamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 OfficialStartTime = 3;
  void clear_officialstarttime();
  ::PROTOBUF_NAMESPACE_ID::int32 officialstarttime() const;
  void set_officialstarttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_officialstarttime() const;
  void _internal_set_officialstarttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 status = 5;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.STickStartGame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::BoatInfo > boatinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamestartstamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 officialstarttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameTick_2eproto;
};
// -------------------------------------------------------------------

class BoatInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.BoatInfo) */ {
 public:
  BoatInfo();
  virtual ~BoatInfo();

  BoatInfo(const BoatInfo& from);
  BoatInfo(BoatInfo&& from) noexcept
    : BoatInfo() {
    *this = ::std::move(from);
  }

  inline BoatInfo& operator=(const BoatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoatInfo& operator=(BoatInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoatInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoatInfo* internal_default_instance() {
    return reinterpret_cast<const BoatInfo*>(
               &_BoatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BoatInfo& a, BoatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BoatInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoatInfo* New() const final {
    return CreateMaybeMessage<BoatInfo>(nullptr);
  }

  BoatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoatInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoatInfo& from);
  void MergeFrom(const BoatInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoatInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.BoatInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameTick_2eproto);
    return ::descriptor_table_gameTick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoatIdFieldNumber = 1,
    kLeftUidFieldNumber = 2,
    kRightUidFieldNumber = 3,
  };
  // int32 boatId = 1;
  void clear_boatid();
  ::PROTOBUF_NAMESPACE_ID::int32 boatid() const;
  void set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_boatid() const;
  void _internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 leftUid = 2;
  void clear_leftuid();
  ::PROTOBUF_NAMESPACE_ID::int32 leftuid() const;
  void set_leftuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leftuid() const;
  void _internal_set_leftuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rightUid = 3;
  void clear_rightuid();
  ::PROTOBUF_NAMESPACE_ID::int32 rightuid() const;
  void set_rightuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rightuid() const;
  void _internal_set_rightuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.BoatInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 boatid_;
  ::PROTOBUF_NAMESPACE_ID::int32 leftuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 rightuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameTick_2eproto;
};
// -------------------------------------------------------------------

class STickOfficialStartGame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.STickOfficialStartGame) */ {
 public:
  STickOfficialStartGame();
  virtual ~STickOfficialStartGame();

  STickOfficialStartGame(const STickOfficialStartGame& from);
  STickOfficialStartGame(STickOfficialStartGame&& from) noexcept
    : STickOfficialStartGame() {
    *this = ::std::move(from);
  }

  inline STickOfficialStartGame& operator=(const STickOfficialStartGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline STickOfficialStartGame& operator=(STickOfficialStartGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STickOfficialStartGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STickOfficialStartGame* internal_default_instance() {
    return reinterpret_cast<const STickOfficialStartGame*>(
               &_STickOfficialStartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(STickOfficialStartGame& a, STickOfficialStartGame& b) {
    a.Swap(&b);
  }
  inline void Swap(STickOfficialStartGame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STickOfficialStartGame* New() const final {
    return CreateMaybeMessage<STickOfficialStartGame>(nullptr);
  }

  STickOfficialStartGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STickOfficialStartGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STickOfficialStartGame& from);
  void MergeFrom(const STickOfficialStartGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STickOfficialStartGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.STickOfficialStartGame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameTick_2eproto);
    return ::descriptor_table_gameTick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
    kGameOverStampFieldNumber = 2,
  };
  // int32 gameId = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gameOverStamp = 2;
  void clear_gameoverstamp();
  ::PROTOBUF_NAMESPACE_ID::int32 gameoverstamp() const;
  void set_gameoverstamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameoverstamp() const;
  void _internal_set_gameoverstamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.STickOfficialStartGame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameoverstamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameTick_2eproto;
};
// -------------------------------------------------------------------

class STickGameOver :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gameTick.STickGameOver) */ {
 public:
  STickGameOver();
  virtual ~STickGameOver();

  STickGameOver(const STickGameOver& from);
  STickGameOver(STickGameOver&& from) noexcept
    : STickGameOver() {
    *this = ::std::move(from);
  }

  inline STickGameOver& operator=(const STickGameOver& from) {
    CopyFrom(from);
    return *this;
  }
  inline STickGameOver& operator=(STickGameOver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STickGameOver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STickGameOver* internal_default_instance() {
    return reinterpret_cast<const STickGameOver*>(
               &_STickGameOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(STickGameOver& a, STickGameOver& b) {
    a.Swap(&b);
  }
  inline void Swap(STickGameOver* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STickGameOver* New() const final {
    return CreateMaybeMessage<STickGameOver>(nullptr);
  }

  STickGameOver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STickGameOver>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STickGameOver& from);
  void MergeFrom(const STickGameOver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STickGameOver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gameTick.STickGameOver";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gameTick_2eproto);
    return ::descriptor_table_gameTick_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // int32 gameId = 1;
  void clear_gameid();
  ::PROTOBUF_NAMESPACE_ID::int32 gameid() const;
  void set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gameid() const;
  void _internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gameTick.STickGameOver)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 gameid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gameTick_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SStartLineUp

// int32 gameId = 1;
inline void SStartLineUp::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SStartLineUp::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SStartLineUp::gameid() const {
  // @@protoc_insertion_point(field_get:gameTick.SStartLineUp.gameId)
  return _internal_gameid();
}
inline void SStartLineUp::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void SStartLineUp::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:gameTick.SStartLineUp.gameId)
}

// int32 gameStartStamp = 2;
inline void SStartLineUp::clear_gamestartstamp() {
  gamestartstamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SStartLineUp::_internal_gamestartstamp() const {
  return gamestartstamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SStartLineUp::gamestartstamp() const {
  // @@protoc_insertion_point(field_get:gameTick.SStartLineUp.gameStartStamp)
  return _internal_gamestartstamp();
}
inline void SStartLineUp::_internal_set_gamestartstamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gamestartstamp_ = value;
}
inline void SStartLineUp::set_gamestartstamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamestartstamp(value);
  // @@protoc_insertion_point(field_set:gameTick.SStartLineUp.gameStartStamp)
}

// -------------------------------------------------------------------

// STickStartGame

// int32 gameId = 1;
inline void STickStartGame::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickStartGame::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickStartGame::gameid() const {
  // @@protoc_insertion_point(field_get:gameTick.STickStartGame.gameId)
  return _internal_gameid();
}
inline void STickStartGame::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void STickStartGame::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:gameTick.STickStartGame.gameId)
}

// int32 gameStartStamp = 2;
inline void STickStartGame::clear_gamestartstamp() {
  gamestartstamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickStartGame::_internal_gamestartstamp() const {
  return gamestartstamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickStartGame::gamestartstamp() const {
  // @@protoc_insertion_point(field_get:gameTick.STickStartGame.gameStartStamp)
  return _internal_gamestartstamp();
}
inline void STickStartGame::_internal_set_gamestartstamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gamestartstamp_ = value;
}
inline void STickStartGame::set_gamestartstamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamestartstamp(value);
  // @@protoc_insertion_point(field_set:gameTick.STickStartGame.gameStartStamp)
}

// int32 OfficialStartTime = 3;
inline void STickStartGame::clear_officialstarttime() {
  officialstarttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickStartGame::_internal_officialstarttime() const {
  return officialstarttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickStartGame::officialstarttime() const {
  // @@protoc_insertion_point(field_get:gameTick.STickStartGame.OfficialStartTime)
  return _internal_officialstarttime();
}
inline void STickStartGame::_internal_set_officialstarttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  officialstarttime_ = value;
}
inline void STickStartGame::set_officialstarttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_officialstarttime(value);
  // @@protoc_insertion_point(field_set:gameTick.STickStartGame.OfficialStartTime)
}

// repeated .gameTick.BoatInfo boatInfo = 4;
inline int STickStartGame::_internal_boatinfo_size() const {
  return boatinfo_.size();
}
inline int STickStartGame::boatinfo_size() const {
  return _internal_boatinfo_size();
}
inline void STickStartGame::clear_boatinfo() {
  boatinfo_.Clear();
}
inline ::gameTick::BoatInfo* STickStartGame::mutable_boatinfo(int index) {
  // @@protoc_insertion_point(field_mutable:gameTick.STickStartGame.boatInfo)
  return boatinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::BoatInfo >*
STickStartGame::mutable_boatinfo() {
  // @@protoc_insertion_point(field_mutable_list:gameTick.STickStartGame.boatInfo)
  return &boatinfo_;
}
inline const ::gameTick::BoatInfo& STickStartGame::_internal_boatinfo(int index) const {
  return boatinfo_.Get(index);
}
inline const ::gameTick::BoatInfo& STickStartGame::boatinfo(int index) const {
  // @@protoc_insertion_point(field_get:gameTick.STickStartGame.boatInfo)
  return _internal_boatinfo(index);
}
inline ::gameTick::BoatInfo* STickStartGame::_internal_add_boatinfo() {
  return boatinfo_.Add();
}
inline ::gameTick::BoatInfo* STickStartGame::add_boatinfo() {
  // @@protoc_insertion_point(field_add:gameTick.STickStartGame.boatInfo)
  return _internal_add_boatinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gameTick::BoatInfo >&
STickStartGame::boatinfo() const {
  // @@protoc_insertion_point(field_list:gameTick.STickStartGame.boatInfo)
  return boatinfo_;
}

// int32 status = 5;
inline void STickStartGame::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickStartGame::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickStartGame::status() const {
  // @@protoc_insertion_point(field_get:gameTick.STickStartGame.status)
  return _internal_status();
}
inline void STickStartGame::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void STickStartGame::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:gameTick.STickStartGame.status)
}

// -------------------------------------------------------------------

// BoatInfo

// int32 boatId = 1;
inline void BoatInfo::clear_boatid() {
  boatid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoatInfo::_internal_boatid() const {
  return boatid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoatInfo::boatid() const {
  // @@protoc_insertion_point(field_get:gameTick.BoatInfo.boatId)
  return _internal_boatid();
}
inline void BoatInfo::_internal_set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  boatid_ = value;
}
inline void BoatInfo::set_boatid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_boatid(value);
  // @@protoc_insertion_point(field_set:gameTick.BoatInfo.boatId)
}

// int32 leftUid = 2;
inline void BoatInfo::clear_leftuid() {
  leftuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoatInfo::_internal_leftuid() const {
  return leftuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoatInfo::leftuid() const {
  // @@protoc_insertion_point(field_get:gameTick.BoatInfo.leftUid)
  return _internal_leftuid();
}
inline void BoatInfo::_internal_set_leftuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  leftuid_ = value;
}
inline void BoatInfo::set_leftuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leftuid(value);
  // @@protoc_insertion_point(field_set:gameTick.BoatInfo.leftUid)
}

// int32 rightUid = 3;
inline void BoatInfo::clear_rightuid() {
  rightuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoatInfo::_internal_rightuid() const {
  return rightuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BoatInfo::rightuid() const {
  // @@protoc_insertion_point(field_get:gameTick.BoatInfo.rightUid)
  return _internal_rightuid();
}
inline void BoatInfo::_internal_set_rightuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rightuid_ = value;
}
inline void BoatInfo::set_rightuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rightuid(value);
  // @@protoc_insertion_point(field_set:gameTick.BoatInfo.rightUid)
}

// -------------------------------------------------------------------

// STickOfficialStartGame

// int32 gameId = 1;
inline void STickOfficialStartGame::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickOfficialStartGame::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickOfficialStartGame::gameid() const {
  // @@protoc_insertion_point(field_get:gameTick.STickOfficialStartGame.gameId)
  return _internal_gameid();
}
inline void STickOfficialStartGame::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void STickOfficialStartGame::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:gameTick.STickOfficialStartGame.gameId)
}

// int32 gameOverStamp = 2;
inline void STickOfficialStartGame::clear_gameoverstamp() {
  gameoverstamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickOfficialStartGame::_internal_gameoverstamp() const {
  return gameoverstamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickOfficialStartGame::gameoverstamp() const {
  // @@protoc_insertion_point(field_get:gameTick.STickOfficialStartGame.gameOverStamp)
  return _internal_gameoverstamp();
}
inline void STickOfficialStartGame::_internal_set_gameoverstamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameoverstamp_ = value;
}
inline void STickOfficialStartGame::set_gameoverstamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameoverstamp(value);
  // @@protoc_insertion_point(field_set:gameTick.STickOfficialStartGame.gameOverStamp)
}

// -------------------------------------------------------------------

// STickGameOver

// int32 gameId = 1;
inline void STickGameOver::clear_gameid() {
  gameid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickGameOver::_internal_gameid() const {
  return gameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 STickGameOver::gameid() const {
  // @@protoc_insertion_point(field_get:gameTick.STickGameOver.gameId)
  return _internal_gameid();
}
inline void STickGameOver::_internal_set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gameid_ = value;
}
inline void STickGameOver::set_gameid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:gameTick.STickGameOver.gameId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gameTick

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gameTick_2eproto
