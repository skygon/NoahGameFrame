// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dimSearch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dimSearch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dimSearch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dimSearch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dimSearch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dimSearch_2eproto;
namespace dimSearch {
class CDimSearch;
class CDimSearchDefaultTypeInternal;
extern CDimSearchDefaultTypeInternal _CDimSearch_default_instance_;
class DimSearchRolesInfoList;
class DimSearchRolesInfoListDefaultTypeInternal;
extern DimSearchRolesInfoListDefaultTypeInternal _DimSearchRolesInfoList_default_instance_;
class SDimSearch;
class SDimSearchDefaultTypeInternal;
extern SDimSearchDefaultTypeInternal _SDimSearch_default_instance_;
}  // namespace dimSearch
PROTOBUF_NAMESPACE_OPEN
template<> ::dimSearch::CDimSearch* Arena::CreateMaybeMessage<::dimSearch::CDimSearch>(Arena*);
template<> ::dimSearch::DimSearchRolesInfoList* Arena::CreateMaybeMessage<::dimSearch::DimSearchRolesInfoList>(Arena*);
template<> ::dimSearch::SDimSearch* Arena::CreateMaybeMessage<::dimSearch::SDimSearch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dimSearch {

// ===================================================================

class DimSearchRolesInfoList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dimSearch.DimSearchRolesInfoList) */ {
 public:
  DimSearchRolesInfoList();
  virtual ~DimSearchRolesInfoList();

  DimSearchRolesInfoList(const DimSearchRolesInfoList& from);
  DimSearchRolesInfoList(DimSearchRolesInfoList&& from) noexcept
    : DimSearchRolesInfoList() {
    *this = ::std::move(from);
  }

  inline DimSearchRolesInfoList& operator=(const DimSearchRolesInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DimSearchRolesInfoList& operator=(DimSearchRolesInfoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DimSearchRolesInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DimSearchRolesInfoList* internal_default_instance() {
    return reinterpret_cast<const DimSearchRolesInfoList*>(
               &_DimSearchRolesInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DimSearchRolesInfoList& a, DimSearchRolesInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(DimSearchRolesInfoList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DimSearchRolesInfoList* New() const final {
    return CreateMaybeMessage<DimSearchRolesInfoList>(nullptr);
  }

  DimSearchRolesInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DimSearchRolesInfoList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DimSearchRolesInfoList& from);
  void MergeFrom(const DimSearchRolesInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimSearchRolesInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dimSearch.DimSearchRolesInfoList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dimSearch_2eproto);
    return ::descriptor_table_dimSearch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadUrlFieldNumber = 1,
    kNameFieldNumber = 2,
    kUidFieldNumber = 3,
    kFansFieldNumber = 4,
    kFollowFieldNumber = 5,
  };
  // string headUrl = 1;
  void clear_headurl();
  const std::string& headurl() const;
  void set_headurl(const std::string& value);
  void set_headurl(std::string&& value);
  void set_headurl(const char* value);
  void set_headurl(const char* value, size_t size);
  std::string* mutable_headurl();
  std::string* release_headurl();
  void set_allocated_headurl(std::string* headurl);
  private:
  const std::string& _internal_headurl() const;
  void _internal_set_headurl(const std::string& value);
  std::string* _internal_mutable_headurl();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fans = 4;
  void clear_fans();
  ::PROTOBUF_NAMESPACE_ID::int32 fans() const;
  void set_fans(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fans() const;
  void _internal_set_fans(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool follow = 5;
  void clear_follow();
  bool follow() const;
  void set_follow(bool value);
  private:
  bool _internal_follow() const;
  void _internal_set_follow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:dimSearch.DimSearchRolesInfoList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fans_;
  bool follow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dimSearch_2eproto;
};
// -------------------------------------------------------------------

class CDimSearch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dimSearch.CDimSearch) */ {
 public:
  CDimSearch();
  virtual ~CDimSearch();

  CDimSearch(const CDimSearch& from);
  CDimSearch(CDimSearch&& from) noexcept
    : CDimSearch() {
    *this = ::std::move(from);
  }

  inline CDimSearch& operator=(const CDimSearch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDimSearch& operator=(CDimSearch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDimSearch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDimSearch* internal_default_instance() {
    return reinterpret_cast<const CDimSearch*>(
               &_CDimSearch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CDimSearch& a, CDimSearch& b) {
    a.Swap(&b);
  }
  inline void Swap(CDimSearch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDimSearch* New() const final {
    return CreateMaybeMessage<CDimSearch>(nullptr);
  }

  CDimSearch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDimSearch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDimSearch& from);
  void MergeFrom(const CDimSearch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDimSearch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dimSearch.CDimSearch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dimSearch_2eproto);
    return ::descriptor_table_dimSearch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchFieldNumber = 1,
  };
  // string search = 1;
  void clear_search();
  const std::string& search() const;
  void set_search(const std::string& value);
  void set_search(std::string&& value);
  void set_search(const char* value);
  void set_search(const char* value, size_t size);
  std::string* mutable_search();
  std::string* release_search();
  void set_allocated_search(std::string* search);
  private:
  const std::string& _internal_search() const;
  void _internal_set_search(const std::string& value);
  std::string* _internal_mutable_search();
  public:

  // @@protoc_insertion_point(class_scope:dimSearch.CDimSearch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dimSearch_2eproto;
};
// -------------------------------------------------------------------

class SDimSearch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dimSearch.SDimSearch) */ {
 public:
  SDimSearch();
  virtual ~SDimSearch();

  SDimSearch(const SDimSearch& from);
  SDimSearch(SDimSearch&& from) noexcept
    : SDimSearch() {
    *this = ::std::move(from);
  }

  inline SDimSearch& operator=(const SDimSearch& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDimSearch& operator=(SDimSearch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDimSearch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDimSearch* internal_default_instance() {
    return reinterpret_cast<const SDimSearch*>(
               &_SDimSearch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SDimSearch& a, SDimSearch& b) {
    a.Swap(&b);
  }
  inline void Swap(SDimSearch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SDimSearch* New() const final {
    return CreateMaybeMessage<SDimSearch>(nullptr);
  }

  SDimSearch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDimSearch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDimSearch& from);
  void MergeFrom(const SDimSearch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDimSearch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dimSearch.SDimSearch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dimSearch_2eproto);
    return ::descriptor_table_dimSearch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .dimSearch.DimSearchRolesInfoList Players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::dimSearch::DimSearchRolesInfoList* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dimSearch::DimSearchRolesInfoList >*
      mutable_players();
  private:
  const ::dimSearch::DimSearchRolesInfoList& _internal_players(int index) const;
  ::dimSearch::DimSearchRolesInfoList* _internal_add_players();
  public:
  const ::dimSearch::DimSearchRolesInfoList& players(int index) const;
  ::dimSearch::DimSearchRolesInfoList* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dimSearch::DimSearchRolesInfoList >&
      players() const;

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dimSearch.SDimSearch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dimSearch::DimSearchRolesInfoList > players_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dimSearch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DimSearchRolesInfoList

// string headUrl = 1;
inline void DimSearchRolesInfoList::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DimSearchRolesInfoList::headurl() const {
  // @@protoc_insertion_point(field_get:dimSearch.DimSearchRolesInfoList.headUrl)
  return _internal_headurl();
}
inline void DimSearchRolesInfoList::set_headurl(const std::string& value) {
  _internal_set_headurl(value);
  // @@protoc_insertion_point(field_set:dimSearch.DimSearchRolesInfoList.headUrl)
}
inline std::string* DimSearchRolesInfoList::mutable_headurl() {
  // @@protoc_insertion_point(field_mutable:dimSearch.DimSearchRolesInfoList.headUrl)
  return _internal_mutable_headurl();
}
inline const std::string& DimSearchRolesInfoList::_internal_headurl() const {
  return headurl_.GetNoArena();
}
inline void DimSearchRolesInfoList::_internal_set_headurl(const std::string& value) {
  
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DimSearchRolesInfoList::set_headurl(std::string&& value) {
  
  headurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dimSearch.DimSearchRolesInfoList.headUrl)
}
inline void DimSearchRolesInfoList::set_headurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dimSearch.DimSearchRolesInfoList.headUrl)
}
inline void DimSearchRolesInfoList::set_headurl(const char* value, size_t size) {
  
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dimSearch.DimSearchRolesInfoList.headUrl)
}
inline std::string* DimSearchRolesInfoList::_internal_mutable_headurl() {
  
  return headurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DimSearchRolesInfoList::release_headurl() {
  // @@protoc_insertion_point(field_release:dimSearch.DimSearchRolesInfoList.headUrl)
  
  return headurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DimSearchRolesInfoList::set_allocated_headurl(std::string* headurl) {
  if (headurl != nullptr) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:dimSearch.DimSearchRolesInfoList.headUrl)
}

// string name = 2;
inline void DimSearchRolesInfoList::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DimSearchRolesInfoList::name() const {
  // @@protoc_insertion_point(field_get:dimSearch.DimSearchRolesInfoList.name)
  return _internal_name();
}
inline void DimSearchRolesInfoList::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dimSearch.DimSearchRolesInfoList.name)
}
inline std::string* DimSearchRolesInfoList::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dimSearch.DimSearchRolesInfoList.name)
  return _internal_mutable_name();
}
inline const std::string& DimSearchRolesInfoList::_internal_name() const {
  return name_.GetNoArena();
}
inline void DimSearchRolesInfoList::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DimSearchRolesInfoList::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dimSearch.DimSearchRolesInfoList.name)
}
inline void DimSearchRolesInfoList::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dimSearch.DimSearchRolesInfoList.name)
}
inline void DimSearchRolesInfoList::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dimSearch.DimSearchRolesInfoList.name)
}
inline std::string* DimSearchRolesInfoList::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DimSearchRolesInfoList::release_name() {
  // @@protoc_insertion_point(field_release:dimSearch.DimSearchRolesInfoList.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DimSearchRolesInfoList::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dimSearch.DimSearchRolesInfoList.name)
}

// int32 uid = 3;
inline void DimSearchRolesInfoList::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DimSearchRolesInfoList::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DimSearchRolesInfoList::uid() const {
  // @@protoc_insertion_point(field_get:dimSearch.DimSearchRolesInfoList.uid)
  return _internal_uid();
}
inline void DimSearchRolesInfoList::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void DimSearchRolesInfoList::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:dimSearch.DimSearchRolesInfoList.uid)
}

// int32 fans = 4;
inline void DimSearchRolesInfoList::clear_fans() {
  fans_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DimSearchRolesInfoList::_internal_fans() const {
  return fans_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DimSearchRolesInfoList::fans() const {
  // @@protoc_insertion_point(field_get:dimSearch.DimSearchRolesInfoList.fans)
  return _internal_fans();
}
inline void DimSearchRolesInfoList::_internal_set_fans(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fans_ = value;
}
inline void DimSearchRolesInfoList::set_fans(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fans(value);
  // @@protoc_insertion_point(field_set:dimSearch.DimSearchRolesInfoList.fans)
}

// bool follow = 5;
inline void DimSearchRolesInfoList::clear_follow() {
  follow_ = false;
}
inline bool DimSearchRolesInfoList::_internal_follow() const {
  return follow_;
}
inline bool DimSearchRolesInfoList::follow() const {
  // @@protoc_insertion_point(field_get:dimSearch.DimSearchRolesInfoList.follow)
  return _internal_follow();
}
inline void DimSearchRolesInfoList::_internal_set_follow(bool value) {
  
  follow_ = value;
}
inline void DimSearchRolesInfoList::set_follow(bool value) {
  _internal_set_follow(value);
  // @@protoc_insertion_point(field_set:dimSearch.DimSearchRolesInfoList.follow)
}

// -------------------------------------------------------------------

// CDimSearch

// string search = 1;
inline void CDimSearch::clear_search() {
  search_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CDimSearch::search() const {
  // @@protoc_insertion_point(field_get:dimSearch.CDimSearch.search)
  return _internal_search();
}
inline void CDimSearch::set_search(const std::string& value) {
  _internal_set_search(value);
  // @@protoc_insertion_point(field_set:dimSearch.CDimSearch.search)
}
inline std::string* CDimSearch::mutable_search() {
  // @@protoc_insertion_point(field_mutable:dimSearch.CDimSearch.search)
  return _internal_mutable_search();
}
inline const std::string& CDimSearch::_internal_search() const {
  return search_.GetNoArena();
}
inline void CDimSearch::_internal_set_search(const std::string& value) {
  
  search_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CDimSearch::set_search(std::string&& value) {
  
  search_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dimSearch.CDimSearch.search)
}
inline void CDimSearch::set_search(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dimSearch.CDimSearch.search)
}
inline void CDimSearch::set_search(const char* value, size_t size) {
  
  search_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dimSearch.CDimSearch.search)
}
inline std::string* CDimSearch::_internal_mutable_search() {
  
  return search_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CDimSearch::release_search() {
  // @@protoc_insertion_point(field_release:dimSearch.CDimSearch.search)
  
  return search_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CDimSearch::set_allocated_search(std::string* search) {
  if (search != nullptr) {
    
  } else {
    
  }
  search_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search);
  // @@protoc_insertion_point(field_set_allocated:dimSearch.CDimSearch.search)
}

// -------------------------------------------------------------------

// SDimSearch

// int32 code = 1;
inline void SDimSearch::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDimSearch::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SDimSearch::code() const {
  // @@protoc_insertion_point(field_get:dimSearch.SDimSearch.code)
  return _internal_code();
}
inline void SDimSearch::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SDimSearch::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:dimSearch.SDimSearch.code)
}

// repeated .dimSearch.DimSearchRolesInfoList Players = 2;
inline int SDimSearch::_internal_players_size() const {
  return players_.size();
}
inline int SDimSearch::players_size() const {
  return _internal_players_size();
}
inline void SDimSearch::clear_players() {
  players_.Clear();
}
inline ::dimSearch::DimSearchRolesInfoList* SDimSearch::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:dimSearch.SDimSearch.Players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dimSearch::DimSearchRolesInfoList >*
SDimSearch::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:dimSearch.SDimSearch.Players)
  return &players_;
}
inline const ::dimSearch::DimSearchRolesInfoList& SDimSearch::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::dimSearch::DimSearchRolesInfoList& SDimSearch::players(int index) const {
  // @@protoc_insertion_point(field_get:dimSearch.SDimSearch.Players)
  return _internal_players(index);
}
inline ::dimSearch::DimSearchRolesInfoList* SDimSearch::_internal_add_players() {
  return players_.Add();
}
inline ::dimSearch::DimSearchRolesInfoList* SDimSearch::add_players() {
  // @@protoc_insertion_point(field_add:dimSearch.SDimSearch.Players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dimSearch::DimSearchRolesInfoList >&
SDimSearch::players() const {
  // @@protoc_insertion_point(field_list:dimSearch.SDimSearch.Players)
  return players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dimSearch

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dimSearch_2eproto
