// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: avatar.proto

#include "avatar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_avatar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarPicInfo_avatar_2eproto;
namespace avatarPackage {
class BAvatarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BAvatar> _instance;
} _BAvatar_default_instance_;
class AvatarPicInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AvatarPicInfo> _instance;
} _AvatarPicInfo_default_instance_;
class CAvatarPicListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CAvatarPicList> _instance;
} _CAvatarPicList_default_instance_;
class SAvaterPicListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAvaterPicList> _instance;
} _SAvaterPicList_default_instance_;
}  // namespace avatarPackage
static void InitDefaultsscc_info_AvatarPicInfo_avatar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::avatarPackage::_AvatarPicInfo_default_instance_;
    new (ptr) ::avatarPackage::AvatarPicInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::avatarPackage::AvatarPicInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AvatarPicInfo_avatar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AvatarPicInfo_avatar_2eproto}, {}};

static void InitDefaultsscc_info_BAvatar_avatar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::avatarPackage::_BAvatar_default_instance_;
    new (ptr) ::avatarPackage::BAvatar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::avatarPackage::BAvatar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BAvatar_avatar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BAvatar_avatar_2eproto}, {}};

static void InitDefaultsscc_info_CAvatarPicList_avatar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::avatarPackage::_CAvatarPicList_default_instance_;
    new (ptr) ::avatarPackage::CAvatarPicList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::avatarPackage::CAvatarPicList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAvatarPicList_avatar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CAvatarPicList_avatar_2eproto}, {}};

static void InitDefaultsscc_info_SAvaterPicList_avatar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::avatarPackage::_SAvaterPicList_default_instance_;
    new (ptr) ::avatarPackage::SAvaterPicList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::avatarPackage::SAvaterPicList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SAvaterPicList_avatar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SAvaterPicList_avatar_2eproto}, {
      &scc_info_AvatarPicInfo_avatar_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_avatar_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_avatar_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_avatar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_avatar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::avatarPackage::BAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::avatarPackage::BAvatar, avatarkey_),
  PROTOBUF_FIELD_OFFSET(::avatarPackage::BAvatar, avatarcolor_),
  PROTOBUF_FIELD_OFFSET(::avatarPackage::BAvatar, avatarid_),
  PROTOBUF_FIELD_OFFSET(::avatarPackage::BAvatar, status_),
  PROTOBUF_FIELD_OFFSET(::avatarPackage::BAvatar, rights_),
  PROTOBUF_FIELD_OFFSET(::avatarPackage::BAvatar, icon_),
  PROTOBUF_FIELD_OFFSET(::avatarPackage::BAvatar, ntfid_),
  PROTOBUF_FIELD_OFFSET(::avatarPackage::BAvatar, timestamp_),
  PROTOBUF_FIELD_OFFSET(::avatarPackage::BAvatar, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::avatarPackage::AvatarPicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::avatarPackage::AvatarPicInfo, avatarkey_),
  PROTOBUF_FIELD_OFFSET(::avatarPackage::AvatarPicInfo, goodsid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::avatarPackage::CAvatarPicList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::avatarPackage::CAvatarPicList, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::avatarPackage::SAvaterPicList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::avatarPackage::SAvaterPicList, infos_),
  PROTOBUF_FIELD_OFFSET(::avatarPackage::SAvaterPicList, iswear_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::avatarPackage::BAvatar)},
  { 14, -1, sizeof(::avatarPackage::AvatarPicInfo)},
  { 21, -1, sizeof(::avatarPackage::CAvatarPicList)},
  { 27, -1, sizeof(::avatarPackage::SAvaterPicList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::avatarPackage::_BAvatar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::avatarPackage::_AvatarPicInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::avatarPackage::_CAvatarPicList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::avatarPackage::_SAvaterPicList_default_instance_),
};

const char descriptor_table_protodef_avatar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014avatar.proto\022\ravatarPackage\"\244\001\n\007BAvata"
  "r\022\021\n\tavatarKey\030\001 \001(\005\022\023\n\013avatarColor\030\002 \001("
  "\t\022\020\n\010avatarId\030\003 \001(\005\022\016\n\006status\030\004 \001(\005\022\016\n\006r"
  "ights\030\005 \001(\005\022\014\n\004icon\030\006 \001(\t\022\r\n\005ntfId\030\007 \001(\005"
  "\022\021\n\ttimestamp\030\010 \001(\005\022\017\n\007goodsId\030\t \001(\005\"3\n\r"
  "AvatarPicInfo\022\021\n\tavatarKey\030\001 \001(\005\022\017\n\007good"
  "sId\030\002 \001(\005\"\035\n\016CAvatarPicList\022\013\n\003uid\030\001 \001(\005"
  "\"M\n\016SAvaterPicList\022+\n\005infos\030\001 \003(\0132\034.avat"
  "arPackage.AvatarPicInfo\022\016\n\006IsWear\030\002 \001(\005B"
  "\"\n\030com.dayou.space.protobufB\006Avatarb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_avatar_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_avatar_2eproto_sccs[4] = {
  &scc_info_AvatarPicInfo_avatar_2eproto.base,
  &scc_info_BAvatar_avatar_2eproto.base,
  &scc_info_CAvatarPicList_avatar_2eproto.base,
  &scc_info_SAvaterPicList_avatar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_avatar_2eproto_once;
static bool descriptor_table_avatar_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_avatar_2eproto = {
  &descriptor_table_avatar_2eproto_initialized, descriptor_table_protodef_avatar_2eproto, "avatar.proto", 403,
  &descriptor_table_avatar_2eproto_once, descriptor_table_avatar_2eproto_sccs, descriptor_table_avatar_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_avatar_2eproto::offsets,
  file_level_metadata_avatar_2eproto, 4, file_level_enum_descriptors_avatar_2eproto, file_level_service_descriptors_avatar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_avatar_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_avatar_2eproto), true);
namespace avatarPackage {

// ===================================================================

void BAvatar::InitAsDefaultInstance() {
}
class BAvatar::_Internal {
 public:
};

BAvatar::BAvatar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:avatarPackage.BAvatar)
}
BAvatar::BAvatar(const BAvatar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  avatarcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatarcolor().empty()) {
    avatarcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarcolor_);
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  ::memcpy(&avatarkey_, &from.avatarkey_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&avatarkey_)) + sizeof(goodsid_));
  // @@protoc_insertion_point(copy_constructor:avatarPackage.BAvatar)
}

void BAvatar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BAvatar_avatar_2eproto.base);
  avatarcolor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&avatarkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&avatarkey_)) + sizeof(goodsid_));
}

BAvatar::~BAvatar() {
  // @@protoc_insertion_point(destructor:avatarPackage.BAvatar)
  SharedDtor();
}

void BAvatar::SharedDtor() {
  avatarcolor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BAvatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BAvatar& BAvatar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BAvatar_avatar_2eproto.base);
  return *internal_default_instance();
}


void BAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:avatarPackage.BAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatarcolor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&avatarkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&avatarkey_)) + sizeof(goodsid_));
  _internal_metadata_.Clear();
}

const char* BAvatar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 avatarKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string avatarColor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_avatarcolor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "avatarPackage.BAvatar.avatarColor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 avatarId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          avatarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rights = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "avatarPackage.BAvatar.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ntfId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ntfid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BAvatar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:avatarPackage.BAvatar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_avatarkey(), target);
  }

  // string avatarColor = 2;
  if (this->avatarcolor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_avatarcolor().data(), static_cast<int>(this->_internal_avatarcolor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "avatarPackage.BAvatar.avatarColor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_avatarcolor(), target);
  }

  // int32 avatarId = 3;
  if (this->avatarid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_avatarid(), target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_status(), target);
  }

  // int32 rights = 5;
  if (this->rights() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rights(), target);
  }

  // string icon = 6;
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "avatarPackage.BAvatar.icon");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_icon(), target);
  }

  // int32 ntfId = 7;
  if (this->ntfid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ntfid(), target);
  }

  // int32 timestamp = 8;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_timestamp(), target);
  }

  // int32 goodsId = 9;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:avatarPackage.BAvatar)
  return target;
}

size_t BAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avatarPackage.BAvatar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string avatarColor = 2;
  if (this->avatarcolor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_avatarcolor());
  }

  // string icon = 6;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  // int32 avatarId = 3;
  if (this->avatarid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarid());
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // int32 rights = 5;
  if (this->rights() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rights());
  }

  // int32 ntfId = 7;
  if (this->ntfid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ntfid());
  }

  // int32 timestamp = 8;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timestamp());
  }

  // int32 goodsId = 9;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BAvatar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avatarPackage.BAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const BAvatar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BAvatar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avatarPackage.BAvatar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avatarPackage.BAvatar)
    MergeFrom(*source);
  }
}

void BAvatar::MergeFrom(const BAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avatarPackage.BAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatarcolor().size() > 0) {

    avatarcolor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.avatarcolor_);
  }
  if (from.icon().size() > 0) {

    icon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
  if (from.avatarid() != 0) {
    _internal_set_avatarid(from._internal_avatarid());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.rights() != 0) {
    _internal_set_rights(from._internal_rights());
  }
  if (from.ntfid() != 0) {
    _internal_set_ntfid(from._internal_ntfid());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void BAvatar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avatarPackage.BAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BAvatar::CopyFrom(const BAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avatarPackage.BAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BAvatar::IsInitialized() const {
  return true;
}

void BAvatar::InternalSwap(BAvatar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  avatarcolor_.Swap(&other->avatarcolor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(avatarkey_, other->avatarkey_);
  swap(avatarid_, other->avatarid_);
  swap(status_, other->status_);
  swap(rights_, other->rights_);
  swap(ntfid_, other->ntfid_);
  swap(timestamp_, other->timestamp_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BAvatar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AvatarPicInfo::InitAsDefaultInstance() {
}
class AvatarPicInfo::_Internal {
 public:
};

AvatarPicInfo::AvatarPicInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:avatarPackage.AvatarPicInfo)
}
AvatarPicInfo::AvatarPicInfo(const AvatarPicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avatarkey_, &from.avatarkey_,
    static_cast<size_t>(reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&avatarkey_)) + sizeof(goodsid_));
  // @@protoc_insertion_point(copy_constructor:avatarPackage.AvatarPicInfo)
}

void AvatarPicInfo::SharedCtor() {
  ::memset(&avatarkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&avatarkey_)) + sizeof(goodsid_));
}

AvatarPicInfo::~AvatarPicInfo() {
  // @@protoc_insertion_point(destructor:avatarPackage.AvatarPicInfo)
  SharedDtor();
}

void AvatarPicInfo::SharedDtor() {
}

void AvatarPicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AvatarPicInfo& AvatarPicInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AvatarPicInfo_avatar_2eproto.base);
  return *internal_default_instance();
}


void AvatarPicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:avatarPackage.AvatarPicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avatarkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goodsid_) -
      reinterpret_cast<char*>(&avatarkey_)) + sizeof(goodsid_));
  _internal_metadata_.Clear();
}

const char* AvatarPicInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 avatarKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          avatarkey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 goodsId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          goodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AvatarPicInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:avatarPackage.AvatarPicInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_avatarkey(), target);
  }

  // int32 goodsId = 2;
  if (this->goodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_goodsid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:avatarPackage.AvatarPicInfo)
  return target;
}

size_t AvatarPicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avatarPackage.AvatarPicInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 avatarKey = 1;
  if (this->avatarkey() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_avatarkey());
  }

  // int32 goodsId = 2;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_goodsid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AvatarPicInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avatarPackage.AvatarPicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AvatarPicInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AvatarPicInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avatarPackage.AvatarPicInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avatarPackage.AvatarPicInfo)
    MergeFrom(*source);
  }
}

void AvatarPicInfo::MergeFrom(const AvatarPicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avatarPackage.AvatarPicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.avatarkey() != 0) {
    _internal_set_avatarkey(from._internal_avatarkey());
  }
  if (from.goodsid() != 0) {
    _internal_set_goodsid(from._internal_goodsid());
  }
}

void AvatarPicInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avatarPackage.AvatarPicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvatarPicInfo::CopyFrom(const AvatarPicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avatarPackage.AvatarPicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvatarPicInfo::IsInitialized() const {
  return true;
}

void AvatarPicInfo::InternalSwap(AvatarPicInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(avatarkey_, other->avatarkey_);
  swap(goodsid_, other->goodsid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvatarPicInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CAvatarPicList::InitAsDefaultInstance() {
}
class CAvatarPicList::_Internal {
 public:
};

CAvatarPicList::CAvatarPicList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:avatarPackage.CAvatarPicList)
}
CAvatarPicList::CAvatarPicList(const CAvatarPicList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:avatarPackage.CAvatarPicList)
}

void CAvatarPicList::SharedCtor() {
  uid_ = 0;
}

CAvatarPicList::~CAvatarPicList() {
  // @@protoc_insertion_point(destructor:avatarPackage.CAvatarPicList)
  SharedDtor();
}

void CAvatarPicList::SharedDtor() {
}

void CAvatarPicList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAvatarPicList& CAvatarPicList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CAvatarPicList_avatar_2eproto.base);
  return *internal_default_instance();
}


void CAvatarPicList::Clear() {
// @@protoc_insertion_point(message_clear_start:avatarPackage.CAvatarPicList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0;
  _internal_metadata_.Clear();
}

const char* CAvatarPicList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAvatarPicList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:avatarPackage.CAvatarPicList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:avatarPackage.CAvatarPicList)
  return target;
}

size_t CAvatarPicList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avatarPackage.CAvatarPicList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAvatarPicList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avatarPackage.CAvatarPicList)
  GOOGLE_DCHECK_NE(&from, this);
  const CAvatarPicList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAvatarPicList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avatarPackage.CAvatarPicList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avatarPackage.CAvatarPicList)
    MergeFrom(*source);
  }
}

void CAvatarPicList::MergeFrom(const CAvatarPicList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avatarPackage.CAvatarPicList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void CAvatarPicList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avatarPackage.CAvatarPicList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAvatarPicList::CopyFrom(const CAvatarPicList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avatarPackage.CAvatarPicList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAvatarPicList::IsInitialized() const {
  return true;
}

void CAvatarPicList::InternalSwap(CAvatarPicList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAvatarPicList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SAvaterPicList::InitAsDefaultInstance() {
}
class SAvaterPicList::_Internal {
 public:
};

SAvaterPicList::SAvaterPicList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:avatarPackage.SAvaterPicList)
}
SAvaterPicList::SAvaterPicList(const SAvaterPicList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  iswear_ = from.iswear_;
  // @@protoc_insertion_point(copy_constructor:avatarPackage.SAvaterPicList)
}

void SAvaterPicList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SAvaterPicList_avatar_2eproto.base);
  iswear_ = 0;
}

SAvaterPicList::~SAvaterPicList() {
  // @@protoc_insertion_point(destructor:avatarPackage.SAvaterPicList)
  SharedDtor();
}

void SAvaterPicList::SharedDtor() {
}

void SAvaterPicList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAvaterPicList& SAvaterPicList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAvaterPicList_avatar_2eproto.base);
  return *internal_default_instance();
}


void SAvaterPicList::Clear() {
// @@protoc_insertion_point(message_clear_start:avatarPackage.SAvaterPicList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  iswear_ = 0;
  _internal_metadata_.Clear();
}

const char* SAvaterPicList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .avatarPackage.AvatarPicInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 IsWear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iswear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAvaterPicList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:avatarPackage.SAvaterPicList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .avatarPackage.AvatarPicInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infos(i), target, stream);
  }

  // int32 IsWear = 2;
  if (this->iswear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_iswear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:avatarPackage.SAvaterPicList)
  return target;
}

size_t SAvaterPicList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:avatarPackage.SAvaterPicList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .avatarPackage.AvatarPicInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 IsWear = 2;
  if (this->iswear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_iswear());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAvaterPicList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:avatarPackage.SAvaterPicList)
  GOOGLE_DCHECK_NE(&from, this);
  const SAvaterPicList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAvaterPicList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:avatarPackage.SAvaterPicList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:avatarPackage.SAvaterPicList)
    MergeFrom(*source);
  }
}

void SAvaterPicList::MergeFrom(const SAvaterPicList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:avatarPackage.SAvaterPicList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.iswear() != 0) {
    _internal_set_iswear(from._internal_iswear());
  }
}

void SAvaterPicList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:avatarPackage.SAvaterPicList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAvaterPicList::CopyFrom(const SAvaterPicList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:avatarPackage.SAvaterPicList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAvaterPicList::IsInitialized() const {
  return true;
}

void SAvaterPicList::InternalSwap(SAvaterPicList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  swap(iswear_, other->iswear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SAvaterPicList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace avatarPackage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::avatarPackage::BAvatar* Arena::CreateMaybeMessage< ::avatarPackage::BAvatar >(Arena* arena) {
  return Arena::CreateInternal< ::avatarPackage::BAvatar >(arena);
}
template<> PROTOBUF_NOINLINE ::avatarPackage::AvatarPicInfo* Arena::CreateMaybeMessage< ::avatarPackage::AvatarPicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::avatarPackage::AvatarPicInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::avatarPackage::CAvatarPicList* Arena::CreateMaybeMessage< ::avatarPackage::CAvatarPicList >(Arena* arena) {
  return Arena::CreateInternal< ::avatarPackage::CAvatarPicList >(arena);
}
template<> PROTOBUF_NOINLINE ::avatarPackage::SAvaterPicList* Arena::CreateMaybeMessage< ::avatarPackage::SAvaterPicList >(Arena* arena) {
  return Arena::CreateInternal< ::avatarPackage::SAvaterPicList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
