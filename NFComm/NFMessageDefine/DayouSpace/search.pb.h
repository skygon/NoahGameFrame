// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_search_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_search_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_search_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_search_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_search_2eproto;
namespace search {
class BSearchUsers;
class BSearchUsersDefaultTypeInternal;
extern BSearchUsersDefaultTypeInternal _BSearchUsers_default_instance_;
class CSearchUsers;
class CSearchUsersDefaultTypeInternal;
extern CSearchUsersDefaultTypeInternal _CSearchUsers_default_instance_;
class SRecommendUsers;
class SRecommendUsersDefaultTypeInternal;
extern SRecommendUsersDefaultTypeInternal _SRecommendUsers_default_instance_;
class SSearchUsers;
class SSearchUsersDefaultTypeInternal;
extern SSearchUsersDefaultTypeInternal _SSearchUsers_default_instance_;
}  // namespace search
PROTOBUF_NAMESPACE_OPEN
template<> ::search::BSearchUsers* Arena::CreateMaybeMessage<::search::BSearchUsers>(Arena*);
template<> ::search::CSearchUsers* Arena::CreateMaybeMessage<::search::CSearchUsers>(Arena*);
template<> ::search::SRecommendUsers* Arena::CreateMaybeMessage<::search::SRecommendUsers>(Arena*);
template<> ::search::SSearchUsers* Arena::CreateMaybeMessage<::search::SSearchUsers>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace search {

// ===================================================================

class CSearchUsers :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search.CSearchUsers) */ {
 public:
  CSearchUsers();
  virtual ~CSearchUsers();

  CSearchUsers(const CSearchUsers& from);
  CSearchUsers(CSearchUsers&& from) noexcept
    : CSearchUsers() {
    *this = ::std::move(from);
  }

  inline CSearchUsers& operator=(const CSearchUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSearchUsers& operator=(CSearchUsers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSearchUsers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSearchUsers* internal_default_instance() {
    return reinterpret_cast<const CSearchUsers*>(
               &_CSearchUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSearchUsers& a, CSearchUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(CSearchUsers* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSearchUsers* New() const final {
    return CreateMaybeMessage<CSearchUsers>(nullptr);
  }

  CSearchUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSearchUsers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSearchUsers& from);
  void MergeFrom(const CSearchUsers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSearchUsers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search.CSearchUsers";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_2eproto);
    return ::descriptor_table_search_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeywordFieldNumber = 1,
    kCurPageFieldNumber = 2,
    kPageLimitFieldNumber = 3,
  };
  // string keyword = 1;
  void clear_keyword();
  const std::string& keyword() const;
  void set_keyword(const std::string& value);
  void set_keyword(std::string&& value);
  void set_keyword(const char* value);
  void set_keyword(const char* value, size_t size);
  std::string* mutable_keyword();
  std::string* release_keyword();
  void set_allocated_keyword(std::string* keyword);
  private:
  const std::string& _internal_keyword() const;
  void _internal_set_keyword(const std::string& value);
  std::string* _internal_mutable_keyword();
  public:

  // int32 curPage = 2;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 3;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:search.CSearchUsers)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyword_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class SSearchUsers :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search.SSearchUsers) */ {
 public:
  SSearchUsers();
  virtual ~SSearchUsers();

  SSearchUsers(const SSearchUsers& from);
  SSearchUsers(SSearchUsers&& from) noexcept
    : SSearchUsers() {
    *this = ::std::move(from);
  }

  inline SSearchUsers& operator=(const SSearchUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSearchUsers& operator=(SSearchUsers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSearchUsers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSearchUsers* internal_default_instance() {
    return reinterpret_cast<const SSearchUsers*>(
               &_SSearchUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSearchUsers& a, SSearchUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(SSearchUsers* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSearchUsers* New() const final {
    return CreateMaybeMessage<SSearchUsers>(nullptr);
  }

  SSearchUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSearchUsers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSearchUsers& from);
  void MergeFrom(const SSearchUsers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSearchUsers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search.SSearchUsers";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_2eproto);
    return ::descriptor_table_search_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kCurPageFieldNumber = 2,
    kPageLimitFieldNumber = 3,
  };
  // repeated .search.BSearchUsers list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::search::BSearchUsers* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::BSearchUsers >*
      mutable_list();
  private:
  const ::search::BSearchUsers& _internal_list(int index) const;
  ::search::BSearchUsers* _internal_add_list();
  public:
  const ::search::BSearchUsers& list(int index) const;
  ::search::BSearchUsers* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::BSearchUsers >&
      list() const;

  // int32 curPage = 2;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 3;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:search.SSearchUsers)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::BSearchUsers > list_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class BSearchUsers :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search.BSearchUsers) */ {
 public:
  BSearchUsers();
  virtual ~BSearchUsers();

  BSearchUsers(const BSearchUsers& from);
  BSearchUsers(BSearchUsers&& from) noexcept
    : BSearchUsers() {
    *this = ::std::move(from);
  }

  inline BSearchUsers& operator=(const BSearchUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline BSearchUsers& operator=(BSearchUsers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BSearchUsers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BSearchUsers* internal_default_instance() {
    return reinterpret_cast<const BSearchUsers*>(
               &_BSearchUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BSearchUsers& a, BSearchUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(BSearchUsers* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BSearchUsers* New() const final {
    return CreateMaybeMessage<BSearchUsers>(nullptr);
  }

  BSearchUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BSearchUsers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BSearchUsers& from);
  void MergeFrom(const BSearchUsers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BSearchUsers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search.BSearchUsers";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_2eproto);
    return ::descriptor_table_search_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadUrlFieldNumber = 1,
    kNickFieldNumber = 2,
    kHouseNameFieldNumber = 7,
    kIdentifierIdFieldNumber = 11,
    kUidFieldNumber = 3,
    kFansNumFieldNumber = 4,
    kFollowNumFieldNumber = 5,
    kIsFollowFieldNumber = 6,
    kHouseIdFieldNumber = 8,
    kHouseTypeFieldNumber = 9,
    kHouseIsOpenFieldNumber = 10,
  };
  // string headUrl = 1;
  void clear_headurl();
  const std::string& headurl() const;
  void set_headurl(const std::string& value);
  void set_headurl(std::string&& value);
  void set_headurl(const char* value);
  void set_headurl(const char* value, size_t size);
  std::string* mutable_headurl();
  std::string* release_headurl();
  void set_allocated_headurl(std::string* headurl);
  private:
  const std::string& _internal_headurl() const;
  void _internal_set_headurl(const std::string& value);
  std::string* _internal_mutable_headurl();
  public:

  // string nick = 2;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // string houseName = 7;
  void clear_housename();
  const std::string& housename() const;
  void set_housename(const std::string& value);
  void set_housename(std::string&& value);
  void set_housename(const char* value);
  void set_housename(const char* value, size_t size);
  std::string* mutable_housename();
  std::string* release_housename();
  void set_allocated_housename(std::string* housename);
  private:
  const std::string& _internal_housename() const;
  void _internal_set_housename(const std::string& value);
  std::string* _internal_mutable_housename();
  public:

  // string identifierId = 11;
  void clear_identifierid();
  const std::string& identifierid() const;
  void set_identifierid(const std::string& value);
  void set_identifierid(std::string&& value);
  void set_identifierid(const char* value);
  void set_identifierid(const char* value, size_t size);
  std::string* mutable_identifierid();
  std::string* release_identifierid();
  void set_allocated_identifierid(std::string* identifierid);
  private:
  const std::string& _internal_identifierid() const;
  void _internal_set_identifierid(const std::string& value);
  std::string* _internal_mutable_identifierid();
  public:

  // int32 uid = 3;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fansNum = 4;
  void clear_fansnum();
  ::PROTOBUF_NAMESPACE_ID::int32 fansnum() const;
  void set_fansnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fansnum() const;
  void _internal_set_fansnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 followNum = 5;
  void clear_follownum();
  ::PROTOBUF_NAMESPACE_ID::int32 follownum() const;
  void set_follownum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_follownum() const;
  void _internal_set_follownum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isFollow = 6;
  void clear_isfollow();
  ::PROTOBUF_NAMESPACE_ID::int32 isfollow() const;
  void set_isfollow(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isfollow() const;
  void _internal_set_isfollow(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseId = 8;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 9;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseIsOpen = 10;
  void clear_houseisopen();
  ::PROTOBUF_NAMESPACE_ID::int32 houseisopen() const;
  void set_houseisopen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseisopen() const;
  void _internal_set_houseisopen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:search.BSearchUsers)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr housename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifierid_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fansnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 follownum_;
  ::PROTOBUF_NAMESPACE_ID::int32 isfollow_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseisopen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class SRecommendUsers :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:search.SRecommendUsers) */ {
 public:
  SRecommendUsers();
  virtual ~SRecommendUsers();

  SRecommendUsers(const SRecommendUsers& from);
  SRecommendUsers(SRecommendUsers&& from) noexcept
    : SRecommendUsers() {
    *this = ::std::move(from);
  }

  inline SRecommendUsers& operator=(const SRecommendUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRecommendUsers& operator=(SRecommendUsers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRecommendUsers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRecommendUsers* internal_default_instance() {
    return reinterpret_cast<const SRecommendUsers*>(
               &_SRecommendUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SRecommendUsers& a, SRecommendUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(SRecommendUsers* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRecommendUsers* New() const final {
    return CreateMaybeMessage<SRecommendUsers>(nullptr);
  }

  SRecommendUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRecommendUsers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRecommendUsers& from);
  void MergeFrom(const SRecommendUsers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRecommendUsers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "search.SRecommendUsers";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_2eproto);
    return ::descriptor_table_search_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .search.BSearchUsers list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::search::BSearchUsers* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::BSearchUsers >*
      mutable_list();
  private:
  const ::search::BSearchUsers& _internal_list(int index) const;
  ::search::BSearchUsers* _internal_add_list();
  public:
  const ::search::BSearchUsers& list(int index) const;
  ::search::BSearchUsers* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::BSearchUsers >&
      list() const;

  // @@protoc_insertion_point(class_scope:search.SRecommendUsers)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::BSearchUsers > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSearchUsers

// string keyword = 1;
inline void CSearchUsers::clear_keyword() {
  keyword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CSearchUsers::keyword() const {
  // @@protoc_insertion_point(field_get:search.CSearchUsers.keyword)
  return _internal_keyword();
}
inline void CSearchUsers::set_keyword(const std::string& value) {
  _internal_set_keyword(value);
  // @@protoc_insertion_point(field_set:search.CSearchUsers.keyword)
}
inline std::string* CSearchUsers::mutable_keyword() {
  // @@protoc_insertion_point(field_mutable:search.CSearchUsers.keyword)
  return _internal_mutable_keyword();
}
inline const std::string& CSearchUsers::_internal_keyword() const {
  return keyword_.GetNoArena();
}
inline void CSearchUsers::_internal_set_keyword(const std::string& value) {
  
  keyword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CSearchUsers::set_keyword(std::string&& value) {
  
  keyword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:search.CSearchUsers.keyword)
}
inline void CSearchUsers::set_keyword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  keyword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:search.CSearchUsers.keyword)
}
inline void CSearchUsers::set_keyword(const char* value, size_t size) {
  
  keyword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:search.CSearchUsers.keyword)
}
inline std::string* CSearchUsers::_internal_mutable_keyword() {
  
  return keyword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CSearchUsers::release_keyword() {
  // @@protoc_insertion_point(field_release:search.CSearchUsers.keyword)
  
  return keyword_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CSearchUsers::set_allocated_keyword(std::string* keyword) {
  if (keyword != nullptr) {
    
  } else {
    
  }
  keyword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyword);
  // @@protoc_insertion_point(field_set_allocated:search.CSearchUsers.keyword)
}

// int32 curPage = 2;
inline void CSearchUsers::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSearchUsers::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSearchUsers::curpage() const {
  // @@protoc_insertion_point(field_get:search.CSearchUsers.curPage)
  return _internal_curpage();
}
inline void CSearchUsers::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void CSearchUsers::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:search.CSearchUsers.curPage)
}

// int32 pageLimit = 3;
inline void CSearchUsers::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSearchUsers::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSearchUsers::pagelimit() const {
  // @@protoc_insertion_point(field_get:search.CSearchUsers.pageLimit)
  return _internal_pagelimit();
}
inline void CSearchUsers::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void CSearchUsers::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:search.CSearchUsers.pageLimit)
}

// -------------------------------------------------------------------

// SSearchUsers

// repeated .search.BSearchUsers list = 1;
inline int SSearchUsers::_internal_list_size() const {
  return list_.size();
}
inline int SSearchUsers::list_size() const {
  return _internal_list_size();
}
inline void SSearchUsers::clear_list() {
  list_.Clear();
}
inline ::search::BSearchUsers* SSearchUsers::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:search.SSearchUsers.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::BSearchUsers >*
SSearchUsers::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:search.SSearchUsers.list)
  return &list_;
}
inline const ::search::BSearchUsers& SSearchUsers::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::search::BSearchUsers& SSearchUsers::list(int index) const {
  // @@protoc_insertion_point(field_get:search.SSearchUsers.list)
  return _internal_list(index);
}
inline ::search::BSearchUsers* SSearchUsers::_internal_add_list() {
  return list_.Add();
}
inline ::search::BSearchUsers* SSearchUsers::add_list() {
  // @@protoc_insertion_point(field_add:search.SSearchUsers.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::BSearchUsers >&
SSearchUsers::list() const {
  // @@protoc_insertion_point(field_list:search.SSearchUsers.list)
  return list_;
}

// int32 curPage = 2;
inline void SSearchUsers::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSearchUsers::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSearchUsers::curpage() const {
  // @@protoc_insertion_point(field_get:search.SSearchUsers.curPage)
  return _internal_curpage();
}
inline void SSearchUsers::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void SSearchUsers::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:search.SSearchUsers.curPage)
}

// int32 pageLimit = 3;
inline void SSearchUsers::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSearchUsers::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSearchUsers::pagelimit() const {
  // @@protoc_insertion_point(field_get:search.SSearchUsers.pageLimit)
  return _internal_pagelimit();
}
inline void SSearchUsers::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void SSearchUsers::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:search.SSearchUsers.pageLimit)
}

// -------------------------------------------------------------------

// BSearchUsers

// string headUrl = 1;
inline void BSearchUsers::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BSearchUsers::headurl() const {
  // @@protoc_insertion_point(field_get:search.BSearchUsers.headUrl)
  return _internal_headurl();
}
inline void BSearchUsers::set_headurl(const std::string& value) {
  _internal_set_headurl(value);
  // @@protoc_insertion_point(field_set:search.BSearchUsers.headUrl)
}
inline std::string* BSearchUsers::mutable_headurl() {
  // @@protoc_insertion_point(field_mutable:search.BSearchUsers.headUrl)
  return _internal_mutable_headurl();
}
inline const std::string& BSearchUsers::_internal_headurl() const {
  return headurl_.GetNoArena();
}
inline void BSearchUsers::_internal_set_headurl(const std::string& value) {
  
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BSearchUsers::set_headurl(std::string&& value) {
  
  headurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:search.BSearchUsers.headUrl)
}
inline void BSearchUsers::set_headurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:search.BSearchUsers.headUrl)
}
inline void BSearchUsers::set_headurl(const char* value, size_t size) {
  
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:search.BSearchUsers.headUrl)
}
inline std::string* BSearchUsers::_internal_mutable_headurl() {
  
  return headurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BSearchUsers::release_headurl() {
  // @@protoc_insertion_point(field_release:search.BSearchUsers.headUrl)
  
  return headurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BSearchUsers::set_allocated_headurl(std::string* headurl) {
  if (headurl != nullptr) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:search.BSearchUsers.headUrl)
}

// string nick = 2;
inline void BSearchUsers::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BSearchUsers::nick() const {
  // @@protoc_insertion_point(field_get:search.BSearchUsers.nick)
  return _internal_nick();
}
inline void BSearchUsers::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:search.BSearchUsers.nick)
}
inline std::string* BSearchUsers::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:search.BSearchUsers.nick)
  return _internal_mutable_nick();
}
inline const std::string& BSearchUsers::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void BSearchUsers::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BSearchUsers::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:search.BSearchUsers.nick)
}
inline void BSearchUsers::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:search.BSearchUsers.nick)
}
inline void BSearchUsers::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:search.BSearchUsers.nick)
}
inline std::string* BSearchUsers::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BSearchUsers::release_nick() {
  // @@protoc_insertion_point(field_release:search.BSearchUsers.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BSearchUsers::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:search.BSearchUsers.nick)
}

// int32 uid = 3;
inline void BSearchUsers::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::uid() const {
  // @@protoc_insertion_point(field_get:search.BSearchUsers.uid)
  return _internal_uid();
}
inline void BSearchUsers::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void BSearchUsers::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:search.BSearchUsers.uid)
}

// int32 fansNum = 4;
inline void BSearchUsers::clear_fansnum() {
  fansnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::_internal_fansnum() const {
  return fansnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::fansnum() const {
  // @@protoc_insertion_point(field_get:search.BSearchUsers.fansNum)
  return _internal_fansnum();
}
inline void BSearchUsers::_internal_set_fansnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fansnum_ = value;
}
inline void BSearchUsers::set_fansnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fansnum(value);
  // @@protoc_insertion_point(field_set:search.BSearchUsers.fansNum)
}

// int32 followNum = 5;
inline void BSearchUsers::clear_follownum() {
  follownum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::_internal_follownum() const {
  return follownum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::follownum() const {
  // @@protoc_insertion_point(field_get:search.BSearchUsers.followNum)
  return _internal_follownum();
}
inline void BSearchUsers::_internal_set_follownum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  follownum_ = value;
}
inline void BSearchUsers::set_follownum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_follownum(value);
  // @@protoc_insertion_point(field_set:search.BSearchUsers.followNum)
}

// int32 isFollow = 6;
inline void BSearchUsers::clear_isfollow() {
  isfollow_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::_internal_isfollow() const {
  return isfollow_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::isfollow() const {
  // @@protoc_insertion_point(field_get:search.BSearchUsers.isFollow)
  return _internal_isfollow();
}
inline void BSearchUsers::_internal_set_isfollow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isfollow_ = value;
}
inline void BSearchUsers::set_isfollow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isfollow(value);
  // @@protoc_insertion_point(field_set:search.BSearchUsers.isFollow)
}

// string houseName = 7;
inline void BSearchUsers::clear_housename() {
  housename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BSearchUsers::housename() const {
  // @@protoc_insertion_point(field_get:search.BSearchUsers.houseName)
  return _internal_housename();
}
inline void BSearchUsers::set_housename(const std::string& value) {
  _internal_set_housename(value);
  // @@protoc_insertion_point(field_set:search.BSearchUsers.houseName)
}
inline std::string* BSearchUsers::mutable_housename() {
  // @@protoc_insertion_point(field_mutable:search.BSearchUsers.houseName)
  return _internal_mutable_housename();
}
inline const std::string& BSearchUsers::_internal_housename() const {
  return housename_.GetNoArena();
}
inline void BSearchUsers::_internal_set_housename(const std::string& value) {
  
  housename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BSearchUsers::set_housename(std::string&& value) {
  
  housename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:search.BSearchUsers.houseName)
}
inline void BSearchUsers::set_housename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  housename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:search.BSearchUsers.houseName)
}
inline void BSearchUsers::set_housename(const char* value, size_t size) {
  
  housename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:search.BSearchUsers.houseName)
}
inline std::string* BSearchUsers::_internal_mutable_housename() {
  
  return housename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BSearchUsers::release_housename() {
  // @@protoc_insertion_point(field_release:search.BSearchUsers.houseName)
  
  return housename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BSearchUsers::set_allocated_housename(std::string* housename) {
  if (housename != nullptr) {
    
  } else {
    
  }
  housename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), housename);
  // @@protoc_insertion_point(field_set_allocated:search.BSearchUsers.houseName)
}

// int32 houseId = 8;
inline void BSearchUsers::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::houseid() const {
  // @@protoc_insertion_point(field_get:search.BSearchUsers.houseId)
  return _internal_houseid();
}
inline void BSearchUsers::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void BSearchUsers::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:search.BSearchUsers.houseId)
}

// int32 houseType = 9;
inline void BSearchUsers::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::housetype() const {
  // @@protoc_insertion_point(field_get:search.BSearchUsers.houseType)
  return _internal_housetype();
}
inline void BSearchUsers::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void BSearchUsers::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:search.BSearchUsers.houseType)
}

// int32 houseIsOpen = 10;
inline void BSearchUsers::clear_houseisopen() {
  houseisopen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::_internal_houseisopen() const {
  return houseisopen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BSearchUsers::houseisopen() const {
  // @@protoc_insertion_point(field_get:search.BSearchUsers.houseIsOpen)
  return _internal_houseisopen();
}
inline void BSearchUsers::_internal_set_houseisopen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseisopen_ = value;
}
inline void BSearchUsers::set_houseisopen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseisopen(value);
  // @@protoc_insertion_point(field_set:search.BSearchUsers.houseIsOpen)
}

// string identifierId = 11;
inline void BSearchUsers::clear_identifierid() {
  identifierid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BSearchUsers::identifierid() const {
  // @@protoc_insertion_point(field_get:search.BSearchUsers.identifierId)
  return _internal_identifierid();
}
inline void BSearchUsers::set_identifierid(const std::string& value) {
  _internal_set_identifierid(value);
  // @@protoc_insertion_point(field_set:search.BSearchUsers.identifierId)
}
inline std::string* BSearchUsers::mutable_identifierid() {
  // @@protoc_insertion_point(field_mutable:search.BSearchUsers.identifierId)
  return _internal_mutable_identifierid();
}
inline const std::string& BSearchUsers::_internal_identifierid() const {
  return identifierid_.GetNoArena();
}
inline void BSearchUsers::_internal_set_identifierid(const std::string& value) {
  
  identifierid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BSearchUsers::set_identifierid(std::string&& value) {
  
  identifierid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:search.BSearchUsers.identifierId)
}
inline void BSearchUsers::set_identifierid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identifierid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:search.BSearchUsers.identifierId)
}
inline void BSearchUsers::set_identifierid(const char* value, size_t size) {
  
  identifierid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:search.BSearchUsers.identifierId)
}
inline std::string* BSearchUsers::_internal_mutable_identifierid() {
  
  return identifierid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BSearchUsers::release_identifierid() {
  // @@protoc_insertion_point(field_release:search.BSearchUsers.identifierId)
  
  return identifierid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BSearchUsers::set_allocated_identifierid(std::string* identifierid) {
  if (identifierid != nullptr) {
    
  } else {
    
  }
  identifierid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifierid);
  // @@protoc_insertion_point(field_set_allocated:search.BSearchUsers.identifierId)
}

// -------------------------------------------------------------------

// SRecommendUsers

// repeated .search.BSearchUsers list = 1;
inline int SRecommendUsers::_internal_list_size() const {
  return list_.size();
}
inline int SRecommendUsers::list_size() const {
  return _internal_list_size();
}
inline void SRecommendUsers::clear_list() {
  list_.Clear();
}
inline ::search::BSearchUsers* SRecommendUsers::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:search.SRecommendUsers.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::BSearchUsers >*
SRecommendUsers::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:search.SRecommendUsers.list)
  return &list_;
}
inline const ::search::BSearchUsers& SRecommendUsers::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::search::BSearchUsers& SRecommendUsers::list(int index) const {
  // @@protoc_insertion_point(field_get:search.SRecommendUsers.list)
  return _internal_list(index);
}
inline ::search::BSearchUsers* SRecommendUsers::_internal_add_list() {
  return list_.Add();
}
inline ::search::BSearchUsers* SRecommendUsers::add_list() {
  // @@protoc_insertion_point(field_add:search.SRecommendUsers.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::search::BSearchUsers >&
SRecommendUsers::list() const {
  // @@protoc_insertion_point(field_list:search.SRecommendUsers.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace search

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_search_2eproto
