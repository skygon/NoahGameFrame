// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nft_2eproto;
namespace nft {
class CHouseNftList;
class CHouseNftListDefaultTypeInternal;
extern CHouseNftListDefaultTypeInternal _CHouseNftList_default_instance_;
class SHouseNftList;
class SHouseNftListDefaultTypeInternal;
extern SHouseNftListDefaultTypeInternal _SHouseNftList_default_instance_;
class SMyNftList;
class SMyNftListDefaultTypeInternal;
extern SMyNftListDefaultTypeInternal _SMyNftList_default_instance_;
class nftMsg;
class nftMsgDefaultTypeInternal;
extern nftMsgDefaultTypeInternal _nftMsg_default_instance_;
}  // namespace nft
PROTOBUF_NAMESPACE_OPEN
template<> ::nft::CHouseNftList* Arena::CreateMaybeMessage<::nft::CHouseNftList>(Arena*);
template<> ::nft::SHouseNftList* Arena::CreateMaybeMessage<::nft::SHouseNftList>(Arena*);
template<> ::nft::SMyNftList* Arena::CreateMaybeMessage<::nft::SMyNftList>(Arena*);
template<> ::nft::nftMsg* Arena::CreateMaybeMessage<::nft::nftMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nft {

// ===================================================================

class nftMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nft.nftMsg) */ {
 public:
  nftMsg();
  virtual ~nftMsg();

  nftMsg(const nftMsg& from);
  nftMsg(nftMsg&& from) noexcept
    : nftMsg() {
    *this = ::std::move(from);
  }

  inline nftMsg& operator=(const nftMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline nftMsg& operator=(nftMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const nftMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const nftMsg* internal_default_instance() {
    return reinterpret_cast<const nftMsg*>(
               &_nftMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(nftMsg& a, nftMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(nftMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline nftMsg* New() const final {
    return CreateMaybeMessage<nftMsg>(nullptr);
  }

  nftMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<nftMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const nftMsg& from);
  void MergeFrom(const nftMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nftMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nft.nftMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nft_2eproto);
    return ::descriptor_table_nft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 7,
    kImageFieldNumber = 8,
    kResourceFieldNumber = 10,
    kNumberFieldNumber = 11,
    kCreatedAtFieldNumber = 12,
    kCoverAndroidFieldNumber = 13,
    kHouseNameFieldNumber = 17,
    kResourceFbxFieldNumber = 18,
    kIdFieldNumber = 1,
    kNftIdFieldNumber = 2,
    kExtraThingFieldNumber = 3,
    kIssueNumFieldNumber = 5,
    kUidFieldNumber = 6,
    kResourceTypeFieldNumber = 9,
    kLocationSortFieldNumber = 14,
    kHouseNftRefIdFieldNumber = 15,
    kHouseIdFieldNumber = 16,
  };
  // string name = 7;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string image = 8;
  void clear_image();
  const std::string& image() const;
  void set_image(const std::string& value);
  void set_image(std::string&& value);
  void set_image(const char* value);
  void set_image(const char* value, size_t size);
  std::string* mutable_image();
  std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string resource = 10;
  void clear_resource();
  const std::string& resource() const;
  void set_resource(const std::string& value);
  void set_resource(std::string&& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  std::string* mutable_resource();
  std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string number = 11;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // string createdAt = 12;
  void clear_createdat();
  const std::string& createdat() const;
  void set_createdat(const std::string& value);
  void set_createdat(std::string&& value);
  void set_createdat(const char* value);
  void set_createdat(const char* value, size_t size);
  std::string* mutable_createdat();
  std::string* release_createdat();
  void set_allocated_createdat(std::string* createdat);
  private:
  const std::string& _internal_createdat() const;
  void _internal_set_createdat(const std::string& value);
  std::string* _internal_mutable_createdat();
  public:

  // string coverAndroid = 13;
  void clear_coverandroid();
  const std::string& coverandroid() const;
  void set_coverandroid(const std::string& value);
  void set_coverandroid(std::string&& value);
  void set_coverandroid(const char* value);
  void set_coverandroid(const char* value, size_t size);
  std::string* mutable_coverandroid();
  std::string* release_coverandroid();
  void set_allocated_coverandroid(std::string* coverandroid);
  private:
  const std::string& _internal_coverandroid() const;
  void _internal_set_coverandroid(const std::string& value);
  std::string* _internal_mutable_coverandroid();
  public:

  // string houseName = 17;
  void clear_housename();
  const std::string& housename() const;
  void set_housename(const std::string& value);
  void set_housename(std::string&& value);
  void set_housename(const char* value);
  void set_housename(const char* value, size_t size);
  std::string* mutable_housename();
  std::string* release_housename();
  void set_allocated_housename(std::string* housename);
  private:
  const std::string& _internal_housename() const;
  void _internal_set_housename(const std::string& value);
  std::string* _internal_mutable_housename();
  public:

  // string resourceFbx = 18;
  void clear_resourcefbx();
  const std::string& resourcefbx() const;
  void set_resourcefbx(const std::string& value);
  void set_resourcefbx(std::string&& value);
  void set_resourcefbx(const char* value);
  void set_resourcefbx(const char* value, size_t size);
  std::string* mutable_resourcefbx();
  std::string* release_resourcefbx();
  void set_allocated_resourcefbx(std::string* resourcefbx);
  private:
  const std::string& _internal_resourcefbx() const;
  void _internal_set_resourcefbx(const std::string& value);
  std::string* _internal_mutable_resourcefbx();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nftId = 2;
  void clear_nftid();
  ::PROTOBUF_NAMESPACE_ID::int32 nftid() const;
  void set_nftid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nftid() const;
  void _internal_set_nftid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 extraThing = 3;
  void clear_extrathing();
  ::PROTOBUF_NAMESPACE_ID::int32 extrathing() const;
  void set_extrathing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extrathing() const;
  void _internal_set_extrathing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 issueNum = 5;
  void clear_issuenum();
  ::PROTOBUF_NAMESPACE_ID::int32 issuenum() const;
  void set_issuenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_issuenum() const;
  void _internal_set_issuenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 6;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 resourceType = 9;
  void clear_resourcetype();
  ::PROTOBUF_NAMESPACE_ID::int32 resourcetype() const;
  void set_resourcetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_resourcetype() const;
  void _internal_set_resourcetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 locationSort = 14;
  void clear_locationsort();
  ::PROTOBUF_NAMESPACE_ID::int32 locationsort() const;
  void set_locationsort(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_locationsort() const;
  void _internal_set_locationsort(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseNftRefId = 15;
  void clear_housenftrefid();
  ::PROTOBUF_NAMESPACE_ID::int32 housenftrefid() const;
  void set_housenftrefid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housenftrefid() const;
  void _internal_set_housenftrefid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseId = 16;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nft.nftMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coverandroid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr housename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourcefbx_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 nftid_;
  ::PROTOBUF_NAMESPACE_ID::int32 extrathing_;
  ::PROTOBUF_NAMESPACE_ID::int32 issuenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 resourcetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 locationsort_;
  ::PROTOBUF_NAMESPACE_ID::int32 housenftrefid_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nft_2eproto;
};
// -------------------------------------------------------------------

class SMyNftList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nft.SMyNftList) */ {
 public:
  SMyNftList();
  virtual ~SMyNftList();

  SMyNftList(const SMyNftList& from);
  SMyNftList(SMyNftList&& from) noexcept
    : SMyNftList() {
    *this = ::std::move(from);
  }

  inline SMyNftList& operator=(const SMyNftList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMyNftList& operator=(SMyNftList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMyNftList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMyNftList* internal_default_instance() {
    return reinterpret_cast<const SMyNftList*>(
               &_SMyNftList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SMyNftList& a, SMyNftList& b) {
    a.Swap(&b);
  }
  inline void Swap(SMyNftList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMyNftList* New() const final {
    return CreateMaybeMessage<SMyNftList>(nullptr);
  }

  SMyNftList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMyNftList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMyNftList& from);
  void MergeFrom(const SMyNftList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMyNftList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nft.SMyNftList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nft_2eproto);
    return ::descriptor_table_nft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyNftListFieldNumber = 1,
  };
  // repeated .nft.nftMsg myNftList = 1;
  int mynftlist_size() const;
  private:
  int _internal_mynftlist_size() const;
  public:
  void clear_mynftlist();
  ::nft::nftMsg* mutable_mynftlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nft::nftMsg >*
      mutable_mynftlist();
  private:
  const ::nft::nftMsg& _internal_mynftlist(int index) const;
  ::nft::nftMsg* _internal_add_mynftlist();
  public:
  const ::nft::nftMsg& mynftlist(int index) const;
  ::nft::nftMsg* add_mynftlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nft::nftMsg >&
      mynftlist() const;

  // @@protoc_insertion_point(class_scope:nft.SMyNftList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nft::nftMsg > mynftlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nft_2eproto;
};
// -------------------------------------------------------------------

class CHouseNftList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nft.CHouseNftList) */ {
 public:
  CHouseNftList();
  virtual ~CHouseNftList();

  CHouseNftList(const CHouseNftList& from);
  CHouseNftList(CHouseNftList&& from) noexcept
    : CHouseNftList() {
    *this = ::std::move(from);
  }

  inline CHouseNftList& operator=(const CHouseNftList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHouseNftList& operator=(CHouseNftList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHouseNftList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHouseNftList* internal_default_instance() {
    return reinterpret_cast<const CHouseNftList*>(
               &_CHouseNftList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CHouseNftList& a, CHouseNftList& b) {
    a.Swap(&b);
  }
  inline void Swap(CHouseNftList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHouseNftList* New() const final {
    return CreateMaybeMessage<CHouseNftList>(nullptr);
  }

  CHouseNftList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHouseNftList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHouseNftList& from);
  void MergeFrom(const CHouseNftList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHouseNftList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nft.CHouseNftList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nft_2eproto);
    return ::descriptor_table_nft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:nft.CHouseNftList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nft_2eproto;
};
// -------------------------------------------------------------------

class SHouseNftList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nft.SHouseNftList) */ {
 public:
  SHouseNftList();
  virtual ~SHouseNftList();

  SHouseNftList(const SHouseNftList& from);
  SHouseNftList(SHouseNftList&& from) noexcept
    : SHouseNftList() {
    *this = ::std::move(from);
  }

  inline SHouseNftList& operator=(const SHouseNftList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHouseNftList& operator=(SHouseNftList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SHouseNftList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SHouseNftList* internal_default_instance() {
    return reinterpret_cast<const SHouseNftList*>(
               &_SHouseNftList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SHouseNftList& a, SHouseNftList& b) {
    a.Swap(&b);
  }
  inline void Swap(SHouseNftList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SHouseNftList* New() const final {
    return CreateMaybeMessage<SHouseNftList>(nullptr);
  }

  SHouseNftList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SHouseNftList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SHouseNftList& from);
  void MergeFrom(const SHouseNftList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHouseNftList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nft.SHouseNftList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nft_2eproto);
    return ::descriptor_table_nft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseNftListFieldNumber = 1,
  };
  // repeated .nft.nftMsg houseNftList = 1;
  int housenftlist_size() const;
  private:
  int _internal_housenftlist_size() const;
  public:
  void clear_housenftlist();
  ::nft::nftMsg* mutable_housenftlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nft::nftMsg >*
      mutable_housenftlist();
  private:
  const ::nft::nftMsg& _internal_housenftlist(int index) const;
  ::nft::nftMsg* _internal_add_housenftlist();
  public:
  const ::nft::nftMsg& housenftlist(int index) const;
  ::nft::nftMsg* add_housenftlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nft::nftMsg >&
      housenftlist() const;

  // @@protoc_insertion_point(class_scope:nft.SHouseNftList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nft::nftMsg > housenftlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_nft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// nftMsg

// int32 id = 1;
inline void nftMsg::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::id() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.id)
  return _internal_id();
}
inline void nftMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void nftMsg::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.id)
}

// int32 nftId = 2;
inline void nftMsg::clear_nftid() {
  nftid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::_internal_nftid() const {
  return nftid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::nftid() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.nftId)
  return _internal_nftid();
}
inline void nftMsg::_internal_set_nftid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nftid_ = value;
}
inline void nftMsg::set_nftid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nftid(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.nftId)
}

// int32 extraThing = 3;
inline void nftMsg::clear_extrathing() {
  extrathing_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::_internal_extrathing() const {
  return extrathing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::extrathing() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.extraThing)
  return _internal_extrathing();
}
inline void nftMsg::_internal_set_extrathing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extrathing_ = value;
}
inline void nftMsg::set_extrathing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extrathing(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.extraThing)
}

// int32 issueNum = 5;
inline void nftMsg::clear_issuenum() {
  issuenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::_internal_issuenum() const {
  return issuenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::issuenum() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.issueNum)
  return _internal_issuenum();
}
inline void nftMsg::_internal_set_issuenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  issuenum_ = value;
}
inline void nftMsg::set_issuenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_issuenum(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.issueNum)
}

// int32 uid = 6;
inline void nftMsg::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::uid() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.uid)
  return _internal_uid();
}
inline void nftMsg::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void nftMsg::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.uid)
}

// string name = 7;
inline void nftMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& nftMsg::name() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.name)
  return _internal_name();
}
inline void nftMsg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.name)
}
inline std::string* nftMsg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:nft.nftMsg.name)
  return _internal_mutable_name();
}
inline const std::string& nftMsg::_internal_name() const {
  return name_.GetNoArena();
}
inline void nftMsg::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void nftMsg::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nft.nftMsg.name)
}
inline void nftMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nft.nftMsg.name)
}
inline void nftMsg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nft.nftMsg.name)
}
inline std::string* nftMsg::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* nftMsg::release_name() {
  // @@protoc_insertion_point(field_release:nft.nftMsg.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void nftMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nft.nftMsg.name)
}

// string image = 8;
inline void nftMsg::clear_image() {
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& nftMsg::image() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.image)
  return _internal_image();
}
inline void nftMsg::set_image(const std::string& value) {
  _internal_set_image(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.image)
}
inline std::string* nftMsg::mutable_image() {
  // @@protoc_insertion_point(field_mutable:nft.nftMsg.image)
  return _internal_mutable_image();
}
inline const std::string& nftMsg::_internal_image() const {
  return image_.GetNoArena();
}
inline void nftMsg::_internal_set_image(const std::string& value) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void nftMsg::set_image(std::string&& value) {
  
  image_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nft.nftMsg.image)
}
inline void nftMsg::set_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nft.nftMsg.image)
}
inline void nftMsg::set_image(const char* value, size_t size) {
  
  image_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nft.nftMsg.image)
}
inline std::string* nftMsg::_internal_mutable_image() {
  
  return image_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* nftMsg::release_image() {
  // @@protoc_insertion_point(field_release:nft.nftMsg.image)
  
  return image_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void nftMsg::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:nft.nftMsg.image)
}

// int32 resourceType = 9;
inline void nftMsg::clear_resourcetype() {
  resourcetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::_internal_resourcetype() const {
  return resourcetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::resourcetype() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.resourceType)
  return _internal_resourcetype();
}
inline void nftMsg::_internal_set_resourcetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resourcetype_ = value;
}
inline void nftMsg::set_resourcetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_resourcetype(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.resourceType)
}

// string resource = 10;
inline void nftMsg::clear_resource() {
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& nftMsg::resource() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.resource)
  return _internal_resource();
}
inline void nftMsg::set_resource(const std::string& value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.resource)
}
inline std::string* nftMsg::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:nft.nftMsg.resource)
  return _internal_mutable_resource();
}
inline const std::string& nftMsg::_internal_resource() const {
  return resource_.GetNoArena();
}
inline void nftMsg::_internal_set_resource(const std::string& value) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void nftMsg::set_resource(std::string&& value) {
  
  resource_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nft.nftMsg.resource)
}
inline void nftMsg::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nft.nftMsg.resource)
}
inline void nftMsg::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nft.nftMsg.resource)
}
inline std::string* nftMsg::_internal_mutable_resource() {
  
  return resource_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* nftMsg::release_resource() {
  // @@protoc_insertion_point(field_release:nft.nftMsg.resource)
  
  return resource_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void nftMsg::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:nft.nftMsg.resource)
}

// string number = 11;
inline void nftMsg::clear_number() {
  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& nftMsg::number() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.number)
  return _internal_number();
}
inline void nftMsg::set_number(const std::string& value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.number)
}
inline std::string* nftMsg::mutable_number() {
  // @@protoc_insertion_point(field_mutable:nft.nftMsg.number)
  return _internal_mutable_number();
}
inline const std::string& nftMsg::_internal_number() const {
  return number_.GetNoArena();
}
inline void nftMsg::_internal_set_number(const std::string& value) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void nftMsg::set_number(std::string&& value) {
  
  number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nft.nftMsg.number)
}
inline void nftMsg::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nft.nftMsg.number)
}
inline void nftMsg::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nft.nftMsg.number)
}
inline std::string* nftMsg::_internal_mutable_number() {
  
  return number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* nftMsg::release_number() {
  // @@protoc_insertion_point(field_release:nft.nftMsg.number)
  
  return number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void nftMsg::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:nft.nftMsg.number)
}

// string createdAt = 12;
inline void nftMsg::clear_createdat() {
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& nftMsg::createdat() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.createdAt)
  return _internal_createdat();
}
inline void nftMsg::set_createdat(const std::string& value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.createdAt)
}
inline std::string* nftMsg::mutable_createdat() {
  // @@protoc_insertion_point(field_mutable:nft.nftMsg.createdAt)
  return _internal_mutable_createdat();
}
inline const std::string& nftMsg::_internal_createdat() const {
  return createdat_.GetNoArena();
}
inline void nftMsg::_internal_set_createdat(const std::string& value) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void nftMsg::set_createdat(std::string&& value) {
  
  createdat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nft.nftMsg.createdAt)
}
inline void nftMsg::set_createdat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nft.nftMsg.createdAt)
}
inline void nftMsg::set_createdat(const char* value, size_t size) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nft.nftMsg.createdAt)
}
inline std::string* nftMsg::_internal_mutable_createdat() {
  
  return createdat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* nftMsg::release_createdat() {
  // @@protoc_insertion_point(field_release:nft.nftMsg.createdAt)
  
  return createdat_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void nftMsg::set_allocated_createdat(std::string* createdat) {
  if (createdat != nullptr) {
    
  } else {
    
  }
  createdat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdat);
  // @@protoc_insertion_point(field_set_allocated:nft.nftMsg.createdAt)
}

// string coverAndroid = 13;
inline void nftMsg::clear_coverandroid() {
  coverandroid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& nftMsg::coverandroid() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.coverAndroid)
  return _internal_coverandroid();
}
inline void nftMsg::set_coverandroid(const std::string& value) {
  _internal_set_coverandroid(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.coverAndroid)
}
inline std::string* nftMsg::mutable_coverandroid() {
  // @@protoc_insertion_point(field_mutable:nft.nftMsg.coverAndroid)
  return _internal_mutable_coverandroid();
}
inline const std::string& nftMsg::_internal_coverandroid() const {
  return coverandroid_.GetNoArena();
}
inline void nftMsg::_internal_set_coverandroid(const std::string& value) {
  
  coverandroid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void nftMsg::set_coverandroid(std::string&& value) {
  
  coverandroid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nft.nftMsg.coverAndroid)
}
inline void nftMsg::set_coverandroid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  coverandroid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nft.nftMsg.coverAndroid)
}
inline void nftMsg::set_coverandroid(const char* value, size_t size) {
  
  coverandroid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nft.nftMsg.coverAndroid)
}
inline std::string* nftMsg::_internal_mutable_coverandroid() {
  
  return coverandroid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* nftMsg::release_coverandroid() {
  // @@protoc_insertion_point(field_release:nft.nftMsg.coverAndroid)
  
  return coverandroid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void nftMsg::set_allocated_coverandroid(std::string* coverandroid) {
  if (coverandroid != nullptr) {
    
  } else {
    
  }
  coverandroid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coverandroid);
  // @@protoc_insertion_point(field_set_allocated:nft.nftMsg.coverAndroid)
}

// int32 locationSort = 14;
inline void nftMsg::clear_locationsort() {
  locationsort_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::_internal_locationsort() const {
  return locationsort_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::locationsort() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.locationSort)
  return _internal_locationsort();
}
inline void nftMsg::_internal_set_locationsort(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  locationsort_ = value;
}
inline void nftMsg::set_locationsort(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_locationsort(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.locationSort)
}

// int32 houseNftRefId = 15;
inline void nftMsg::clear_housenftrefid() {
  housenftrefid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::_internal_housenftrefid() const {
  return housenftrefid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::housenftrefid() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.houseNftRefId)
  return _internal_housenftrefid();
}
inline void nftMsg::_internal_set_housenftrefid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housenftrefid_ = value;
}
inline void nftMsg::set_housenftrefid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housenftrefid(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.houseNftRefId)
}

// int32 houseId = 16;
inline void nftMsg::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nftMsg::houseid() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.houseId)
  return _internal_houseid();
}
inline void nftMsg::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void nftMsg::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.houseId)
}

// string houseName = 17;
inline void nftMsg::clear_housename() {
  housename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& nftMsg::housename() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.houseName)
  return _internal_housename();
}
inline void nftMsg::set_housename(const std::string& value) {
  _internal_set_housename(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.houseName)
}
inline std::string* nftMsg::mutable_housename() {
  // @@protoc_insertion_point(field_mutable:nft.nftMsg.houseName)
  return _internal_mutable_housename();
}
inline const std::string& nftMsg::_internal_housename() const {
  return housename_.GetNoArena();
}
inline void nftMsg::_internal_set_housename(const std::string& value) {
  
  housename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void nftMsg::set_housename(std::string&& value) {
  
  housename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nft.nftMsg.houseName)
}
inline void nftMsg::set_housename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  housename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nft.nftMsg.houseName)
}
inline void nftMsg::set_housename(const char* value, size_t size) {
  
  housename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nft.nftMsg.houseName)
}
inline std::string* nftMsg::_internal_mutable_housename() {
  
  return housename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* nftMsg::release_housename() {
  // @@protoc_insertion_point(field_release:nft.nftMsg.houseName)
  
  return housename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void nftMsg::set_allocated_housename(std::string* housename) {
  if (housename != nullptr) {
    
  } else {
    
  }
  housename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), housename);
  // @@protoc_insertion_point(field_set_allocated:nft.nftMsg.houseName)
}

// string resourceFbx = 18;
inline void nftMsg::clear_resourcefbx() {
  resourcefbx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& nftMsg::resourcefbx() const {
  // @@protoc_insertion_point(field_get:nft.nftMsg.resourceFbx)
  return _internal_resourcefbx();
}
inline void nftMsg::set_resourcefbx(const std::string& value) {
  _internal_set_resourcefbx(value);
  // @@protoc_insertion_point(field_set:nft.nftMsg.resourceFbx)
}
inline std::string* nftMsg::mutable_resourcefbx() {
  // @@protoc_insertion_point(field_mutable:nft.nftMsg.resourceFbx)
  return _internal_mutable_resourcefbx();
}
inline const std::string& nftMsg::_internal_resourcefbx() const {
  return resourcefbx_.GetNoArena();
}
inline void nftMsg::_internal_set_resourcefbx(const std::string& value) {
  
  resourcefbx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void nftMsg::set_resourcefbx(std::string&& value) {
  
  resourcefbx_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nft.nftMsg.resourceFbx)
}
inline void nftMsg::set_resourcefbx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resourcefbx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nft.nftMsg.resourceFbx)
}
inline void nftMsg::set_resourcefbx(const char* value, size_t size) {
  
  resourcefbx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nft.nftMsg.resourceFbx)
}
inline std::string* nftMsg::_internal_mutable_resourcefbx() {
  
  return resourcefbx_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* nftMsg::release_resourcefbx() {
  // @@protoc_insertion_point(field_release:nft.nftMsg.resourceFbx)
  
  return resourcefbx_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void nftMsg::set_allocated_resourcefbx(std::string* resourcefbx) {
  if (resourcefbx != nullptr) {
    
  } else {
    
  }
  resourcefbx_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resourcefbx);
  // @@protoc_insertion_point(field_set_allocated:nft.nftMsg.resourceFbx)
}

// -------------------------------------------------------------------

// SMyNftList

// repeated .nft.nftMsg myNftList = 1;
inline int SMyNftList::_internal_mynftlist_size() const {
  return mynftlist_.size();
}
inline int SMyNftList::mynftlist_size() const {
  return _internal_mynftlist_size();
}
inline void SMyNftList::clear_mynftlist() {
  mynftlist_.Clear();
}
inline ::nft::nftMsg* SMyNftList::mutable_mynftlist(int index) {
  // @@protoc_insertion_point(field_mutable:nft.SMyNftList.myNftList)
  return mynftlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nft::nftMsg >*
SMyNftList::mutable_mynftlist() {
  // @@protoc_insertion_point(field_mutable_list:nft.SMyNftList.myNftList)
  return &mynftlist_;
}
inline const ::nft::nftMsg& SMyNftList::_internal_mynftlist(int index) const {
  return mynftlist_.Get(index);
}
inline const ::nft::nftMsg& SMyNftList::mynftlist(int index) const {
  // @@protoc_insertion_point(field_get:nft.SMyNftList.myNftList)
  return _internal_mynftlist(index);
}
inline ::nft::nftMsg* SMyNftList::_internal_add_mynftlist() {
  return mynftlist_.Add();
}
inline ::nft::nftMsg* SMyNftList::add_mynftlist() {
  // @@protoc_insertion_point(field_add:nft.SMyNftList.myNftList)
  return _internal_add_mynftlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nft::nftMsg >&
SMyNftList::mynftlist() const {
  // @@protoc_insertion_point(field_list:nft.SMyNftList.myNftList)
  return mynftlist_;
}

// -------------------------------------------------------------------

// CHouseNftList

// int32 houseId = 1;
inline void CHouseNftList::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHouseNftList::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CHouseNftList::houseid() const {
  // @@protoc_insertion_point(field_get:nft.CHouseNftList.houseId)
  return _internal_houseid();
}
inline void CHouseNftList::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CHouseNftList::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:nft.CHouseNftList.houseId)
}

// -------------------------------------------------------------------

// SHouseNftList

// repeated .nft.nftMsg houseNftList = 1;
inline int SHouseNftList::_internal_housenftlist_size() const {
  return housenftlist_.size();
}
inline int SHouseNftList::housenftlist_size() const {
  return _internal_housenftlist_size();
}
inline void SHouseNftList::clear_housenftlist() {
  housenftlist_.Clear();
}
inline ::nft::nftMsg* SHouseNftList::mutable_housenftlist(int index) {
  // @@protoc_insertion_point(field_mutable:nft.SHouseNftList.houseNftList)
  return housenftlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nft::nftMsg >*
SHouseNftList::mutable_housenftlist() {
  // @@protoc_insertion_point(field_mutable_list:nft.SHouseNftList.houseNftList)
  return &housenftlist_;
}
inline const ::nft::nftMsg& SHouseNftList::_internal_housenftlist(int index) const {
  return housenftlist_.Get(index);
}
inline const ::nft::nftMsg& SHouseNftList::housenftlist(int index) const {
  // @@protoc_insertion_point(field_get:nft.SHouseNftList.houseNftList)
  return _internal_housenftlist(index);
}
inline ::nft::nftMsg* SHouseNftList::_internal_add_housenftlist() {
  return housenftlist_.Add();
}
inline ::nft::nftMsg* SHouseNftList::add_housenftlist() {
  // @@protoc_insertion_point(field_add:nft.SHouseNftList.houseNftList)
  return _internal_add_housenftlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nft::nftMsg >&
SHouseNftList::housenftlist() const {
  // @@protoc_insertion_point(field_list:nft.SHouseNftList.houseNftList)
  return housenftlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nft_2eproto
