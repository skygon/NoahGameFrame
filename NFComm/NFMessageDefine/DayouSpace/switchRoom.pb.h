// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: switchRoom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_switchRoom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_switchRoom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "userPosition.pb.h"
#include "userInfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_switchRoom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_switchRoom_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_switchRoom_2eproto;
namespace switchRoom {
class CExitRoom;
class CExitRoomDefaultTypeInternal;
extern CExitRoomDefaultTypeInternal _CExitRoom_default_instance_;
class CSwitchRoom;
class CSwitchRoomDefaultTypeInternal;
extern CSwitchRoomDefaultTypeInternal _CSwitchRoom_default_instance_;
class SSwitchRoom;
class SSwitchRoomDefaultTypeInternal;
extern SSwitchRoomDefaultTypeInternal _SSwitchRoom_default_instance_;
}  // namespace switchRoom
PROTOBUF_NAMESPACE_OPEN
template<> ::switchRoom::CExitRoom* Arena::CreateMaybeMessage<::switchRoom::CExitRoom>(Arena*);
template<> ::switchRoom::CSwitchRoom* Arena::CreateMaybeMessage<::switchRoom::CSwitchRoom>(Arena*);
template<> ::switchRoom::SSwitchRoom* Arena::CreateMaybeMessage<::switchRoom::SSwitchRoom>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace switchRoom {

// ===================================================================

class CSwitchRoom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:switchRoom.CSwitchRoom) */ {
 public:
  CSwitchRoom();
  virtual ~CSwitchRoom();

  CSwitchRoom(const CSwitchRoom& from);
  CSwitchRoom(CSwitchRoom&& from) noexcept
    : CSwitchRoom() {
    *this = ::std::move(from);
  }

  inline CSwitchRoom& operator=(const CSwitchRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSwitchRoom& operator=(CSwitchRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSwitchRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSwitchRoom* internal_default_instance() {
    return reinterpret_cast<const CSwitchRoom*>(
               &_CSwitchRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSwitchRoom& a, CSwitchRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(CSwitchRoom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSwitchRoom* New() const final {
    return CreateMaybeMessage<CSwitchRoom>(nullptr);
  }

  CSwitchRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSwitchRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSwitchRoom& from);
  void MergeFrom(const CSwitchRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSwitchRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "switchRoom.CSwitchRoom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_switchRoom_2eproto);
    return ::descriptor_table_switchRoom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreHouseIDFieldNumber = 1,
    kHouseIDFieldNumber = 2,
  };
  // int32 preHouseID = 1;
  void clear_prehouseid();
  ::PROTOBUF_NAMESPACE_ID::int32 prehouseid() const;
  void set_prehouseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prehouseid() const;
  void _internal_set_prehouseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseID = 2;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:switchRoom.CSwitchRoom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 prehouseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_switchRoom_2eproto;
};
// -------------------------------------------------------------------

class SSwitchRoom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:switchRoom.SSwitchRoom) */ {
 public:
  SSwitchRoom();
  virtual ~SSwitchRoom();

  SSwitchRoom(const SSwitchRoom& from);
  SSwitchRoom(SSwitchRoom&& from) noexcept
    : SSwitchRoom() {
    *this = ::std::move(from);
  }

  inline SSwitchRoom& operator=(const SSwitchRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSwitchRoom& operator=(SSwitchRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSwitchRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSwitchRoom* internal_default_instance() {
    return reinterpret_cast<const SSwitchRoom*>(
               &_SSwitchRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSwitchRoom& a, SSwitchRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(SSwitchRoom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSwitchRoom* New() const final {
    return CreateMaybeMessage<SSwitchRoom>(nullptr);
  }

  SSwitchRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSwitchRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSwitchRoom& from);
  void MergeFrom(const SSwitchRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSwitchRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "switchRoom.SSwitchRoom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_switchRoom_2eproto);
    return ::descriptor_table_switchRoom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 1,
    kImGroupIdFieldNumber = 3,
    kRoomIdFieldNumber = 5,
    kExitRoomTextFieldNumber = 6,
    kVipFlagFieldNumber = 2,
    kEnterFlagFieldNumber = 4,
  };
  // repeated .userInfo.SUserInfo infoList = 1;
  int infolist_size() const;
  private:
  int _internal_infolist_size() const;
  public:
  void clear_infolist();
  ::userInfo::SUserInfo* mutable_infolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >*
      mutable_infolist();
  private:
  const ::userInfo::SUserInfo& _internal_infolist(int index) const;
  ::userInfo::SUserInfo* _internal_add_infolist();
  public:
  const ::userInfo::SUserInfo& infolist(int index) const;
  ::userInfo::SUserInfo* add_infolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >&
      infolist() const;

  // string imGroupId = 3;
  void clear_imgroupid();
  const std::string& imgroupid() const;
  void set_imgroupid(const std::string& value);
  void set_imgroupid(std::string&& value);
  void set_imgroupid(const char* value);
  void set_imgroupid(const char* value, size_t size);
  std::string* mutable_imgroupid();
  std::string* release_imgroupid();
  void set_allocated_imgroupid(std::string* imgroupid);
  private:
  const std::string& _internal_imgroupid() const;
  void _internal_set_imgroupid(const std::string& value);
  std::string* _internal_mutable_imgroupid();
  public:

  // string roomId = 5;
  void clear_roomid();
  const std::string& roomid() const;
  void set_roomid(const std::string& value);
  void set_roomid(std::string&& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  std::string* mutable_roomid();
  std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  private:
  const std::string& _internal_roomid() const;
  void _internal_set_roomid(const std::string& value);
  std::string* _internal_mutable_roomid();
  public:

  // string exitRoomText = 6;
  void clear_exitroomtext();
  const std::string& exitroomtext() const;
  void set_exitroomtext(const std::string& value);
  void set_exitroomtext(std::string&& value);
  void set_exitroomtext(const char* value);
  void set_exitroomtext(const char* value, size_t size);
  std::string* mutable_exitroomtext();
  std::string* release_exitroomtext();
  void set_allocated_exitroomtext(std::string* exitroomtext);
  private:
  const std::string& _internal_exitroomtext() const;
  void _internal_set_exitroomtext(const std::string& value);
  std::string* _internal_mutable_exitroomtext();
  public:

  // int32 vipFlag = 2;
  void clear_vipflag();
  ::PROTOBUF_NAMESPACE_ID::int32 vipflag() const;
  void set_vipflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vipflag() const;
  void _internal_set_vipflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enterFlag = 4;
  void clear_enterflag();
  ::PROTOBUF_NAMESPACE_ID::int32 enterflag() const;
  void set_enterflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enterflag() const;
  void _internal_set_enterflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:switchRoom.SSwitchRoom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo > infolist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imgroupid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exitroomtext_;
  ::PROTOBUF_NAMESPACE_ID::int32 vipflag_;
  ::PROTOBUF_NAMESPACE_ID::int32 enterflag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_switchRoom_2eproto;
};
// -------------------------------------------------------------------

class CExitRoom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:switchRoom.CExitRoom) */ {
 public:
  CExitRoom();
  virtual ~CExitRoom();

  CExitRoom(const CExitRoom& from);
  CExitRoom(CExitRoom&& from) noexcept
    : CExitRoom() {
    *this = ::std::move(from);
  }

  inline CExitRoom& operator=(const CExitRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline CExitRoom& operator=(CExitRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CExitRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CExitRoom* internal_default_instance() {
    return reinterpret_cast<const CExitRoom*>(
               &_CExitRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CExitRoom& a, CExitRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(CExitRoom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CExitRoom* New() const final {
    return CreateMaybeMessage<CExitRoom>(nullptr);
  }

  CExitRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CExitRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CExitRoom& from);
  void MergeFrom(const CExitRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CExitRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "switchRoom.CExitRoom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_switchRoom_2eproto);
    return ::descriptor_table_switchRoom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // .userPosition.UPosition position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::userPosition::UPosition& position() const;
  ::userPosition::UPosition* release_position();
  ::userPosition::UPosition* mutable_position();
  void set_allocated_position(::userPosition::UPosition* position);
  private:
  const ::userPosition::UPosition& _internal_position() const;
  ::userPosition::UPosition* _internal_mutable_position();
  public:

  // @@protoc_insertion_point(class_scope:switchRoom.CExitRoom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::userPosition::UPosition* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_switchRoom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSwitchRoom

// int32 preHouseID = 1;
inline void CSwitchRoom::clear_prehouseid() {
  prehouseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSwitchRoom::_internal_prehouseid() const {
  return prehouseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSwitchRoom::prehouseid() const {
  // @@protoc_insertion_point(field_get:switchRoom.CSwitchRoom.preHouseID)
  return _internal_prehouseid();
}
inline void CSwitchRoom::_internal_set_prehouseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  prehouseid_ = value;
}
inline void CSwitchRoom::set_prehouseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prehouseid(value);
  // @@protoc_insertion_point(field_set:switchRoom.CSwitchRoom.preHouseID)
}

// int32 houseID = 2;
inline void CSwitchRoom::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSwitchRoom::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSwitchRoom::houseid() const {
  // @@protoc_insertion_point(field_get:switchRoom.CSwitchRoom.houseID)
  return _internal_houseid();
}
inline void CSwitchRoom::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CSwitchRoom::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:switchRoom.CSwitchRoom.houseID)
}

// -------------------------------------------------------------------

// SSwitchRoom

// repeated .userInfo.SUserInfo infoList = 1;
inline int SSwitchRoom::_internal_infolist_size() const {
  return infolist_.size();
}
inline int SSwitchRoom::infolist_size() const {
  return _internal_infolist_size();
}
inline ::userInfo::SUserInfo* SSwitchRoom::mutable_infolist(int index) {
  // @@protoc_insertion_point(field_mutable:switchRoom.SSwitchRoom.infoList)
  return infolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >*
SSwitchRoom::mutable_infolist() {
  // @@protoc_insertion_point(field_mutable_list:switchRoom.SSwitchRoom.infoList)
  return &infolist_;
}
inline const ::userInfo::SUserInfo& SSwitchRoom::_internal_infolist(int index) const {
  return infolist_.Get(index);
}
inline const ::userInfo::SUserInfo& SSwitchRoom::infolist(int index) const {
  // @@protoc_insertion_point(field_get:switchRoom.SSwitchRoom.infoList)
  return _internal_infolist(index);
}
inline ::userInfo::SUserInfo* SSwitchRoom::_internal_add_infolist() {
  return infolist_.Add();
}
inline ::userInfo::SUserInfo* SSwitchRoom::add_infolist() {
  // @@protoc_insertion_point(field_add:switchRoom.SSwitchRoom.infoList)
  return _internal_add_infolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userInfo::SUserInfo >&
SSwitchRoom::infolist() const {
  // @@protoc_insertion_point(field_list:switchRoom.SSwitchRoom.infoList)
  return infolist_;
}

// int32 vipFlag = 2;
inline void SSwitchRoom::clear_vipflag() {
  vipflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSwitchRoom::_internal_vipflag() const {
  return vipflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSwitchRoom::vipflag() const {
  // @@protoc_insertion_point(field_get:switchRoom.SSwitchRoom.vipFlag)
  return _internal_vipflag();
}
inline void SSwitchRoom::_internal_set_vipflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vipflag_ = value;
}
inline void SSwitchRoom::set_vipflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vipflag(value);
  // @@protoc_insertion_point(field_set:switchRoom.SSwitchRoom.vipFlag)
}

// string imGroupId = 3;
inline void SSwitchRoom::clear_imgroupid() {
  imgroupid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSwitchRoom::imgroupid() const {
  // @@protoc_insertion_point(field_get:switchRoom.SSwitchRoom.imGroupId)
  return _internal_imgroupid();
}
inline void SSwitchRoom::set_imgroupid(const std::string& value) {
  _internal_set_imgroupid(value);
  // @@protoc_insertion_point(field_set:switchRoom.SSwitchRoom.imGroupId)
}
inline std::string* SSwitchRoom::mutable_imgroupid() {
  // @@protoc_insertion_point(field_mutable:switchRoom.SSwitchRoom.imGroupId)
  return _internal_mutable_imgroupid();
}
inline const std::string& SSwitchRoom::_internal_imgroupid() const {
  return imgroupid_.GetNoArena();
}
inline void SSwitchRoom::_internal_set_imgroupid(const std::string& value) {
  
  imgroupid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSwitchRoom::set_imgroupid(std::string&& value) {
  
  imgroupid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:switchRoom.SSwitchRoom.imGroupId)
}
inline void SSwitchRoom::set_imgroupid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  imgroupid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:switchRoom.SSwitchRoom.imGroupId)
}
inline void SSwitchRoom::set_imgroupid(const char* value, size_t size) {
  
  imgroupid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:switchRoom.SSwitchRoom.imGroupId)
}
inline std::string* SSwitchRoom::_internal_mutable_imgroupid() {
  
  return imgroupid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSwitchRoom::release_imgroupid() {
  // @@protoc_insertion_point(field_release:switchRoom.SSwitchRoom.imGroupId)
  
  return imgroupid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSwitchRoom::set_allocated_imgroupid(std::string* imgroupid) {
  if (imgroupid != nullptr) {
    
  } else {
    
  }
  imgroupid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imgroupid);
  // @@protoc_insertion_point(field_set_allocated:switchRoom.SSwitchRoom.imGroupId)
}

// int32 enterFlag = 4;
inline void SSwitchRoom::clear_enterflag() {
  enterflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSwitchRoom::_internal_enterflag() const {
  return enterflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSwitchRoom::enterflag() const {
  // @@protoc_insertion_point(field_get:switchRoom.SSwitchRoom.enterFlag)
  return _internal_enterflag();
}
inline void SSwitchRoom::_internal_set_enterflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enterflag_ = value;
}
inline void SSwitchRoom::set_enterflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enterflag(value);
  // @@protoc_insertion_point(field_set:switchRoom.SSwitchRoom.enterFlag)
}

// string roomId = 5;
inline void SSwitchRoom::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSwitchRoom::roomid() const {
  // @@protoc_insertion_point(field_get:switchRoom.SSwitchRoom.roomId)
  return _internal_roomid();
}
inline void SSwitchRoom::set_roomid(const std::string& value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:switchRoom.SSwitchRoom.roomId)
}
inline std::string* SSwitchRoom::mutable_roomid() {
  // @@protoc_insertion_point(field_mutable:switchRoom.SSwitchRoom.roomId)
  return _internal_mutable_roomid();
}
inline const std::string& SSwitchRoom::_internal_roomid() const {
  return roomid_.GetNoArena();
}
inline void SSwitchRoom::_internal_set_roomid(const std::string& value) {
  
  roomid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSwitchRoom::set_roomid(std::string&& value) {
  
  roomid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:switchRoom.SSwitchRoom.roomId)
}
inline void SSwitchRoom::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:switchRoom.SSwitchRoom.roomId)
}
inline void SSwitchRoom::set_roomid(const char* value, size_t size) {
  
  roomid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:switchRoom.SSwitchRoom.roomId)
}
inline std::string* SSwitchRoom::_internal_mutable_roomid() {
  
  return roomid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSwitchRoom::release_roomid() {
  // @@protoc_insertion_point(field_release:switchRoom.SSwitchRoom.roomId)
  
  return roomid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSwitchRoom::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:switchRoom.SSwitchRoom.roomId)
}

// string exitRoomText = 6;
inline void SSwitchRoom::clear_exitroomtext() {
  exitroomtext_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSwitchRoom::exitroomtext() const {
  // @@protoc_insertion_point(field_get:switchRoom.SSwitchRoom.exitRoomText)
  return _internal_exitroomtext();
}
inline void SSwitchRoom::set_exitroomtext(const std::string& value) {
  _internal_set_exitroomtext(value);
  // @@protoc_insertion_point(field_set:switchRoom.SSwitchRoom.exitRoomText)
}
inline std::string* SSwitchRoom::mutable_exitroomtext() {
  // @@protoc_insertion_point(field_mutable:switchRoom.SSwitchRoom.exitRoomText)
  return _internal_mutable_exitroomtext();
}
inline const std::string& SSwitchRoom::_internal_exitroomtext() const {
  return exitroomtext_.GetNoArena();
}
inline void SSwitchRoom::_internal_set_exitroomtext(const std::string& value) {
  
  exitroomtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSwitchRoom::set_exitroomtext(std::string&& value) {
  
  exitroomtext_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:switchRoom.SSwitchRoom.exitRoomText)
}
inline void SSwitchRoom::set_exitroomtext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exitroomtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:switchRoom.SSwitchRoom.exitRoomText)
}
inline void SSwitchRoom::set_exitroomtext(const char* value, size_t size) {
  
  exitroomtext_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:switchRoom.SSwitchRoom.exitRoomText)
}
inline std::string* SSwitchRoom::_internal_mutable_exitroomtext() {
  
  return exitroomtext_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSwitchRoom::release_exitroomtext() {
  // @@protoc_insertion_point(field_release:switchRoom.SSwitchRoom.exitRoomText)
  
  return exitroomtext_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSwitchRoom::set_allocated_exitroomtext(std::string* exitroomtext) {
  if (exitroomtext != nullptr) {
    
  } else {
    
  }
  exitroomtext_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exitroomtext);
  // @@protoc_insertion_point(field_set_allocated:switchRoom.SSwitchRoom.exitRoomText)
}

// -------------------------------------------------------------------

// CExitRoom

// .userPosition.UPosition position = 1;
inline bool CExitRoom::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool CExitRoom::has_position() const {
  return _internal_has_position();
}
inline const ::userPosition::UPosition& CExitRoom::_internal_position() const {
  const ::userPosition::UPosition* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::userPosition::UPosition*>(
      &::userPosition::_UPosition_default_instance_);
}
inline const ::userPosition::UPosition& CExitRoom::position() const {
  // @@protoc_insertion_point(field_get:switchRoom.CExitRoom.position)
  return _internal_position();
}
inline ::userPosition::UPosition* CExitRoom::release_position() {
  // @@protoc_insertion_point(field_release:switchRoom.CExitRoom.position)
  
  ::userPosition::UPosition* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::userPosition::UPosition* CExitRoom::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::userPosition::UPosition>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::userPosition::UPosition* CExitRoom::mutable_position() {
  // @@protoc_insertion_point(field_mutable:switchRoom.CExitRoom.position)
  return _internal_mutable_position();
}
inline void CExitRoom::set_allocated_position(::userPosition::UPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:switchRoom.CExitRoom.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace switchRoom

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_switchRoom_2eproto
