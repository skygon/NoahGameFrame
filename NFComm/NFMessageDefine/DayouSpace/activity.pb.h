// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: activity.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_activity_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_activity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_activity_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_activity_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_activity_2eproto;
namespace activity {
class ActivityCopySpaceInfo;
class ActivityCopySpaceInfoDefaultTypeInternal;
extern ActivityCopySpaceInfoDefaultTypeInternal _ActivityCopySpaceInfo_default_instance_;
class ActivityPartInfo;
class ActivityPartInfoDefaultTypeInternal;
extern ActivityPartInfoDefaultTypeInternal _ActivityPartInfo_default_instance_;
class CActivityPartList;
class CActivityPartListDefaultTypeInternal;
extern CActivityPartListDefaultTypeInternal _CActivityPartList_default_instance_;
class CSomeoneCopySpaceList;
class CSomeoneCopySpaceListDefaultTypeInternal;
extern CSomeoneCopySpaceListDefaultTypeInternal _CSomeoneCopySpaceList_default_instance_;
class CSpaceHotList;
class CSpaceHotListDefaultTypeInternal;
extern CSpaceHotListDefaultTypeInternal _CSpaceHotList_default_instance_;
class QuerySpaceHotInfo;
class QuerySpaceHotInfoDefaultTypeInternal;
extern QuerySpaceHotInfoDefaultTypeInternal _QuerySpaceHotInfo_default_instance_;
class SActivityPartList;
class SActivityPartListDefaultTypeInternal;
extern SActivityPartListDefaultTypeInternal _SActivityPartList_default_instance_;
class SSomeoneCopySpaceList;
class SSomeoneCopySpaceListDefaultTypeInternal;
extern SSomeoneCopySpaceListDefaultTypeInternal _SSomeoneCopySpaceList_default_instance_;
class SSpaceHotList;
class SSpaceHotListDefaultTypeInternal;
extern SSpaceHotListDefaultTypeInternal _SSpaceHotList_default_instance_;
class SpaceHotInfo;
class SpaceHotInfoDefaultTypeInternal;
extern SpaceHotInfoDefaultTypeInternal _SpaceHotInfo_default_instance_;
}  // namespace activity
PROTOBUF_NAMESPACE_OPEN
template<> ::activity::ActivityCopySpaceInfo* Arena::CreateMaybeMessage<::activity::ActivityCopySpaceInfo>(Arena*);
template<> ::activity::ActivityPartInfo* Arena::CreateMaybeMessage<::activity::ActivityPartInfo>(Arena*);
template<> ::activity::CActivityPartList* Arena::CreateMaybeMessage<::activity::CActivityPartList>(Arena*);
template<> ::activity::CSomeoneCopySpaceList* Arena::CreateMaybeMessage<::activity::CSomeoneCopySpaceList>(Arena*);
template<> ::activity::CSpaceHotList* Arena::CreateMaybeMessage<::activity::CSpaceHotList>(Arena*);
template<> ::activity::QuerySpaceHotInfo* Arena::CreateMaybeMessage<::activity::QuerySpaceHotInfo>(Arena*);
template<> ::activity::SActivityPartList* Arena::CreateMaybeMessage<::activity::SActivityPartList>(Arena*);
template<> ::activity::SSomeoneCopySpaceList* Arena::CreateMaybeMessage<::activity::SSomeoneCopySpaceList>(Arena*);
template<> ::activity::SSpaceHotList* Arena::CreateMaybeMessage<::activity::SSpaceHotList>(Arena*);
template<> ::activity::SpaceHotInfo* Arena::CreateMaybeMessage<::activity::SpaceHotInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace activity {

// ===================================================================

class CSpaceHotList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:activity.CSpaceHotList) */ {
 public:
  CSpaceHotList();
  virtual ~CSpaceHotList();

  CSpaceHotList(const CSpaceHotList& from);
  CSpaceHotList(CSpaceHotList&& from) noexcept
    : CSpaceHotList() {
    *this = ::std::move(from);
  }

  inline CSpaceHotList& operator=(const CSpaceHotList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpaceHotList& operator=(CSpaceHotList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpaceHotList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpaceHotList* internal_default_instance() {
    return reinterpret_cast<const CSpaceHotList*>(
               &_CSpaceHotList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSpaceHotList& a, CSpaceHotList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpaceHotList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpaceHotList* New() const final {
    return CreateMaybeMessage<CSpaceHotList>(nullptr);
  }

  CSpaceHotList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpaceHotList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpaceHotList& from);
  void MergeFrom(const CSpaceHotList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpaceHotList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "activity.CSpaceHotList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_activity_2eproto);
    return ::descriptor_table_activity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .activity.QuerySpaceHotInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::activity::QuerySpaceHotInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::QuerySpaceHotInfo >*
      mutable_list();
  private:
  const ::activity::QuerySpaceHotInfo& _internal_list(int index) const;
  ::activity::QuerySpaceHotInfo* _internal_add_list();
  public:
  const ::activity::QuerySpaceHotInfo& list(int index) const;
  ::activity::QuerySpaceHotInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::QuerySpaceHotInfo >&
      list() const;

  // @@protoc_insertion_point(class_scope:activity.CSpaceHotList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::QuerySpaceHotInfo > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_activity_2eproto;
};
// -------------------------------------------------------------------

class SSpaceHotList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:activity.SSpaceHotList) */ {
 public:
  SSpaceHotList();
  virtual ~SSpaceHotList();

  SSpaceHotList(const SSpaceHotList& from);
  SSpaceHotList(SSpaceHotList&& from) noexcept
    : SSpaceHotList() {
    *this = ::std::move(from);
  }

  inline SSpaceHotList& operator=(const SSpaceHotList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceHotList& operator=(SSpaceHotList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceHotList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceHotList* internal_default_instance() {
    return reinterpret_cast<const SSpaceHotList*>(
               &_SSpaceHotList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSpaceHotList& a, SSpaceHotList& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceHotList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceHotList* New() const final {
    return CreateMaybeMessage<SSpaceHotList>(nullptr);
  }

  SSpaceHotList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceHotList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceHotList& from);
  void MergeFrom(const SSpaceHotList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceHotList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "activity.SSpaceHotList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_activity_2eproto);
    return ::descriptor_table_activity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kMsgFieldNumber = 2,
  };
  // repeated .activity.SpaceHotInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::activity::SpaceHotInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::SpaceHotInfo >*
      mutable_list();
  private:
  const ::activity::SpaceHotInfo& _internal_list(int index) const;
  ::activity::SpaceHotInfo* _internal_add_list();
  public:
  const ::activity::SpaceHotInfo& list(int index) const;
  ::activity::SpaceHotInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::SpaceHotInfo >&
      list() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:activity.SSpaceHotList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::SpaceHotInfo > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_activity_2eproto;
};
// -------------------------------------------------------------------

class CActivityPartList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:activity.CActivityPartList) */ {
 public:
  CActivityPartList();
  virtual ~CActivityPartList();

  CActivityPartList(const CActivityPartList& from);
  CActivityPartList(CActivityPartList&& from) noexcept
    : CActivityPartList() {
    *this = ::std::move(from);
  }

  inline CActivityPartList& operator=(const CActivityPartList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CActivityPartList& operator=(CActivityPartList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CActivityPartList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CActivityPartList* internal_default_instance() {
    return reinterpret_cast<const CActivityPartList*>(
               &_CActivityPartList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CActivityPartList& a, CActivityPartList& b) {
    a.Swap(&b);
  }
  inline void Swap(CActivityPartList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CActivityPartList* New() const final {
    return CreateMaybeMessage<CActivityPartList>(nullptr);
  }

  CActivityPartList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CActivityPartList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CActivityPartList& from);
  void MergeFrom(const CActivityPartList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CActivityPartList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "activity.CActivityPartList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_activity_2eproto);
    return ::descriptor_table_activity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurPageFieldNumber = 1,
    kPageLimitFieldNumber = 2,
    kListTypeFieldNumber = 3,
  };
  // int32 curPage = 1;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 2;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 listType = 3;
  void clear_listtype();
  ::PROTOBUF_NAMESPACE_ID::int32 listtype() const;
  void set_listtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_listtype() const;
  void _internal_set_listtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:activity.CActivityPartList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 listtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_activity_2eproto;
};
// -------------------------------------------------------------------

class SActivityPartList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:activity.SActivityPartList) */ {
 public:
  SActivityPartList();
  virtual ~SActivityPartList();

  SActivityPartList(const SActivityPartList& from);
  SActivityPartList(SActivityPartList&& from) noexcept
    : SActivityPartList() {
    *this = ::std::move(from);
  }

  inline SActivityPartList& operator=(const SActivityPartList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SActivityPartList& operator=(SActivityPartList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SActivityPartList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SActivityPartList* internal_default_instance() {
    return reinterpret_cast<const SActivityPartList*>(
               &_SActivityPartList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SActivityPartList& a, SActivityPartList& b) {
    a.Swap(&b);
  }
  inline void Swap(SActivityPartList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SActivityPartList* New() const final {
    return CreateMaybeMessage<SActivityPartList>(nullptr);
  }

  SActivityPartList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SActivityPartList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SActivityPartList& from);
  void MergeFrom(const SActivityPartList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SActivityPartList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "activity.SActivityPartList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_activity_2eproto);
    return ::descriptor_table_activity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kMsgFieldNumber = 2,
    kCurPageFieldNumber = 3,
    kActivityPartSpaceNumFieldNumber = 4,
    kPageLimitFieldNumber = 5,
    kListTypeFieldNumber = 6,
  };
  // repeated .activity.ActivityPartInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::activity::ActivityPartInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::ActivityPartInfo >*
      mutable_list();
  private:
  const ::activity::ActivityPartInfo& _internal_list(int index) const;
  ::activity::ActivityPartInfo* _internal_add_list();
  public:
  const ::activity::ActivityPartInfo& list(int index) const;
  ::activity::ActivityPartInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::ActivityPartInfo >&
      list() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 curPage = 3;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 activityPartSpaceNum = 4;
  void clear_activitypartspacenum();
  ::PROTOBUF_NAMESPACE_ID::int32 activitypartspacenum() const;
  void set_activitypartspacenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_activitypartspacenum() const;
  void _internal_set_activitypartspacenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 5;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 listType = 6;
  void clear_listtype();
  ::PROTOBUF_NAMESPACE_ID::int32 listtype() const;
  void set_listtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_listtype() const;
  void _internal_set_listtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:activity.SActivityPartList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::ActivityPartInfo > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 activitypartspacenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 listtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_activity_2eproto;
};
// -------------------------------------------------------------------

class CSomeoneCopySpaceList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:activity.CSomeoneCopySpaceList) */ {
 public:
  CSomeoneCopySpaceList();
  virtual ~CSomeoneCopySpaceList();

  CSomeoneCopySpaceList(const CSomeoneCopySpaceList& from);
  CSomeoneCopySpaceList(CSomeoneCopySpaceList&& from) noexcept
    : CSomeoneCopySpaceList() {
    *this = ::std::move(from);
  }

  inline CSomeoneCopySpaceList& operator=(const CSomeoneCopySpaceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSomeoneCopySpaceList& operator=(CSomeoneCopySpaceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSomeoneCopySpaceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSomeoneCopySpaceList* internal_default_instance() {
    return reinterpret_cast<const CSomeoneCopySpaceList*>(
               &_CSomeoneCopySpaceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CSomeoneCopySpaceList& a, CSomeoneCopySpaceList& b) {
    a.Swap(&b);
  }
  inline void Swap(CSomeoneCopySpaceList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSomeoneCopySpaceList* New() const final {
    return CreateMaybeMessage<CSomeoneCopySpaceList>(nullptr);
  }

  CSomeoneCopySpaceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSomeoneCopySpaceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSomeoneCopySpaceList& from);
  void MergeFrom(const CSomeoneCopySpaceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSomeoneCopySpaceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "activity.CSomeoneCopySpaceList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_activity_2eproto);
    return ::descriptor_table_activity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
    kHouseTypeFieldNumber = 2,
    kCurPageFieldNumber = 3,
    kPageLimitFieldNumber = 4,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 2;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 curPage = 3;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 4;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:activity.CSomeoneCopySpaceList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_activity_2eproto;
};
// -------------------------------------------------------------------

class SSomeoneCopySpaceList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:activity.SSomeoneCopySpaceList) */ {
 public:
  SSomeoneCopySpaceList();
  virtual ~SSomeoneCopySpaceList();

  SSomeoneCopySpaceList(const SSomeoneCopySpaceList& from);
  SSomeoneCopySpaceList(SSomeoneCopySpaceList&& from) noexcept
    : SSomeoneCopySpaceList() {
    *this = ::std::move(from);
  }

  inline SSomeoneCopySpaceList& operator=(const SSomeoneCopySpaceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSomeoneCopySpaceList& operator=(SSomeoneCopySpaceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSomeoneCopySpaceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSomeoneCopySpaceList* internal_default_instance() {
    return reinterpret_cast<const SSomeoneCopySpaceList*>(
               &_SSomeoneCopySpaceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SSomeoneCopySpaceList& a, SSomeoneCopySpaceList& b) {
    a.Swap(&b);
  }
  inline void Swap(SSomeoneCopySpaceList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSomeoneCopySpaceList* New() const final {
    return CreateMaybeMessage<SSomeoneCopySpaceList>(nullptr);
  }

  SSomeoneCopySpaceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSomeoneCopySpaceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSomeoneCopySpaceList& from);
  void MergeFrom(const SSomeoneCopySpaceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSomeoneCopySpaceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "activity.SSomeoneCopySpaceList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_activity_2eproto);
    return ::descriptor_table_activity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kMsgFieldNumber = 2,
    kCurPageFieldNumber = 3,
    kSomeoneCopySpaceFieldNumber = 4,
    kPageLimitFieldNumber = 5,
    kHouseIdFieldNumber = 6,
    kHouseTypeFieldNumber = 7,
  };
  // repeated .activity.ActivityCopySpaceInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::activity::ActivityCopySpaceInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::ActivityCopySpaceInfo >*
      mutable_list();
  private:
  const ::activity::ActivityCopySpaceInfo& _internal_list(int index) const;
  ::activity::ActivityCopySpaceInfo* _internal_add_list();
  public:
  const ::activity::ActivityCopySpaceInfo& list(int index) const;
  ::activity::ActivityCopySpaceInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::ActivityCopySpaceInfo >&
      list() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 curPage = 3;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 someoneCopySpace = 4;
  void clear_someonecopyspace();
  ::PROTOBUF_NAMESPACE_ID::int32 someonecopyspace() const;
  void set_someonecopyspace(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_someonecopyspace() const;
  void _internal_set_someonecopyspace(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 5;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseId = 6;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 7;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:activity.SSomeoneCopySpaceList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::ActivityCopySpaceInfo > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 someonecopyspace_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_activity_2eproto;
};
// -------------------------------------------------------------------

class ActivityPartInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:activity.ActivityPartInfo) */ {
 public:
  ActivityPartInfo();
  virtual ~ActivityPartInfo();

  ActivityPartInfo(const ActivityPartInfo& from);
  ActivityPartInfo(ActivityPartInfo&& from) noexcept
    : ActivityPartInfo() {
    *this = ::std::move(from);
  }

  inline ActivityPartInfo& operator=(const ActivityPartInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityPartInfo& operator=(ActivityPartInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivityPartInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityPartInfo* internal_default_instance() {
    return reinterpret_cast<const ActivityPartInfo*>(
               &_ActivityPartInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ActivityPartInfo& a, ActivityPartInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityPartInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityPartInfo* New() const final {
    return CreateMaybeMessage<ActivityPartInfo>(nullptr);
  }

  ActivityPartInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityPartInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivityPartInfo& from);
  void MergeFrom(const ActivityPartInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityPartInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "activity.ActivityPartInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_activity_2eproto);
    return ::descriptor_table_activity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseNameFieldNumber = 4,
    kHouseSmartCoverFieldNumber = 5,
    kHouseBigCoverFieldNumber = 6,
    kHouseDescFieldNumber = 7,
    kActorNickFieldNumber = 8,
    kActorLabelFieldNumber = 9,
    kStartTimeFieldNumber = 10,
    kEndTimeFieldNumber = 11,
    kStartDurationFieldNumber = 12,
    kEndDurationFieldNumber = 13,
    kCreatorNickFieldNumber = 14,
    kCreatorAvatarFieldNumber = 15,
    kHouseCoverVideoFieldNumber = 17,
    kHouseIdFieldNumber = 1,
    kHouseTypeFieldNumber = 2,
    kIsCopyFieldNumber = 3,
    kHouseHotFieldNumber = 16,
    kSceneFieldNumber = 18,
    kIsExistTreasureBoxFieldNumber = 19,
  };
  // string houseName = 4;
  void clear_housename();
  const std::string& housename() const;
  void set_housename(const std::string& value);
  void set_housename(std::string&& value);
  void set_housename(const char* value);
  void set_housename(const char* value, size_t size);
  std::string* mutable_housename();
  std::string* release_housename();
  void set_allocated_housename(std::string* housename);
  private:
  const std::string& _internal_housename() const;
  void _internal_set_housename(const std::string& value);
  std::string* _internal_mutable_housename();
  public:

  // string houseSmartCover = 5;
  void clear_housesmartcover();
  const std::string& housesmartcover() const;
  void set_housesmartcover(const std::string& value);
  void set_housesmartcover(std::string&& value);
  void set_housesmartcover(const char* value);
  void set_housesmartcover(const char* value, size_t size);
  std::string* mutable_housesmartcover();
  std::string* release_housesmartcover();
  void set_allocated_housesmartcover(std::string* housesmartcover);
  private:
  const std::string& _internal_housesmartcover() const;
  void _internal_set_housesmartcover(const std::string& value);
  std::string* _internal_mutable_housesmartcover();
  public:

  // string houseBigCover = 6;
  void clear_housebigcover();
  const std::string& housebigcover() const;
  void set_housebigcover(const std::string& value);
  void set_housebigcover(std::string&& value);
  void set_housebigcover(const char* value);
  void set_housebigcover(const char* value, size_t size);
  std::string* mutable_housebigcover();
  std::string* release_housebigcover();
  void set_allocated_housebigcover(std::string* housebigcover);
  private:
  const std::string& _internal_housebigcover() const;
  void _internal_set_housebigcover(const std::string& value);
  std::string* _internal_mutable_housebigcover();
  public:

  // string houseDesc = 7;
  void clear_housedesc();
  const std::string& housedesc() const;
  void set_housedesc(const std::string& value);
  void set_housedesc(std::string&& value);
  void set_housedesc(const char* value);
  void set_housedesc(const char* value, size_t size);
  std::string* mutable_housedesc();
  std::string* release_housedesc();
  void set_allocated_housedesc(std::string* housedesc);
  private:
  const std::string& _internal_housedesc() const;
  void _internal_set_housedesc(const std::string& value);
  std::string* _internal_mutable_housedesc();
  public:

  // string actorNick = 8;
  void clear_actornick();
  const std::string& actornick() const;
  void set_actornick(const std::string& value);
  void set_actornick(std::string&& value);
  void set_actornick(const char* value);
  void set_actornick(const char* value, size_t size);
  std::string* mutable_actornick();
  std::string* release_actornick();
  void set_allocated_actornick(std::string* actornick);
  private:
  const std::string& _internal_actornick() const;
  void _internal_set_actornick(const std::string& value);
  std::string* _internal_mutable_actornick();
  public:

  // string actorLabel = 9;
  void clear_actorlabel();
  const std::string& actorlabel() const;
  void set_actorlabel(const std::string& value);
  void set_actorlabel(std::string&& value);
  void set_actorlabel(const char* value);
  void set_actorlabel(const char* value, size_t size);
  std::string* mutable_actorlabel();
  std::string* release_actorlabel();
  void set_allocated_actorlabel(std::string* actorlabel);
  private:
  const std::string& _internal_actorlabel() const;
  void _internal_set_actorlabel(const std::string& value);
  std::string* _internal_mutable_actorlabel();
  public:

  // string startTime = 10;
  void clear_starttime();
  const std::string& starttime() const;
  void set_starttime(const std::string& value);
  void set_starttime(std::string&& value);
  void set_starttime(const char* value);
  void set_starttime(const char* value, size_t size);
  std::string* mutable_starttime();
  std::string* release_starttime();
  void set_allocated_starttime(std::string* starttime);
  private:
  const std::string& _internal_starttime() const;
  void _internal_set_starttime(const std::string& value);
  std::string* _internal_mutable_starttime();
  public:

  // string endTime = 11;
  void clear_endtime();
  const std::string& endtime() const;
  void set_endtime(const std::string& value);
  void set_endtime(std::string&& value);
  void set_endtime(const char* value);
  void set_endtime(const char* value, size_t size);
  std::string* mutable_endtime();
  std::string* release_endtime();
  void set_allocated_endtime(std::string* endtime);
  private:
  const std::string& _internal_endtime() const;
  void _internal_set_endtime(const std::string& value);
  std::string* _internal_mutable_endtime();
  public:

  // string startDuration = 12;
  void clear_startduration();
  const std::string& startduration() const;
  void set_startduration(const std::string& value);
  void set_startduration(std::string&& value);
  void set_startduration(const char* value);
  void set_startduration(const char* value, size_t size);
  std::string* mutable_startduration();
  std::string* release_startduration();
  void set_allocated_startduration(std::string* startduration);
  private:
  const std::string& _internal_startduration() const;
  void _internal_set_startduration(const std::string& value);
  std::string* _internal_mutable_startduration();
  public:

  // string endDuration = 13;
  void clear_endduration();
  const std::string& endduration() const;
  void set_endduration(const std::string& value);
  void set_endduration(std::string&& value);
  void set_endduration(const char* value);
  void set_endduration(const char* value, size_t size);
  std::string* mutable_endduration();
  std::string* release_endduration();
  void set_allocated_endduration(std::string* endduration);
  private:
  const std::string& _internal_endduration() const;
  void _internal_set_endduration(const std::string& value);
  std::string* _internal_mutable_endduration();
  public:

  // string creatorNick = 14;
  void clear_creatornick();
  const std::string& creatornick() const;
  void set_creatornick(const std::string& value);
  void set_creatornick(std::string&& value);
  void set_creatornick(const char* value);
  void set_creatornick(const char* value, size_t size);
  std::string* mutable_creatornick();
  std::string* release_creatornick();
  void set_allocated_creatornick(std::string* creatornick);
  private:
  const std::string& _internal_creatornick() const;
  void _internal_set_creatornick(const std::string& value);
  std::string* _internal_mutable_creatornick();
  public:

  // string creatorAvatar = 15;
  void clear_creatoravatar();
  const std::string& creatoravatar() const;
  void set_creatoravatar(const std::string& value);
  void set_creatoravatar(std::string&& value);
  void set_creatoravatar(const char* value);
  void set_creatoravatar(const char* value, size_t size);
  std::string* mutable_creatoravatar();
  std::string* release_creatoravatar();
  void set_allocated_creatoravatar(std::string* creatoravatar);
  private:
  const std::string& _internal_creatoravatar() const;
  void _internal_set_creatoravatar(const std::string& value);
  std::string* _internal_mutable_creatoravatar();
  public:

  // string houseCoverVideo = 17;
  void clear_housecovervideo();
  const std::string& housecovervideo() const;
  void set_housecovervideo(const std::string& value);
  void set_housecovervideo(std::string&& value);
  void set_housecovervideo(const char* value);
  void set_housecovervideo(const char* value, size_t size);
  std::string* mutable_housecovervideo();
  std::string* release_housecovervideo();
  void set_allocated_housecovervideo(std::string* housecovervideo);
  private:
  const std::string& _internal_housecovervideo() const;
  void _internal_set_housecovervideo(const std::string& value);
  std::string* _internal_mutable_housecovervideo();
  public:

  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 2;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isCopy = 3;
  void clear_iscopy();
  ::PROTOBUF_NAMESPACE_ID::int32 iscopy() const;
  void set_iscopy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iscopy() const;
  void _internal_set_iscopy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseHot = 16;
  void clear_househot();
  ::PROTOBUF_NAMESPACE_ID::int32 househot() const;
  void set_househot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_househot() const;
  void _internal_set_househot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scene = 18;
  void clear_scene();
  ::PROTOBUF_NAMESPACE_ID::int32 scene() const;
  void set_scene(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene() const;
  void _internal_set_scene(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isExistTreasureBox = 19;
  void clear_isexisttreasurebox();
  ::PROTOBUF_NAMESPACE_ID::int32 isexisttreasurebox() const;
  void set_isexisttreasurebox(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isexisttreasurebox() const;
  void _internal_set_isexisttreasurebox(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:activity.ActivityPartInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr housename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr housesmartcover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr housebigcover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr housedesc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actornick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actorlabel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr startduration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endduration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creatornick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creatoravatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr housecovervideo_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 iscopy_;
  ::PROTOBUF_NAMESPACE_ID::int32 househot_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_;
  ::PROTOBUF_NAMESPACE_ID::int32 isexisttreasurebox_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_activity_2eproto;
};
// -------------------------------------------------------------------

class QuerySpaceHotInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:activity.QuerySpaceHotInfo) */ {
 public:
  QuerySpaceHotInfo();
  virtual ~QuerySpaceHotInfo();

  QuerySpaceHotInfo(const QuerySpaceHotInfo& from);
  QuerySpaceHotInfo(QuerySpaceHotInfo&& from) noexcept
    : QuerySpaceHotInfo() {
    *this = ::std::move(from);
  }

  inline QuerySpaceHotInfo& operator=(const QuerySpaceHotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySpaceHotInfo& operator=(QuerySpaceHotInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuerySpaceHotInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuerySpaceHotInfo* internal_default_instance() {
    return reinterpret_cast<const QuerySpaceHotInfo*>(
               &_QuerySpaceHotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QuerySpaceHotInfo& a, QuerySpaceHotInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySpaceHotInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuerySpaceHotInfo* New() const final {
    return CreateMaybeMessage<QuerySpaceHotInfo>(nullptr);
  }

  QuerySpaceHotInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuerySpaceHotInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuerySpaceHotInfo& from);
  void MergeFrom(const QuerySpaceHotInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySpaceHotInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "activity.QuerySpaceHotInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_activity_2eproto);
    return ::descriptor_table_activity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
    kHouseTypeFieldNumber = 2,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 2;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:activity.QuerySpaceHotInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_activity_2eproto;
};
// -------------------------------------------------------------------

class SpaceHotInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:activity.SpaceHotInfo) */ {
 public:
  SpaceHotInfo();
  virtual ~SpaceHotInfo();

  SpaceHotInfo(const SpaceHotInfo& from);
  SpaceHotInfo(SpaceHotInfo&& from) noexcept
    : SpaceHotInfo() {
    *this = ::std::move(from);
  }

  inline SpaceHotInfo& operator=(const SpaceHotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpaceHotInfo& operator=(SpaceHotInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpaceHotInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpaceHotInfo* internal_default_instance() {
    return reinterpret_cast<const SpaceHotInfo*>(
               &_SpaceHotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SpaceHotInfo& a, SpaceHotInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SpaceHotInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpaceHotInfo* New() const final {
    return CreateMaybeMessage<SpaceHotInfo>(nullptr);
  }

  SpaceHotInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpaceHotInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpaceHotInfo& from);
  void MergeFrom(const SpaceHotInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpaceHotInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "activity.SpaceHotInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_activity_2eproto);
    return ::descriptor_table_activity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHouseIdFieldNumber = 1,
    kHouseTypeFieldNumber = 2,
    kHotNumFieldNumber = 3,
  };
  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 2;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hotNum = 3;
  void clear_hotnum();
  ::PROTOBUF_NAMESPACE_ID::int32 hotnum() const;
  void set_hotnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hotnum() const;
  void _internal_set_hotnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:activity.SpaceHotInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 hotnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_activity_2eproto;
};
// -------------------------------------------------------------------

class ActivityCopySpaceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:activity.ActivityCopySpaceInfo) */ {
 public:
  ActivityCopySpaceInfo();
  virtual ~ActivityCopySpaceInfo();

  ActivityCopySpaceInfo(const ActivityCopySpaceInfo& from);
  ActivityCopySpaceInfo(ActivityCopySpaceInfo&& from) noexcept
    : ActivityCopySpaceInfo() {
    *this = ::std::move(from);
  }

  inline ActivityCopySpaceInfo& operator=(const ActivityCopySpaceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityCopySpaceInfo& operator=(ActivityCopySpaceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivityCopySpaceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivityCopySpaceInfo* internal_default_instance() {
    return reinterpret_cast<const ActivityCopySpaceInfo*>(
               &_ActivityCopySpaceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ActivityCopySpaceInfo& a, ActivityCopySpaceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityCopySpaceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivityCopySpaceInfo* New() const final {
    return CreateMaybeMessage<ActivityCopySpaceInfo>(nullptr);
  }

  ActivityCopySpaceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivityCopySpaceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivityCopySpaceInfo& from);
  void MergeFrom(const ActivityCopySpaceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityCopySpaceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "activity.ActivityCopySpaceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_activity_2eproto);
    return ::descriptor_table_activity_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIconFieldNumber = 6,
    kUserNickFieldNumber = 7,
    kSpaceNameFieldNumber = 8,
    kHouseIdFieldNumber = 1,
    kHouseTypeFieldNumber = 2,
    kIsOpenFieldNumber = 3,
    kCurrentOnlineFieldNumber = 4,
    kUidFieldNumber = 5,
  };
  // string userIcon = 6;
  void clear_usericon();
  const std::string& usericon() const;
  void set_usericon(const std::string& value);
  void set_usericon(std::string&& value);
  void set_usericon(const char* value);
  void set_usericon(const char* value, size_t size);
  std::string* mutable_usericon();
  std::string* release_usericon();
  void set_allocated_usericon(std::string* usericon);
  private:
  const std::string& _internal_usericon() const;
  void _internal_set_usericon(const std::string& value);
  std::string* _internal_mutable_usericon();
  public:

  // string userNick = 7;
  void clear_usernick();
  const std::string& usernick() const;
  void set_usernick(const std::string& value);
  void set_usernick(std::string&& value);
  void set_usernick(const char* value);
  void set_usernick(const char* value, size_t size);
  std::string* mutable_usernick();
  std::string* release_usernick();
  void set_allocated_usernick(std::string* usernick);
  private:
  const std::string& _internal_usernick() const;
  void _internal_set_usernick(const std::string& value);
  std::string* _internal_mutable_usernick();
  public:

  // string spaceName = 8;
  void clear_spacename();
  const std::string& spacename() const;
  void set_spacename(const std::string& value);
  void set_spacename(std::string&& value);
  void set_spacename(const char* value);
  void set_spacename(const char* value, size_t size);
  std::string* mutable_spacename();
  std::string* release_spacename();
  void set_allocated_spacename(std::string* spacename);
  private:
  const std::string& _internal_spacename() const;
  void _internal_set_spacename(const std::string& value);
  std::string* _internal_mutable_spacename();
  public:

  // int32 houseId = 1;
  void clear_houseid();
  ::PROTOBUF_NAMESPACE_ID::int32 houseid() const;
  void set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_houseid() const;
  void _internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 houseType = 2;
  void clear_housetype();
  ::PROTOBUF_NAMESPACE_ID::int32 housetype() const;
  void set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_housetype() const;
  void _internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isOpen = 3;
  void clear_isopen();
  ::PROTOBUF_NAMESPACE_ID::int32 isopen() const;
  void set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isopen() const;
  void _internal_set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 currentOnline = 4;
  void clear_currentonline();
  ::PROTOBUF_NAMESPACE_ID::int32 currentonline() const;
  void set_currentonline(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currentonline() const;
  void _internal_set_currentonline(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 uid = 5;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:activity.ActivityCopySpaceInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usericon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usernick_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spacename_;
  ::PROTOBUF_NAMESPACE_ID::int32 houseid_;
  ::PROTOBUF_NAMESPACE_ID::int32 housetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 isopen_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentonline_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_activity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSpaceHotList

// repeated .activity.QuerySpaceHotInfo list = 1;
inline int CSpaceHotList::_internal_list_size() const {
  return list_.size();
}
inline int CSpaceHotList::list_size() const {
  return _internal_list_size();
}
inline void CSpaceHotList::clear_list() {
  list_.Clear();
}
inline ::activity::QuerySpaceHotInfo* CSpaceHotList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:activity.CSpaceHotList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::QuerySpaceHotInfo >*
CSpaceHotList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:activity.CSpaceHotList.list)
  return &list_;
}
inline const ::activity::QuerySpaceHotInfo& CSpaceHotList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::activity::QuerySpaceHotInfo& CSpaceHotList::list(int index) const {
  // @@protoc_insertion_point(field_get:activity.CSpaceHotList.list)
  return _internal_list(index);
}
inline ::activity::QuerySpaceHotInfo* CSpaceHotList::_internal_add_list() {
  return list_.Add();
}
inline ::activity::QuerySpaceHotInfo* CSpaceHotList::add_list() {
  // @@protoc_insertion_point(field_add:activity.CSpaceHotList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::QuerySpaceHotInfo >&
CSpaceHotList::list() const {
  // @@protoc_insertion_point(field_list:activity.CSpaceHotList.list)
  return list_;
}

// -------------------------------------------------------------------

// SSpaceHotList

// repeated .activity.SpaceHotInfo list = 1;
inline int SSpaceHotList::_internal_list_size() const {
  return list_.size();
}
inline int SSpaceHotList::list_size() const {
  return _internal_list_size();
}
inline void SSpaceHotList::clear_list() {
  list_.Clear();
}
inline ::activity::SpaceHotInfo* SSpaceHotList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:activity.SSpaceHotList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::SpaceHotInfo >*
SSpaceHotList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:activity.SSpaceHotList.list)
  return &list_;
}
inline const ::activity::SpaceHotInfo& SSpaceHotList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::activity::SpaceHotInfo& SSpaceHotList::list(int index) const {
  // @@protoc_insertion_point(field_get:activity.SSpaceHotList.list)
  return _internal_list(index);
}
inline ::activity::SpaceHotInfo* SSpaceHotList::_internal_add_list() {
  return list_.Add();
}
inline ::activity::SpaceHotInfo* SSpaceHotList::add_list() {
  // @@protoc_insertion_point(field_add:activity.SSpaceHotList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::SpaceHotInfo >&
SSpaceHotList::list() const {
  // @@protoc_insertion_point(field_list:activity.SSpaceHotList.list)
  return list_;
}

// string msg = 2;
inline void SSpaceHotList::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceHotList::msg() const {
  // @@protoc_insertion_point(field_get:activity.SSpaceHotList.msg)
  return _internal_msg();
}
inline void SSpaceHotList::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:activity.SSpaceHotList.msg)
}
inline std::string* SSpaceHotList::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:activity.SSpaceHotList.msg)
  return _internal_mutable_msg();
}
inline const std::string& SSpaceHotList::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SSpaceHotList::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceHotList::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.SSpaceHotList.msg)
}
inline void SSpaceHotList::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.SSpaceHotList.msg)
}
inline void SSpaceHotList::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.SSpaceHotList.msg)
}
inline std::string* SSpaceHotList::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceHotList::release_msg() {
  // @@protoc_insertion_point(field_release:activity.SSpaceHotList.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceHotList::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:activity.SSpaceHotList.msg)
}

// -------------------------------------------------------------------

// CActivityPartList

// int32 curPage = 1;
inline void CActivityPartList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CActivityPartList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CActivityPartList::curpage() const {
  // @@protoc_insertion_point(field_get:activity.CActivityPartList.curPage)
  return _internal_curpage();
}
inline void CActivityPartList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void CActivityPartList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:activity.CActivityPartList.curPage)
}

// int32 pageLimit = 2;
inline void CActivityPartList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CActivityPartList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CActivityPartList::pagelimit() const {
  // @@protoc_insertion_point(field_get:activity.CActivityPartList.pageLimit)
  return _internal_pagelimit();
}
inline void CActivityPartList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void CActivityPartList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:activity.CActivityPartList.pageLimit)
}

// int32 listType = 3;
inline void CActivityPartList::clear_listtype() {
  listtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CActivityPartList::_internal_listtype() const {
  return listtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CActivityPartList::listtype() const {
  // @@protoc_insertion_point(field_get:activity.CActivityPartList.listType)
  return _internal_listtype();
}
inline void CActivityPartList::_internal_set_listtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  listtype_ = value;
}
inline void CActivityPartList::set_listtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_listtype(value);
  // @@protoc_insertion_point(field_set:activity.CActivityPartList.listType)
}

// -------------------------------------------------------------------

// SActivityPartList

// repeated .activity.ActivityPartInfo list = 1;
inline int SActivityPartList::_internal_list_size() const {
  return list_.size();
}
inline int SActivityPartList::list_size() const {
  return _internal_list_size();
}
inline void SActivityPartList::clear_list() {
  list_.Clear();
}
inline ::activity::ActivityPartInfo* SActivityPartList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:activity.SActivityPartList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::ActivityPartInfo >*
SActivityPartList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:activity.SActivityPartList.list)
  return &list_;
}
inline const ::activity::ActivityPartInfo& SActivityPartList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::activity::ActivityPartInfo& SActivityPartList::list(int index) const {
  // @@protoc_insertion_point(field_get:activity.SActivityPartList.list)
  return _internal_list(index);
}
inline ::activity::ActivityPartInfo* SActivityPartList::_internal_add_list() {
  return list_.Add();
}
inline ::activity::ActivityPartInfo* SActivityPartList::add_list() {
  // @@protoc_insertion_point(field_add:activity.SActivityPartList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::ActivityPartInfo >&
SActivityPartList::list() const {
  // @@protoc_insertion_point(field_list:activity.SActivityPartList.list)
  return list_;
}

// string msg = 2;
inline void SActivityPartList::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SActivityPartList::msg() const {
  // @@protoc_insertion_point(field_get:activity.SActivityPartList.msg)
  return _internal_msg();
}
inline void SActivityPartList::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:activity.SActivityPartList.msg)
}
inline std::string* SActivityPartList::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:activity.SActivityPartList.msg)
  return _internal_mutable_msg();
}
inline const std::string& SActivityPartList::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SActivityPartList::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SActivityPartList::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.SActivityPartList.msg)
}
inline void SActivityPartList::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.SActivityPartList.msg)
}
inline void SActivityPartList::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.SActivityPartList.msg)
}
inline std::string* SActivityPartList::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SActivityPartList::release_msg() {
  // @@protoc_insertion_point(field_release:activity.SActivityPartList.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SActivityPartList::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:activity.SActivityPartList.msg)
}

// int32 curPage = 3;
inline void SActivityPartList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SActivityPartList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SActivityPartList::curpage() const {
  // @@protoc_insertion_point(field_get:activity.SActivityPartList.curPage)
  return _internal_curpage();
}
inline void SActivityPartList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void SActivityPartList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:activity.SActivityPartList.curPage)
}

// int32 activityPartSpaceNum = 4;
inline void SActivityPartList::clear_activitypartspacenum() {
  activitypartspacenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SActivityPartList::_internal_activitypartspacenum() const {
  return activitypartspacenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SActivityPartList::activitypartspacenum() const {
  // @@protoc_insertion_point(field_get:activity.SActivityPartList.activityPartSpaceNum)
  return _internal_activitypartspacenum();
}
inline void SActivityPartList::_internal_set_activitypartspacenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activitypartspacenum_ = value;
}
inline void SActivityPartList::set_activitypartspacenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_activitypartspacenum(value);
  // @@protoc_insertion_point(field_set:activity.SActivityPartList.activityPartSpaceNum)
}

// int32 pageLimit = 5;
inline void SActivityPartList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SActivityPartList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SActivityPartList::pagelimit() const {
  // @@protoc_insertion_point(field_get:activity.SActivityPartList.pageLimit)
  return _internal_pagelimit();
}
inline void SActivityPartList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void SActivityPartList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:activity.SActivityPartList.pageLimit)
}

// int32 listType = 6;
inline void SActivityPartList::clear_listtype() {
  listtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SActivityPartList::_internal_listtype() const {
  return listtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SActivityPartList::listtype() const {
  // @@protoc_insertion_point(field_get:activity.SActivityPartList.listType)
  return _internal_listtype();
}
inline void SActivityPartList::_internal_set_listtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  listtype_ = value;
}
inline void SActivityPartList::set_listtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_listtype(value);
  // @@protoc_insertion_point(field_set:activity.SActivityPartList.listType)
}

// -------------------------------------------------------------------

// CSomeoneCopySpaceList

// int32 houseId = 1;
inline void CSomeoneCopySpaceList::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSomeoneCopySpaceList::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSomeoneCopySpaceList::houseid() const {
  // @@protoc_insertion_point(field_get:activity.CSomeoneCopySpaceList.houseId)
  return _internal_houseid();
}
inline void CSomeoneCopySpaceList::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void CSomeoneCopySpaceList::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:activity.CSomeoneCopySpaceList.houseId)
}

// int32 houseType = 2;
inline void CSomeoneCopySpaceList::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSomeoneCopySpaceList::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSomeoneCopySpaceList::housetype() const {
  // @@protoc_insertion_point(field_get:activity.CSomeoneCopySpaceList.houseType)
  return _internal_housetype();
}
inline void CSomeoneCopySpaceList::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void CSomeoneCopySpaceList::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:activity.CSomeoneCopySpaceList.houseType)
}

// int32 curPage = 3;
inline void CSomeoneCopySpaceList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSomeoneCopySpaceList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSomeoneCopySpaceList::curpage() const {
  // @@protoc_insertion_point(field_get:activity.CSomeoneCopySpaceList.curPage)
  return _internal_curpage();
}
inline void CSomeoneCopySpaceList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void CSomeoneCopySpaceList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:activity.CSomeoneCopySpaceList.curPage)
}

// int32 pageLimit = 4;
inline void CSomeoneCopySpaceList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSomeoneCopySpaceList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSomeoneCopySpaceList::pagelimit() const {
  // @@protoc_insertion_point(field_get:activity.CSomeoneCopySpaceList.pageLimit)
  return _internal_pagelimit();
}
inline void CSomeoneCopySpaceList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void CSomeoneCopySpaceList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:activity.CSomeoneCopySpaceList.pageLimit)
}

// -------------------------------------------------------------------

// SSomeoneCopySpaceList

// repeated .activity.ActivityCopySpaceInfo list = 1;
inline int SSomeoneCopySpaceList::_internal_list_size() const {
  return list_.size();
}
inline int SSomeoneCopySpaceList::list_size() const {
  return _internal_list_size();
}
inline void SSomeoneCopySpaceList::clear_list() {
  list_.Clear();
}
inline ::activity::ActivityCopySpaceInfo* SSomeoneCopySpaceList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:activity.SSomeoneCopySpaceList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::ActivityCopySpaceInfo >*
SSomeoneCopySpaceList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:activity.SSomeoneCopySpaceList.list)
  return &list_;
}
inline const ::activity::ActivityCopySpaceInfo& SSomeoneCopySpaceList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::activity::ActivityCopySpaceInfo& SSomeoneCopySpaceList::list(int index) const {
  // @@protoc_insertion_point(field_get:activity.SSomeoneCopySpaceList.list)
  return _internal_list(index);
}
inline ::activity::ActivityCopySpaceInfo* SSomeoneCopySpaceList::_internal_add_list() {
  return list_.Add();
}
inline ::activity::ActivityCopySpaceInfo* SSomeoneCopySpaceList::add_list() {
  // @@protoc_insertion_point(field_add:activity.SSomeoneCopySpaceList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::activity::ActivityCopySpaceInfo >&
SSomeoneCopySpaceList::list() const {
  // @@protoc_insertion_point(field_list:activity.SSomeoneCopySpaceList.list)
  return list_;
}

// string msg = 2;
inline void SSomeoneCopySpaceList::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSomeoneCopySpaceList::msg() const {
  // @@protoc_insertion_point(field_get:activity.SSomeoneCopySpaceList.msg)
  return _internal_msg();
}
inline void SSomeoneCopySpaceList::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:activity.SSomeoneCopySpaceList.msg)
}
inline std::string* SSomeoneCopySpaceList::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:activity.SSomeoneCopySpaceList.msg)
  return _internal_mutable_msg();
}
inline const std::string& SSomeoneCopySpaceList::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SSomeoneCopySpaceList::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSomeoneCopySpaceList::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.SSomeoneCopySpaceList.msg)
}
inline void SSomeoneCopySpaceList::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.SSomeoneCopySpaceList.msg)
}
inline void SSomeoneCopySpaceList::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.SSomeoneCopySpaceList.msg)
}
inline std::string* SSomeoneCopySpaceList::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSomeoneCopySpaceList::release_msg() {
  // @@protoc_insertion_point(field_release:activity.SSomeoneCopySpaceList.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSomeoneCopySpaceList::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:activity.SSomeoneCopySpaceList.msg)
}

// int32 curPage = 3;
inline void SSomeoneCopySpaceList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSomeoneCopySpaceList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSomeoneCopySpaceList::curpage() const {
  // @@protoc_insertion_point(field_get:activity.SSomeoneCopySpaceList.curPage)
  return _internal_curpage();
}
inline void SSomeoneCopySpaceList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void SSomeoneCopySpaceList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:activity.SSomeoneCopySpaceList.curPage)
}

// int32 someoneCopySpace = 4;
inline void SSomeoneCopySpaceList::clear_someonecopyspace() {
  someonecopyspace_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSomeoneCopySpaceList::_internal_someonecopyspace() const {
  return someonecopyspace_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSomeoneCopySpaceList::someonecopyspace() const {
  // @@protoc_insertion_point(field_get:activity.SSomeoneCopySpaceList.someoneCopySpace)
  return _internal_someonecopyspace();
}
inline void SSomeoneCopySpaceList::_internal_set_someonecopyspace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  someonecopyspace_ = value;
}
inline void SSomeoneCopySpaceList::set_someonecopyspace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_someonecopyspace(value);
  // @@protoc_insertion_point(field_set:activity.SSomeoneCopySpaceList.someoneCopySpace)
}

// int32 pageLimit = 5;
inline void SSomeoneCopySpaceList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSomeoneCopySpaceList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSomeoneCopySpaceList::pagelimit() const {
  // @@protoc_insertion_point(field_get:activity.SSomeoneCopySpaceList.pageLimit)
  return _internal_pagelimit();
}
inline void SSomeoneCopySpaceList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void SSomeoneCopySpaceList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:activity.SSomeoneCopySpaceList.pageLimit)
}

// int32 houseId = 6;
inline void SSomeoneCopySpaceList::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSomeoneCopySpaceList::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSomeoneCopySpaceList::houseid() const {
  // @@protoc_insertion_point(field_get:activity.SSomeoneCopySpaceList.houseId)
  return _internal_houseid();
}
inline void SSomeoneCopySpaceList::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SSomeoneCopySpaceList::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:activity.SSomeoneCopySpaceList.houseId)
}

// int32 houseType = 7;
inline void SSomeoneCopySpaceList::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSomeoneCopySpaceList::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSomeoneCopySpaceList::housetype() const {
  // @@protoc_insertion_point(field_get:activity.SSomeoneCopySpaceList.houseType)
  return _internal_housetype();
}
inline void SSomeoneCopySpaceList::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void SSomeoneCopySpaceList::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:activity.SSomeoneCopySpaceList.houseType)
}

// -------------------------------------------------------------------

// ActivityPartInfo

// int32 houseId = 1;
inline void ActivityPartInfo::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityPartInfo::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityPartInfo::houseid() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.houseId)
  return _internal_houseid();
}
inline void ActivityPartInfo::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void ActivityPartInfo::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.houseId)
}

// int32 houseType = 2;
inline void ActivityPartInfo::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityPartInfo::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityPartInfo::housetype() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.houseType)
  return _internal_housetype();
}
inline void ActivityPartInfo::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void ActivityPartInfo::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.houseType)
}

// int32 isCopy = 3;
inline void ActivityPartInfo::clear_iscopy() {
  iscopy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityPartInfo::_internal_iscopy() const {
  return iscopy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityPartInfo::iscopy() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.isCopy)
  return _internal_iscopy();
}
inline void ActivityPartInfo::_internal_set_iscopy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iscopy_ = value;
}
inline void ActivityPartInfo::set_iscopy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iscopy(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.isCopy)
}

// string houseName = 4;
inline void ActivityPartInfo::clear_housename() {
  housename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::housename() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.houseName)
  return _internal_housename();
}
inline void ActivityPartInfo::set_housename(const std::string& value) {
  _internal_set_housename(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.houseName)
}
inline std::string* ActivityPartInfo::mutable_housename() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.houseName)
  return _internal_mutable_housename();
}
inline const std::string& ActivityPartInfo::_internal_housename() const {
  return housename_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_housename(const std::string& value) {
  
  housename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_housename(std::string&& value) {
  
  housename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.houseName)
}
inline void ActivityPartInfo::set_housename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  housename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.houseName)
}
inline void ActivityPartInfo::set_housename(const char* value, size_t size) {
  
  housename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.houseName)
}
inline std::string* ActivityPartInfo::_internal_mutable_housename() {
  
  return housename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_housename() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.houseName)
  
  return housename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_housename(std::string* housename) {
  if (housename != nullptr) {
    
  } else {
    
  }
  housename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), housename);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.houseName)
}

// string houseSmartCover = 5;
inline void ActivityPartInfo::clear_housesmartcover() {
  housesmartcover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::housesmartcover() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.houseSmartCover)
  return _internal_housesmartcover();
}
inline void ActivityPartInfo::set_housesmartcover(const std::string& value) {
  _internal_set_housesmartcover(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.houseSmartCover)
}
inline std::string* ActivityPartInfo::mutable_housesmartcover() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.houseSmartCover)
  return _internal_mutable_housesmartcover();
}
inline const std::string& ActivityPartInfo::_internal_housesmartcover() const {
  return housesmartcover_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_housesmartcover(const std::string& value) {
  
  housesmartcover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_housesmartcover(std::string&& value) {
  
  housesmartcover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.houseSmartCover)
}
inline void ActivityPartInfo::set_housesmartcover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  housesmartcover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.houseSmartCover)
}
inline void ActivityPartInfo::set_housesmartcover(const char* value, size_t size) {
  
  housesmartcover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.houseSmartCover)
}
inline std::string* ActivityPartInfo::_internal_mutable_housesmartcover() {
  
  return housesmartcover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_housesmartcover() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.houseSmartCover)
  
  return housesmartcover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_housesmartcover(std::string* housesmartcover) {
  if (housesmartcover != nullptr) {
    
  } else {
    
  }
  housesmartcover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), housesmartcover);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.houseSmartCover)
}

// string houseBigCover = 6;
inline void ActivityPartInfo::clear_housebigcover() {
  housebigcover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::housebigcover() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.houseBigCover)
  return _internal_housebigcover();
}
inline void ActivityPartInfo::set_housebigcover(const std::string& value) {
  _internal_set_housebigcover(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.houseBigCover)
}
inline std::string* ActivityPartInfo::mutable_housebigcover() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.houseBigCover)
  return _internal_mutable_housebigcover();
}
inline const std::string& ActivityPartInfo::_internal_housebigcover() const {
  return housebigcover_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_housebigcover(const std::string& value) {
  
  housebigcover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_housebigcover(std::string&& value) {
  
  housebigcover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.houseBigCover)
}
inline void ActivityPartInfo::set_housebigcover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  housebigcover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.houseBigCover)
}
inline void ActivityPartInfo::set_housebigcover(const char* value, size_t size) {
  
  housebigcover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.houseBigCover)
}
inline std::string* ActivityPartInfo::_internal_mutable_housebigcover() {
  
  return housebigcover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_housebigcover() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.houseBigCover)
  
  return housebigcover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_housebigcover(std::string* housebigcover) {
  if (housebigcover != nullptr) {
    
  } else {
    
  }
  housebigcover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), housebigcover);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.houseBigCover)
}

// string houseDesc = 7;
inline void ActivityPartInfo::clear_housedesc() {
  housedesc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::housedesc() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.houseDesc)
  return _internal_housedesc();
}
inline void ActivityPartInfo::set_housedesc(const std::string& value) {
  _internal_set_housedesc(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.houseDesc)
}
inline std::string* ActivityPartInfo::mutable_housedesc() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.houseDesc)
  return _internal_mutable_housedesc();
}
inline const std::string& ActivityPartInfo::_internal_housedesc() const {
  return housedesc_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_housedesc(const std::string& value) {
  
  housedesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_housedesc(std::string&& value) {
  
  housedesc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.houseDesc)
}
inline void ActivityPartInfo::set_housedesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  housedesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.houseDesc)
}
inline void ActivityPartInfo::set_housedesc(const char* value, size_t size) {
  
  housedesc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.houseDesc)
}
inline std::string* ActivityPartInfo::_internal_mutable_housedesc() {
  
  return housedesc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_housedesc() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.houseDesc)
  
  return housedesc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_housedesc(std::string* housedesc) {
  if (housedesc != nullptr) {
    
  } else {
    
  }
  housedesc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), housedesc);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.houseDesc)
}

// string actorNick = 8;
inline void ActivityPartInfo::clear_actornick() {
  actornick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::actornick() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.actorNick)
  return _internal_actornick();
}
inline void ActivityPartInfo::set_actornick(const std::string& value) {
  _internal_set_actornick(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.actorNick)
}
inline std::string* ActivityPartInfo::mutable_actornick() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.actorNick)
  return _internal_mutable_actornick();
}
inline const std::string& ActivityPartInfo::_internal_actornick() const {
  return actornick_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_actornick(const std::string& value) {
  
  actornick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_actornick(std::string&& value) {
  
  actornick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.actorNick)
}
inline void ActivityPartInfo::set_actornick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actornick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.actorNick)
}
inline void ActivityPartInfo::set_actornick(const char* value, size_t size) {
  
  actornick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.actorNick)
}
inline std::string* ActivityPartInfo::_internal_mutable_actornick() {
  
  return actornick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_actornick() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.actorNick)
  
  return actornick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_actornick(std::string* actornick) {
  if (actornick != nullptr) {
    
  } else {
    
  }
  actornick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actornick);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.actorNick)
}

// string actorLabel = 9;
inline void ActivityPartInfo::clear_actorlabel() {
  actorlabel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::actorlabel() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.actorLabel)
  return _internal_actorlabel();
}
inline void ActivityPartInfo::set_actorlabel(const std::string& value) {
  _internal_set_actorlabel(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.actorLabel)
}
inline std::string* ActivityPartInfo::mutable_actorlabel() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.actorLabel)
  return _internal_mutable_actorlabel();
}
inline const std::string& ActivityPartInfo::_internal_actorlabel() const {
  return actorlabel_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_actorlabel(const std::string& value) {
  
  actorlabel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_actorlabel(std::string&& value) {
  
  actorlabel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.actorLabel)
}
inline void ActivityPartInfo::set_actorlabel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actorlabel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.actorLabel)
}
inline void ActivityPartInfo::set_actorlabel(const char* value, size_t size) {
  
  actorlabel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.actorLabel)
}
inline std::string* ActivityPartInfo::_internal_mutable_actorlabel() {
  
  return actorlabel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_actorlabel() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.actorLabel)
  
  return actorlabel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_actorlabel(std::string* actorlabel) {
  if (actorlabel != nullptr) {
    
  } else {
    
  }
  actorlabel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actorlabel);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.actorLabel)
}

// string startTime = 10;
inline void ActivityPartInfo::clear_starttime() {
  starttime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::starttime() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.startTime)
  return _internal_starttime();
}
inline void ActivityPartInfo::set_starttime(const std::string& value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.startTime)
}
inline std::string* ActivityPartInfo::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.startTime)
  return _internal_mutable_starttime();
}
inline const std::string& ActivityPartInfo::_internal_starttime() const {
  return starttime_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_starttime(const std::string& value) {
  
  starttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_starttime(std::string&& value) {
  
  starttime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.startTime)
}
inline void ActivityPartInfo::set_starttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  starttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.startTime)
}
inline void ActivityPartInfo::set_starttime(const char* value, size_t size) {
  
  starttime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.startTime)
}
inline std::string* ActivityPartInfo::_internal_mutable_starttime() {
  
  return starttime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_starttime() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.startTime)
  
  return starttime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_starttime(std::string* starttime) {
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starttime);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.startTime)
}

// string endTime = 11;
inline void ActivityPartInfo::clear_endtime() {
  endtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::endtime() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.endTime)
  return _internal_endtime();
}
inline void ActivityPartInfo::set_endtime(const std::string& value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.endTime)
}
inline std::string* ActivityPartInfo::mutable_endtime() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.endTime)
  return _internal_mutable_endtime();
}
inline const std::string& ActivityPartInfo::_internal_endtime() const {
  return endtime_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_endtime(const std::string& value) {
  
  endtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_endtime(std::string&& value) {
  
  endtime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.endTime)
}
inline void ActivityPartInfo::set_endtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.endTime)
}
inline void ActivityPartInfo::set_endtime(const char* value, size_t size) {
  
  endtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.endTime)
}
inline std::string* ActivityPartInfo::_internal_mutable_endtime() {
  
  return endtime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_endtime() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.endTime)
  
  return endtime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_endtime(std::string* endtime) {
  if (endtime != nullptr) {
    
  } else {
    
  }
  endtime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endtime);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.endTime)
}

// string startDuration = 12;
inline void ActivityPartInfo::clear_startduration() {
  startduration_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::startduration() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.startDuration)
  return _internal_startduration();
}
inline void ActivityPartInfo::set_startduration(const std::string& value) {
  _internal_set_startduration(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.startDuration)
}
inline std::string* ActivityPartInfo::mutable_startduration() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.startDuration)
  return _internal_mutable_startduration();
}
inline const std::string& ActivityPartInfo::_internal_startduration() const {
  return startduration_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_startduration(const std::string& value) {
  
  startduration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_startduration(std::string&& value) {
  
  startduration_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.startDuration)
}
inline void ActivityPartInfo::set_startduration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  startduration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.startDuration)
}
inline void ActivityPartInfo::set_startduration(const char* value, size_t size) {
  
  startduration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.startDuration)
}
inline std::string* ActivityPartInfo::_internal_mutable_startduration() {
  
  return startduration_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_startduration() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.startDuration)
  
  return startduration_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_startduration(std::string* startduration) {
  if (startduration != nullptr) {
    
  } else {
    
  }
  startduration_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), startduration);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.startDuration)
}

// string endDuration = 13;
inline void ActivityPartInfo::clear_endduration() {
  endduration_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::endduration() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.endDuration)
  return _internal_endduration();
}
inline void ActivityPartInfo::set_endduration(const std::string& value) {
  _internal_set_endduration(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.endDuration)
}
inline std::string* ActivityPartInfo::mutable_endduration() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.endDuration)
  return _internal_mutable_endduration();
}
inline const std::string& ActivityPartInfo::_internal_endduration() const {
  return endduration_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_endduration(const std::string& value) {
  
  endduration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_endduration(std::string&& value) {
  
  endduration_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.endDuration)
}
inline void ActivityPartInfo::set_endduration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endduration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.endDuration)
}
inline void ActivityPartInfo::set_endduration(const char* value, size_t size) {
  
  endduration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.endDuration)
}
inline std::string* ActivityPartInfo::_internal_mutable_endduration() {
  
  return endduration_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_endduration() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.endDuration)
  
  return endduration_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_endduration(std::string* endduration) {
  if (endduration != nullptr) {
    
  } else {
    
  }
  endduration_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endduration);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.endDuration)
}

// string creatorNick = 14;
inline void ActivityPartInfo::clear_creatornick() {
  creatornick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::creatornick() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.creatorNick)
  return _internal_creatornick();
}
inline void ActivityPartInfo::set_creatornick(const std::string& value) {
  _internal_set_creatornick(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.creatorNick)
}
inline std::string* ActivityPartInfo::mutable_creatornick() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.creatorNick)
  return _internal_mutable_creatornick();
}
inline const std::string& ActivityPartInfo::_internal_creatornick() const {
  return creatornick_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_creatornick(const std::string& value) {
  
  creatornick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_creatornick(std::string&& value) {
  
  creatornick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.creatorNick)
}
inline void ActivityPartInfo::set_creatornick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creatornick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.creatorNick)
}
inline void ActivityPartInfo::set_creatornick(const char* value, size_t size) {
  
  creatornick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.creatorNick)
}
inline std::string* ActivityPartInfo::_internal_mutable_creatornick() {
  
  return creatornick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_creatornick() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.creatorNick)
  
  return creatornick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_creatornick(std::string* creatornick) {
  if (creatornick != nullptr) {
    
  } else {
    
  }
  creatornick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creatornick);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.creatorNick)
}

// string creatorAvatar = 15;
inline void ActivityPartInfo::clear_creatoravatar() {
  creatoravatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::creatoravatar() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.creatorAvatar)
  return _internal_creatoravatar();
}
inline void ActivityPartInfo::set_creatoravatar(const std::string& value) {
  _internal_set_creatoravatar(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.creatorAvatar)
}
inline std::string* ActivityPartInfo::mutable_creatoravatar() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.creatorAvatar)
  return _internal_mutable_creatoravatar();
}
inline const std::string& ActivityPartInfo::_internal_creatoravatar() const {
  return creatoravatar_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_creatoravatar(const std::string& value) {
  
  creatoravatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_creatoravatar(std::string&& value) {
  
  creatoravatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.creatorAvatar)
}
inline void ActivityPartInfo::set_creatoravatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creatoravatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.creatorAvatar)
}
inline void ActivityPartInfo::set_creatoravatar(const char* value, size_t size) {
  
  creatoravatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.creatorAvatar)
}
inline std::string* ActivityPartInfo::_internal_mutable_creatoravatar() {
  
  return creatoravatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_creatoravatar() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.creatorAvatar)
  
  return creatoravatar_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_creatoravatar(std::string* creatoravatar) {
  if (creatoravatar != nullptr) {
    
  } else {
    
  }
  creatoravatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creatoravatar);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.creatorAvatar)
}

// int32 houseHot = 16;
inline void ActivityPartInfo::clear_househot() {
  househot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityPartInfo::_internal_househot() const {
  return househot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityPartInfo::househot() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.houseHot)
  return _internal_househot();
}
inline void ActivityPartInfo::_internal_set_househot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  househot_ = value;
}
inline void ActivityPartInfo::set_househot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_househot(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.houseHot)
}

// string houseCoverVideo = 17;
inline void ActivityPartInfo::clear_housecovervideo() {
  housecovervideo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityPartInfo::housecovervideo() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.houseCoverVideo)
  return _internal_housecovervideo();
}
inline void ActivityPartInfo::set_housecovervideo(const std::string& value) {
  _internal_set_housecovervideo(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.houseCoverVideo)
}
inline std::string* ActivityPartInfo::mutable_housecovervideo() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityPartInfo.houseCoverVideo)
  return _internal_mutable_housecovervideo();
}
inline const std::string& ActivityPartInfo::_internal_housecovervideo() const {
  return housecovervideo_.GetNoArena();
}
inline void ActivityPartInfo::_internal_set_housecovervideo(const std::string& value) {
  
  housecovervideo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityPartInfo::set_housecovervideo(std::string&& value) {
  
  housecovervideo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityPartInfo.houseCoverVideo)
}
inline void ActivityPartInfo::set_housecovervideo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  housecovervideo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityPartInfo.houseCoverVideo)
}
inline void ActivityPartInfo::set_housecovervideo(const char* value, size_t size) {
  
  housecovervideo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityPartInfo.houseCoverVideo)
}
inline std::string* ActivityPartInfo::_internal_mutable_housecovervideo() {
  
  return housecovervideo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityPartInfo::release_housecovervideo() {
  // @@protoc_insertion_point(field_release:activity.ActivityPartInfo.houseCoverVideo)
  
  return housecovervideo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityPartInfo::set_allocated_housecovervideo(std::string* housecovervideo) {
  if (housecovervideo != nullptr) {
    
  } else {
    
  }
  housecovervideo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), housecovervideo);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityPartInfo.houseCoverVideo)
}

// int32 scene = 18;
inline void ActivityPartInfo::clear_scene() {
  scene_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityPartInfo::_internal_scene() const {
  return scene_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityPartInfo::scene() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.scene)
  return _internal_scene();
}
inline void ActivityPartInfo::_internal_set_scene(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_ = value;
}
inline void ActivityPartInfo::set_scene(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.scene)
}

// int32 isExistTreasureBox = 19;
inline void ActivityPartInfo::clear_isexisttreasurebox() {
  isexisttreasurebox_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityPartInfo::_internal_isexisttreasurebox() const {
  return isexisttreasurebox_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityPartInfo::isexisttreasurebox() const {
  // @@protoc_insertion_point(field_get:activity.ActivityPartInfo.isExistTreasureBox)
  return _internal_isexisttreasurebox();
}
inline void ActivityPartInfo::_internal_set_isexisttreasurebox(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isexisttreasurebox_ = value;
}
inline void ActivityPartInfo::set_isexisttreasurebox(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isexisttreasurebox(value);
  // @@protoc_insertion_point(field_set:activity.ActivityPartInfo.isExistTreasureBox)
}

// -------------------------------------------------------------------

// QuerySpaceHotInfo

// int32 houseId = 1;
inline void QuerySpaceHotInfo::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuerySpaceHotInfo::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuerySpaceHotInfo::houseid() const {
  // @@protoc_insertion_point(field_get:activity.QuerySpaceHotInfo.houseId)
  return _internal_houseid();
}
inline void QuerySpaceHotInfo::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void QuerySpaceHotInfo::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:activity.QuerySpaceHotInfo.houseId)
}

// int32 houseType = 2;
inline void QuerySpaceHotInfo::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuerySpaceHotInfo::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QuerySpaceHotInfo::housetype() const {
  // @@protoc_insertion_point(field_get:activity.QuerySpaceHotInfo.houseType)
  return _internal_housetype();
}
inline void QuerySpaceHotInfo::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void QuerySpaceHotInfo::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:activity.QuerySpaceHotInfo.houseType)
}

// -------------------------------------------------------------------

// SpaceHotInfo

// int32 houseId = 1;
inline void SpaceHotInfo::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHotInfo::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHotInfo::houseid() const {
  // @@protoc_insertion_point(field_get:activity.SpaceHotInfo.houseId)
  return _internal_houseid();
}
inline void SpaceHotInfo::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void SpaceHotInfo::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:activity.SpaceHotInfo.houseId)
}

// int32 houseType = 2;
inline void SpaceHotInfo::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHotInfo::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHotInfo::housetype() const {
  // @@protoc_insertion_point(field_get:activity.SpaceHotInfo.houseType)
  return _internal_housetype();
}
inline void SpaceHotInfo::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void SpaceHotInfo::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:activity.SpaceHotInfo.houseType)
}

// int32 hotNum = 3;
inline void SpaceHotInfo::clear_hotnum() {
  hotnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHotInfo::_internal_hotnum() const {
  return hotnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceHotInfo::hotnum() const {
  // @@protoc_insertion_point(field_get:activity.SpaceHotInfo.hotNum)
  return _internal_hotnum();
}
inline void SpaceHotInfo::_internal_set_hotnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hotnum_ = value;
}
inline void SpaceHotInfo::set_hotnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hotnum(value);
  // @@protoc_insertion_point(field_set:activity.SpaceHotInfo.hotNum)
}

// -------------------------------------------------------------------

// ActivityCopySpaceInfo

// int32 houseId = 1;
inline void ActivityCopySpaceInfo::clear_houseid() {
  houseid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityCopySpaceInfo::_internal_houseid() const {
  return houseid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityCopySpaceInfo::houseid() const {
  // @@protoc_insertion_point(field_get:activity.ActivityCopySpaceInfo.houseId)
  return _internal_houseid();
}
inline void ActivityCopySpaceInfo::_internal_set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  houseid_ = value;
}
inline void ActivityCopySpaceInfo::set_houseid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_houseid(value);
  // @@protoc_insertion_point(field_set:activity.ActivityCopySpaceInfo.houseId)
}

// int32 houseType = 2;
inline void ActivityCopySpaceInfo::clear_housetype() {
  housetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityCopySpaceInfo::_internal_housetype() const {
  return housetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityCopySpaceInfo::housetype() const {
  // @@protoc_insertion_point(field_get:activity.ActivityCopySpaceInfo.houseType)
  return _internal_housetype();
}
inline void ActivityCopySpaceInfo::_internal_set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  housetype_ = value;
}
inline void ActivityCopySpaceInfo::set_housetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_housetype(value);
  // @@protoc_insertion_point(field_set:activity.ActivityCopySpaceInfo.houseType)
}

// int32 isOpen = 3;
inline void ActivityCopySpaceInfo::clear_isopen() {
  isopen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityCopySpaceInfo::_internal_isopen() const {
  return isopen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityCopySpaceInfo::isopen() const {
  // @@protoc_insertion_point(field_get:activity.ActivityCopySpaceInfo.isOpen)
  return _internal_isopen();
}
inline void ActivityCopySpaceInfo::_internal_set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isopen_ = value;
}
inline void ActivityCopySpaceInfo::set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isopen(value);
  // @@protoc_insertion_point(field_set:activity.ActivityCopySpaceInfo.isOpen)
}

// int32 currentOnline = 4;
inline void ActivityCopySpaceInfo::clear_currentonline() {
  currentonline_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityCopySpaceInfo::_internal_currentonline() const {
  return currentonline_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityCopySpaceInfo::currentonline() const {
  // @@protoc_insertion_point(field_get:activity.ActivityCopySpaceInfo.currentOnline)
  return _internal_currentonline();
}
inline void ActivityCopySpaceInfo::_internal_set_currentonline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentonline_ = value;
}
inline void ActivityCopySpaceInfo::set_currentonline(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currentonline(value);
  // @@protoc_insertion_point(field_set:activity.ActivityCopySpaceInfo.currentOnline)
}

// int32 uid = 5;
inline void ActivityCopySpaceInfo::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityCopySpaceInfo::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActivityCopySpaceInfo::uid() const {
  // @@protoc_insertion_point(field_get:activity.ActivityCopySpaceInfo.uid)
  return _internal_uid();
}
inline void ActivityCopySpaceInfo::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void ActivityCopySpaceInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:activity.ActivityCopySpaceInfo.uid)
}

// string userIcon = 6;
inline void ActivityCopySpaceInfo::clear_usericon() {
  usericon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityCopySpaceInfo::usericon() const {
  // @@protoc_insertion_point(field_get:activity.ActivityCopySpaceInfo.userIcon)
  return _internal_usericon();
}
inline void ActivityCopySpaceInfo::set_usericon(const std::string& value) {
  _internal_set_usericon(value);
  // @@protoc_insertion_point(field_set:activity.ActivityCopySpaceInfo.userIcon)
}
inline std::string* ActivityCopySpaceInfo::mutable_usericon() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityCopySpaceInfo.userIcon)
  return _internal_mutable_usericon();
}
inline const std::string& ActivityCopySpaceInfo::_internal_usericon() const {
  return usericon_.GetNoArena();
}
inline void ActivityCopySpaceInfo::_internal_set_usericon(const std::string& value) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityCopySpaceInfo::set_usericon(std::string&& value) {
  
  usericon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityCopySpaceInfo.userIcon)
}
inline void ActivityCopySpaceInfo::set_usericon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityCopySpaceInfo.userIcon)
}
inline void ActivityCopySpaceInfo::set_usericon(const char* value, size_t size) {
  
  usericon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityCopySpaceInfo.userIcon)
}
inline std::string* ActivityCopySpaceInfo::_internal_mutable_usericon() {
  
  return usericon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityCopySpaceInfo::release_usericon() {
  // @@protoc_insertion_point(field_release:activity.ActivityCopySpaceInfo.userIcon)
  
  return usericon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityCopySpaceInfo::set_allocated_usericon(std::string* usericon) {
  if (usericon != nullptr) {
    
  } else {
    
  }
  usericon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usericon);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityCopySpaceInfo.userIcon)
}

// string userNick = 7;
inline void ActivityCopySpaceInfo::clear_usernick() {
  usernick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityCopySpaceInfo::usernick() const {
  // @@protoc_insertion_point(field_get:activity.ActivityCopySpaceInfo.userNick)
  return _internal_usernick();
}
inline void ActivityCopySpaceInfo::set_usernick(const std::string& value) {
  _internal_set_usernick(value);
  // @@protoc_insertion_point(field_set:activity.ActivityCopySpaceInfo.userNick)
}
inline std::string* ActivityCopySpaceInfo::mutable_usernick() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityCopySpaceInfo.userNick)
  return _internal_mutable_usernick();
}
inline const std::string& ActivityCopySpaceInfo::_internal_usernick() const {
  return usernick_.GetNoArena();
}
inline void ActivityCopySpaceInfo::_internal_set_usernick(const std::string& value) {
  
  usernick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityCopySpaceInfo::set_usernick(std::string&& value) {
  
  usernick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityCopySpaceInfo.userNick)
}
inline void ActivityCopySpaceInfo::set_usernick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usernick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityCopySpaceInfo.userNick)
}
inline void ActivityCopySpaceInfo::set_usernick(const char* value, size_t size) {
  
  usernick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityCopySpaceInfo.userNick)
}
inline std::string* ActivityCopySpaceInfo::_internal_mutable_usernick() {
  
  return usernick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityCopySpaceInfo::release_usernick() {
  // @@protoc_insertion_point(field_release:activity.ActivityCopySpaceInfo.userNick)
  
  return usernick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityCopySpaceInfo::set_allocated_usernick(std::string* usernick) {
  if (usernick != nullptr) {
    
  } else {
    
  }
  usernick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usernick);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityCopySpaceInfo.userNick)
}

// string spaceName = 8;
inline void ActivityCopySpaceInfo::clear_spacename() {
  spacename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActivityCopySpaceInfo::spacename() const {
  // @@protoc_insertion_point(field_get:activity.ActivityCopySpaceInfo.spaceName)
  return _internal_spacename();
}
inline void ActivityCopySpaceInfo::set_spacename(const std::string& value) {
  _internal_set_spacename(value);
  // @@protoc_insertion_point(field_set:activity.ActivityCopySpaceInfo.spaceName)
}
inline std::string* ActivityCopySpaceInfo::mutable_spacename() {
  // @@protoc_insertion_point(field_mutable:activity.ActivityCopySpaceInfo.spaceName)
  return _internal_mutable_spacename();
}
inline const std::string& ActivityCopySpaceInfo::_internal_spacename() const {
  return spacename_.GetNoArena();
}
inline void ActivityCopySpaceInfo::_internal_set_spacename(const std::string& value) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ActivityCopySpaceInfo::set_spacename(std::string&& value) {
  
  spacename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:activity.ActivityCopySpaceInfo.spaceName)
}
inline void ActivityCopySpaceInfo::set_spacename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:activity.ActivityCopySpaceInfo.spaceName)
}
inline void ActivityCopySpaceInfo::set_spacename(const char* value, size_t size) {
  
  spacename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:activity.ActivityCopySpaceInfo.spaceName)
}
inline std::string* ActivityCopySpaceInfo::_internal_mutable_spacename() {
  
  return spacename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActivityCopySpaceInfo::release_spacename() {
  // @@protoc_insertion_point(field_release:activity.ActivityCopySpaceInfo.spaceName)
  
  return spacename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActivityCopySpaceInfo::set_allocated_spacename(std::string* spacename) {
  if (spacename != nullptr) {
    
  } else {
    
  }
  spacename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spacename);
  // @@protoc_insertion_point(field_set_allocated:activity.ActivityCopySpaceInfo.spaceName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace activity

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_activity_2eproto
