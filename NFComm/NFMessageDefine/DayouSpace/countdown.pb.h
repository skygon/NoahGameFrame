// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: countdown.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_countdown_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_countdown_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_countdown_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_countdown_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_countdown_2eproto;
namespace countdown {
class SCountdown;
class SCountdownDefaultTypeInternal;
extern SCountdownDefaultTypeInternal _SCountdown_default_instance_;
}  // namespace countdown
PROTOBUF_NAMESPACE_OPEN
template<> ::countdown::SCountdown* Arena::CreateMaybeMessage<::countdown::SCountdown>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace countdown {

// ===================================================================

class SCountdown :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:countdown.SCountdown) */ {
 public:
  SCountdown();
  virtual ~SCountdown();

  SCountdown(const SCountdown& from);
  SCountdown(SCountdown&& from) noexcept
    : SCountdown() {
    *this = ::std::move(from);
  }

  inline SCountdown& operator=(const SCountdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCountdown& operator=(SCountdown&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCountdown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCountdown* internal_default_instance() {
    return reinterpret_cast<const SCountdown*>(
               &_SCountdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SCountdown& a, SCountdown& b) {
    a.Swap(&b);
  }
  inline void Swap(SCountdown* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCountdown* New() const final {
    return CreateMaybeMessage<SCountdown>(nullptr);
  }

  SCountdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCountdown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCountdown& from);
  void MergeFrom(const SCountdown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCountdown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "countdown.SCountdown";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_countdown_2eproto);
    return ::descriptor_table_countdown_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountdownDescribeFieldNumber = 4,
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kCountdownTypeFieldNumber = 3,
    kIntervalTimeFieldNumber = 5,
  };
  // string countdownDescribe = 4;
  void clear_countdowndescribe();
  const std::string& countdowndescribe() const;
  void set_countdowndescribe(const std::string& value);
  void set_countdowndescribe(std::string&& value);
  void set_countdowndescribe(const char* value);
  void set_countdowndescribe(const char* value, size_t size);
  std::string* mutable_countdowndescribe();
  std::string* release_countdowndescribe();
  void set_allocated_countdowndescribe(std::string* countdowndescribe);
  private:
  const std::string& _internal_countdowndescribe() const;
  void _internal_set_countdowndescribe(const std::string& value);
  std::string* _internal_mutable_countdowndescribe();
  public:

  // int64 startTime = 1;
  void clear_starttime();
  ::PROTOBUF_NAMESPACE_ID::int64 starttime() const;
  void set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_starttime() const;
  void _internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 endTime = 2;
  void clear_endtime();
  ::PROTOBUF_NAMESPACE_ID::int64 endtime() const;
  void set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_endtime() const;
  void _internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 countdownType = 3;
  void clear_countdowntype();
  ::PROTOBUF_NAMESPACE_ID::int32 countdowntype() const;
  void set_countdowntype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_countdowntype() const;
  void _internal_set_countdowntype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 intervalTime = 5;
  void clear_intervaltime();
  ::PROTOBUF_NAMESPACE_ID::int32 intervaltime() const;
  void set_intervaltime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intervaltime() const;
  void _internal_set_intervaltime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:countdown.SCountdown)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countdowndescribe_;
  ::PROTOBUF_NAMESPACE_ID::int64 starttime_;
  ::PROTOBUF_NAMESPACE_ID::int64 endtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 countdowntype_;
  ::PROTOBUF_NAMESPACE_ID::int32 intervaltime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_countdown_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SCountdown

// int64 startTime = 1;
inline void SCountdown::clear_starttime() {
  starttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCountdown::_internal_starttime() const {
  return starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCountdown::starttime() const {
  // @@protoc_insertion_point(field_get:countdown.SCountdown.startTime)
  return _internal_starttime();
}
inline void SCountdown::_internal_set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  starttime_ = value;
}
inline void SCountdown::set_starttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:countdown.SCountdown.startTime)
}

// int64 endTime = 2;
inline void SCountdown::clear_endtime() {
  endtime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCountdown::_internal_endtime() const {
  return endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SCountdown::endtime() const {
  // @@protoc_insertion_point(field_get:countdown.SCountdown.endTime)
  return _internal_endtime();
}
inline void SCountdown::_internal_set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  endtime_ = value;
}
inline void SCountdown::set_endtime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:countdown.SCountdown.endTime)
}

// int32 countdownType = 3;
inline void SCountdown::clear_countdowntype() {
  countdowntype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCountdown::_internal_countdowntype() const {
  return countdowntype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCountdown::countdowntype() const {
  // @@protoc_insertion_point(field_get:countdown.SCountdown.countdownType)
  return _internal_countdowntype();
}
inline void SCountdown::_internal_set_countdowntype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  countdowntype_ = value;
}
inline void SCountdown::set_countdowntype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_countdowntype(value);
  // @@protoc_insertion_point(field_set:countdown.SCountdown.countdownType)
}

// string countdownDescribe = 4;
inline void SCountdown::clear_countdowndescribe() {
  countdowndescribe_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCountdown::countdowndescribe() const {
  // @@protoc_insertion_point(field_get:countdown.SCountdown.countdownDescribe)
  return _internal_countdowndescribe();
}
inline void SCountdown::set_countdowndescribe(const std::string& value) {
  _internal_set_countdowndescribe(value);
  // @@protoc_insertion_point(field_set:countdown.SCountdown.countdownDescribe)
}
inline std::string* SCountdown::mutable_countdowndescribe() {
  // @@protoc_insertion_point(field_mutable:countdown.SCountdown.countdownDescribe)
  return _internal_mutable_countdowndescribe();
}
inline const std::string& SCountdown::_internal_countdowndescribe() const {
  return countdowndescribe_.GetNoArena();
}
inline void SCountdown::_internal_set_countdowndescribe(const std::string& value) {
  
  countdowndescribe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCountdown::set_countdowndescribe(std::string&& value) {
  
  countdowndescribe_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:countdown.SCountdown.countdownDescribe)
}
inline void SCountdown::set_countdowndescribe(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  countdowndescribe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:countdown.SCountdown.countdownDescribe)
}
inline void SCountdown::set_countdowndescribe(const char* value, size_t size) {
  
  countdowndescribe_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:countdown.SCountdown.countdownDescribe)
}
inline std::string* SCountdown::_internal_mutable_countdowndescribe() {
  
  return countdowndescribe_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCountdown::release_countdowndescribe() {
  // @@protoc_insertion_point(field_release:countdown.SCountdown.countdownDescribe)
  
  return countdowndescribe_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCountdown::set_allocated_countdowndescribe(std::string* countdowndescribe) {
  if (countdowndescribe != nullptr) {
    
  } else {
    
  }
  countdowndescribe_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countdowndescribe);
  // @@protoc_insertion_point(field_set_allocated:countdown.SCountdown.countdownDescribe)
}

// int32 intervalTime = 5;
inline void SCountdown::clear_intervaltime() {
  intervaltime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCountdown::_internal_intervaltime() const {
  return intervaltime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCountdown::intervaltime() const {
  // @@protoc_insertion_point(field_get:countdown.SCountdown.intervalTime)
  return _internal_intervaltime();
}
inline void SCountdown::_internal_set_intervaltime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  intervaltime_ = value;
}
inline void SCountdown::set_intervaltime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_intervaltime(value);
  // @@protoc_insertion_point(field_set:countdown.SCountdown.intervalTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace countdown

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_countdown_2eproto
