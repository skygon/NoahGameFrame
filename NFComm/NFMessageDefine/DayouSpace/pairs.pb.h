// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pairs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pairs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pairs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pairs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pairs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pairs_2eproto;
namespace pairs {
class CRequestPairs;
class CRequestPairsDefaultTypeInternal;
extern CRequestPairsDefaultTypeInternal _CRequestPairs_default_instance_;
class SRequestPairs;
class SRequestPairsDefaultTypeInternal;
extern SRequestPairsDefaultTypeInternal _SRequestPairs_default_instance_;
class SResultPairs;
class SResultPairsDefaultTypeInternal;
extern SResultPairsDefaultTypeInternal _SResultPairs_default_instance_;
}  // namespace pairs
PROTOBUF_NAMESPACE_OPEN
template<> ::pairs::CRequestPairs* Arena::CreateMaybeMessage<::pairs::CRequestPairs>(Arena*);
template<> ::pairs::SRequestPairs* Arena::CreateMaybeMessage<::pairs::SRequestPairs>(Arena*);
template<> ::pairs::SResultPairs* Arena::CreateMaybeMessage<::pairs::SResultPairs>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pairs {

// ===================================================================

class CRequestPairs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pairs.CRequestPairs) */ {
 public:
  CRequestPairs();
  virtual ~CRequestPairs();

  CRequestPairs(const CRequestPairs& from);
  CRequestPairs(CRequestPairs&& from) noexcept
    : CRequestPairs() {
    *this = ::std::move(from);
  }

  inline CRequestPairs& operator=(const CRequestPairs& from) {
    CopyFrom(from);
    return *this;
  }
  inline CRequestPairs& operator=(CRequestPairs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CRequestPairs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CRequestPairs* internal_default_instance() {
    return reinterpret_cast<const CRequestPairs*>(
               &_CRequestPairs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CRequestPairs& a, CRequestPairs& b) {
    a.Swap(&b);
  }
  inline void Swap(CRequestPairs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CRequestPairs* New() const final {
    return CreateMaybeMessage<CRequestPairs>(nullptr);
  }

  CRequestPairs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CRequestPairs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CRequestPairs& from);
  void MergeFrom(const CRequestPairs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CRequestPairs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pairs.CRequestPairs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pairs_2eproto);
    return ::descriptor_table_pairs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidListFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated int32 uidList = 1;
  int uidlist_size() const;
  private:
  int _internal_uidlist_size() const;
  public:
  void clear_uidlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uidlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uidlist() const;
  void _internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uidlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uidlist(int index) const;
  void set_uidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uidlist();

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pairs.CRequestPairs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uidlist_;
  mutable std::atomic<int> _uidlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pairs_2eproto;
};
// -------------------------------------------------------------------

class SRequestPairs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pairs.SRequestPairs) */ {
 public:
  SRequestPairs();
  virtual ~SRequestPairs();

  SRequestPairs(const SRequestPairs& from);
  SRequestPairs(SRequestPairs&& from) noexcept
    : SRequestPairs() {
    *this = ::std::move(from);
  }

  inline SRequestPairs& operator=(const SRequestPairs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRequestPairs& operator=(SRequestPairs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SRequestPairs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SRequestPairs* internal_default_instance() {
    return reinterpret_cast<const SRequestPairs*>(
               &_SRequestPairs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SRequestPairs& a, SRequestPairs& b) {
    a.Swap(&b);
  }
  inline void Swap(SRequestPairs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SRequestPairs* New() const final {
    return CreateMaybeMessage<SRequestPairs>(nullptr);
  }

  SRequestPairs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SRequestPairs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SRequestPairs& from);
  void MergeFrom(const SRequestPairs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRequestPairs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pairs.SRequestPairs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pairs_2eproto);
    return ::descriptor_table_pairs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickFieldNumber = 3,
    kUidFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string nick = 3;
  void clear_nick();
  const std::string& nick() const;
  void set_nick(const std::string& value);
  void set_nick(std::string&& value);
  void set_nick(const char* value);
  void set_nick(const char* value, size_t size);
  std::string* mutable_nick();
  std::string* release_nick();
  void set_allocated_nick(std::string* nick);
  private:
  const std::string& _internal_nick() const;
  void _internal_set_nick(const std::string& value);
  std::string* _internal_mutable_nick();
  public:

  // int32 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uid() const;
  void _internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pairs.SRequestPairs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pairs_2eproto;
};
// -------------------------------------------------------------------

class SResultPairs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pairs.SResultPairs) */ {
 public:
  SResultPairs();
  virtual ~SResultPairs();

  SResultPairs(const SResultPairs& from);
  SResultPairs(SResultPairs&& from) noexcept
    : SResultPairs() {
    *this = ::std::move(from);
  }

  inline SResultPairs& operator=(const SResultPairs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SResultPairs& operator=(SResultPairs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SResultPairs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SResultPairs* internal_default_instance() {
    return reinterpret_cast<const SResultPairs*>(
               &_SResultPairs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SResultPairs& a, SResultPairs& b) {
    a.Swap(&b);
  }
  inline void Swap(SResultPairs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SResultPairs* New() const final {
    return CreateMaybeMessage<SResultPairs>(nullptr);
  }

  SResultPairs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SResultPairs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SResultPairs& from);
  void MergeFrom(const SResultPairs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SResultPairs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pairs.SResultPairs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pairs_2eproto);
    return ::descriptor_table_pairs_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidListFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated int32 uidList = 1;
  int uidlist_size() const;
  private:
  int _internal_uidlist_size() const;
  public:
  void clear_uidlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uidlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_uidlist() const;
  void _internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_uidlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 uidlist(int index) const;
  void set_uidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      uidlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_uidlist();

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pairs.SResultPairs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > uidlist_;
  mutable std::atomic<int> _uidlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pairs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CRequestPairs

// repeated int32 uidList = 1;
inline int CRequestPairs::_internal_uidlist_size() const {
  return uidlist_.size();
}
inline int CRequestPairs::uidlist_size() const {
  return _internal_uidlist_size();
}
inline void CRequestPairs::clear_uidlist() {
  uidlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CRequestPairs::_internal_uidlist(int index) const {
  return uidlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CRequestPairs::uidlist(int index) const {
  // @@protoc_insertion_point(field_get:pairs.CRequestPairs.uidList)
  return _internal_uidlist(index);
}
inline void CRequestPairs::set_uidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:pairs.CRequestPairs.uidList)
}
inline void CRequestPairs::_internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uidlist_.Add(value);
}
inline void CRequestPairs::add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uidlist(value);
  // @@protoc_insertion_point(field_add:pairs.CRequestPairs.uidList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CRequestPairs::_internal_uidlist() const {
  return uidlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CRequestPairs::uidlist() const {
  // @@protoc_insertion_point(field_list:pairs.CRequestPairs.uidList)
  return _internal_uidlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CRequestPairs::_internal_mutable_uidlist() {
  return &uidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CRequestPairs::mutable_uidlist() {
  // @@protoc_insertion_point(field_mutable_list:pairs.CRequestPairs.uidList)
  return _internal_mutable_uidlist();
}

// int32 type = 2;
inline void CRequestPairs::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CRequestPairs::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CRequestPairs::type() const {
  // @@protoc_insertion_point(field_get:pairs.CRequestPairs.type)
  return _internal_type();
}
inline void CRequestPairs::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CRequestPairs::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pairs.CRequestPairs.type)
}

// -------------------------------------------------------------------

// SRequestPairs

// int32 uid = 1;
inline void SRequestPairs::clear_uid() {
  uid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRequestPairs::_internal_uid() const {
  return uid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRequestPairs::uid() const {
  // @@protoc_insertion_point(field_get:pairs.SRequestPairs.uid)
  return _internal_uid();
}
inline void SRequestPairs::_internal_set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  uid_ = value;
}
inline void SRequestPairs::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:pairs.SRequestPairs.uid)
}

// int32 type = 2;
inline void SRequestPairs::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRequestPairs::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SRequestPairs::type() const {
  // @@protoc_insertion_point(field_get:pairs.SRequestPairs.type)
  return _internal_type();
}
inline void SRequestPairs::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SRequestPairs::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pairs.SRequestPairs.type)
}

// string nick = 3;
inline void SRequestPairs::clear_nick() {
  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SRequestPairs::nick() const {
  // @@protoc_insertion_point(field_get:pairs.SRequestPairs.nick)
  return _internal_nick();
}
inline void SRequestPairs::set_nick(const std::string& value) {
  _internal_set_nick(value);
  // @@protoc_insertion_point(field_set:pairs.SRequestPairs.nick)
}
inline std::string* SRequestPairs::mutable_nick() {
  // @@protoc_insertion_point(field_mutable:pairs.SRequestPairs.nick)
  return _internal_mutable_nick();
}
inline const std::string& SRequestPairs::_internal_nick() const {
  return nick_.GetNoArena();
}
inline void SRequestPairs::_internal_set_nick(const std::string& value) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SRequestPairs::set_nick(std::string&& value) {
  
  nick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pairs.SRequestPairs.nick)
}
inline void SRequestPairs::set_nick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pairs.SRequestPairs.nick)
}
inline void SRequestPairs::set_nick(const char* value, size_t size) {
  
  nick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pairs.SRequestPairs.nick)
}
inline std::string* SRequestPairs::_internal_mutable_nick() {
  
  return nick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SRequestPairs::release_nick() {
  // @@protoc_insertion_point(field_release:pairs.SRequestPairs.nick)
  
  return nick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SRequestPairs::set_allocated_nick(std::string* nick) {
  if (nick != nullptr) {
    
  } else {
    
  }
  nick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick);
  // @@protoc_insertion_point(field_set_allocated:pairs.SRequestPairs.nick)
}

// -------------------------------------------------------------------

// SResultPairs

// repeated int32 uidList = 1;
inline int SResultPairs::_internal_uidlist_size() const {
  return uidlist_.size();
}
inline int SResultPairs::uidlist_size() const {
  return _internal_uidlist_size();
}
inline void SResultPairs::clear_uidlist() {
  uidlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SResultPairs::_internal_uidlist(int index) const {
  return uidlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SResultPairs::uidlist(int index) const {
  // @@protoc_insertion_point(field_get:pairs.SResultPairs.uidList)
  return _internal_uidlist(index);
}
inline void SResultPairs::set_uidlist(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  uidlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:pairs.SResultPairs.uidList)
}
inline void SResultPairs::_internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  uidlist_.Add(value);
}
inline void SResultPairs::add_uidlist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_uidlist(value);
  // @@protoc_insertion_point(field_add:pairs.SResultPairs.uidList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SResultPairs::_internal_uidlist() const {
  return uidlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SResultPairs::uidlist() const {
  // @@protoc_insertion_point(field_list:pairs.SResultPairs.uidList)
  return _internal_uidlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SResultPairs::_internal_mutable_uidlist() {
  return &uidlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SResultPairs::mutable_uidlist() {
  // @@protoc_insertion_point(field_mutable_list:pairs.SResultPairs.uidList)
  return _internal_mutable_uidlist();
}

// int32 type = 2;
inline void SResultPairs::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SResultPairs::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SResultPairs::type() const {
  // @@protoc_insertion_point(field_get:pairs.SResultPairs.type)
  return _internal_type();
}
inline void SResultPairs::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void SResultPairs::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:pairs.SResultPairs.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pairs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pairs_2eproto
