// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chipConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chipConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chipConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chipConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chipConfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chipConfig_2eproto;
namespace chipConfig {
class GoodsMsg;
class GoodsMsgDefaultTypeInternal;
extern GoodsMsgDefaultTypeInternal _GoodsMsg_default_instance_;
class SChipConfig;
class SChipConfigDefaultTypeInternal;
extern SChipConfigDefaultTypeInternal _SChipConfig_default_instance_;
}  // namespace chipConfig
PROTOBUF_NAMESPACE_OPEN
template<> ::chipConfig::GoodsMsg* Arena::CreateMaybeMessage<::chipConfig::GoodsMsg>(Arena*);
template<> ::chipConfig::SChipConfig* Arena::CreateMaybeMessage<::chipConfig::SChipConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chipConfig {

// ===================================================================

class GoodsMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chipConfig.GoodsMsg) */ {
 public:
  GoodsMsg();
  virtual ~GoodsMsg();

  GoodsMsg(const GoodsMsg& from);
  GoodsMsg(GoodsMsg&& from) noexcept
    : GoodsMsg() {
    *this = ::std::move(from);
  }

  inline GoodsMsg& operator=(const GoodsMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoodsMsg& operator=(GoodsMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GoodsMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoodsMsg* internal_default_instance() {
    return reinterpret_cast<const GoodsMsg*>(
               &_GoodsMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GoodsMsg& a, GoodsMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GoodsMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoodsMsg* New() const final {
    return CreateMaybeMessage<GoodsMsg>(nullptr);
  }

  GoodsMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoodsMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoodsMsg& from);
  void MergeFrom(const GoodsMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoodsMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chipConfig.GoodsMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipConfig_2eproto);
    return ::descriptor_table_chipConfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kGoodsIdFieldNumber = 2,
  };
  // int32 position = 1;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::int32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 2;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chipConfig.GoodsMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipConfig_2eproto;
};
// -------------------------------------------------------------------

class SChipConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chipConfig.SChipConfig) */ {
 public:
  SChipConfig();
  virtual ~SChipConfig();

  SChipConfig(const SChipConfig& from);
  SChipConfig(SChipConfig&& from) noexcept
    : SChipConfig() {
    *this = ::std::move(from);
  }

  inline SChipConfig& operator=(const SChipConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SChipConfig& operator=(SChipConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SChipConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SChipConfig* internal_default_instance() {
    return reinterpret_cast<const SChipConfig*>(
               &_SChipConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SChipConfig& a, SChipConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SChipConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SChipConfig* New() const final {
    return CreateMaybeMessage<SChipConfig>(nullptr);
  }

  SChipConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SChipConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SChipConfig& from);
  void MergeFrom(const SChipConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SChipConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chipConfig.SChipConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_chipConfig_2eproto);
    return ::descriptor_table_chipConfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsListFieldNumber = 1,
  };
  // repeated .chipConfig.GoodsMsg goodsList = 1;
  int goodslist_size() const;
  private:
  int _internal_goodslist_size() const;
  public:
  void clear_goodslist();
  ::chipConfig::GoodsMsg* mutable_goodslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipConfig::GoodsMsg >*
      mutable_goodslist();
  private:
  const ::chipConfig::GoodsMsg& _internal_goodslist(int index) const;
  ::chipConfig::GoodsMsg* _internal_add_goodslist();
  public:
  const ::chipConfig::GoodsMsg& goodslist(int index) const;
  ::chipConfig::GoodsMsg* add_goodslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipConfig::GoodsMsg >&
      goodslist() const;

  // @@protoc_insertion_point(class_scope:chipConfig.SChipConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipConfig::GoodsMsg > goodslist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_chipConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GoodsMsg

// int32 position = 1;
inline void GoodsMsg::clear_position() {
  position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoodsMsg::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoodsMsg::position() const {
  // @@protoc_insertion_point(field_get:chipConfig.GoodsMsg.position)
  return _internal_position();
}
inline void GoodsMsg::_internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  position_ = value;
}
inline void GoodsMsg::set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:chipConfig.GoodsMsg.position)
}

// int32 goodsId = 2;
inline void GoodsMsg::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoodsMsg::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoodsMsg::goodsid() const {
  // @@protoc_insertion_point(field_get:chipConfig.GoodsMsg.goodsId)
  return _internal_goodsid();
}
inline void GoodsMsg::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void GoodsMsg::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:chipConfig.GoodsMsg.goodsId)
}

// -------------------------------------------------------------------

// SChipConfig

// repeated .chipConfig.GoodsMsg goodsList = 1;
inline int SChipConfig::_internal_goodslist_size() const {
  return goodslist_.size();
}
inline int SChipConfig::goodslist_size() const {
  return _internal_goodslist_size();
}
inline void SChipConfig::clear_goodslist() {
  goodslist_.Clear();
}
inline ::chipConfig::GoodsMsg* SChipConfig::mutable_goodslist(int index) {
  // @@protoc_insertion_point(field_mutable:chipConfig.SChipConfig.goodsList)
  return goodslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipConfig::GoodsMsg >*
SChipConfig::mutable_goodslist() {
  // @@protoc_insertion_point(field_mutable_list:chipConfig.SChipConfig.goodsList)
  return &goodslist_;
}
inline const ::chipConfig::GoodsMsg& SChipConfig::_internal_goodslist(int index) const {
  return goodslist_.Get(index);
}
inline const ::chipConfig::GoodsMsg& SChipConfig::goodslist(int index) const {
  // @@protoc_insertion_point(field_get:chipConfig.SChipConfig.goodsList)
  return _internal_goodslist(index);
}
inline ::chipConfig::GoodsMsg* SChipConfig::_internal_add_goodslist() {
  return goodslist_.Add();
}
inline ::chipConfig::GoodsMsg* SChipConfig::add_goodslist() {
  // @@protoc_insertion_point(field_add:chipConfig.SChipConfig.goodsList)
  return _internal_add_goodslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chipConfig::GoodsMsg >&
SChipConfig::goodslist() const {
  // @@protoc_insertion_point(field_list:chipConfig.SChipConfig.goodsList)
  return goodslist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chipConfig

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chipConfig_2eproto
