// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: house.proto

#include "house.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_house_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_houseMsg_house_2eproto;
namespace house {
class houseMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<houseMsg> _instance;
} _houseMsg_default_instance_;
class CAddPieceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CAddPiece> _instance;
} _CAddPiece_default_instance_;
class SAddPieceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAddPiece> _instance;
} _SAddPiece_default_instance_;
class CGetNftPieceFromHouseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CGetNftPieceFromHouse> _instance;
} _CGetNftPieceFromHouse_default_instance_;
class SGetNftPieceFromHouseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SGetNftPieceFromHouse> _instance;
} _SGetNftPieceFromHouse_default_instance_;
class CHouseDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHouseDetail> _instance;
} _CHouseDetail_default_instance_;
class SHouseDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SHouseDetail> _instance;
} _SHouseDetail_default_instance_;
}  // namespace house
static void InitDefaultsscc_info_CAddPiece_house_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::house::_CAddPiece_default_instance_;
    new (ptr) ::house::CAddPiece();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::house::CAddPiece::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CAddPiece_house_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CAddPiece_house_2eproto}, {
      &scc_info_houseMsg_house_2eproto.base,}};

static void InitDefaultsscc_info_CGetNftPieceFromHouse_house_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::house::_CGetNftPieceFromHouse_default_instance_;
    new (ptr) ::house::CGetNftPieceFromHouse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::house::CGetNftPieceFromHouse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CGetNftPieceFromHouse_house_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CGetNftPieceFromHouse_house_2eproto}, {}};

static void InitDefaultsscc_info_CHouseDetail_house_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::house::_CHouseDetail_default_instance_;
    new (ptr) ::house::CHouseDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::house::CHouseDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHouseDetail_house_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHouseDetail_house_2eproto}, {}};

static void InitDefaultsscc_info_SAddPiece_house_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::house::_SAddPiece_default_instance_;
    new (ptr) ::house::SAddPiece();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::house::SAddPiece::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAddPiece_house_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SAddPiece_house_2eproto}, {}};

static void InitDefaultsscc_info_SGetNftPieceFromHouse_house_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::house::_SGetNftPieceFromHouse_default_instance_;
    new (ptr) ::house::SGetNftPieceFromHouse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::house::SGetNftPieceFromHouse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SGetNftPieceFromHouse_house_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SGetNftPieceFromHouse_house_2eproto}, {}};

static void InitDefaultsscc_info_SHouseDetail_house_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::house::_SHouseDetail_default_instance_;
    new (ptr) ::house::SHouseDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::house::SHouseDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SHouseDetail_house_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SHouseDetail_house_2eproto}, {}};

static void InitDefaultsscc_info_houseMsg_house_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::house::_houseMsg_default_instance_;
    new (ptr) ::house::houseMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::house::houseMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_houseMsg_house_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_houseMsg_house_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_house_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_house_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_house_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_house_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::house::houseMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::house::houseMsg, houseid_),
  PROTOBUF_FIELD_OFFSET(::house::houseMsg, locationid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::house::CAddPiece, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::house::CAddPiece, houseinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::house::SAddPiece, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::house::SAddPiece, type_),
  PROTOBUF_FIELD_OFFSET(::house::SAddPiece, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::house::CGetNftPieceFromHouse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::house::CGetNftPieceFromHouse, houseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::house::SGetNftPieceFromHouse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::house::SGetNftPieceFromHouse, locations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::house::CHouseDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::house::CHouseDetail, houseid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, nftid_),
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, meshalias_),
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, title_),
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, image_),
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, hostuid_),
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, houseid_),
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, likes_),
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, pv_),
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, selfhashouse_),
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, hostavatar_),
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, hostnick_),
  PROTOBUF_FIELD_OFFSET(::house::SHouseDetail, scene_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::house::houseMsg)},
  { 7, -1, sizeof(::house::CAddPiece)},
  { 13, -1, sizeof(::house::SAddPiece)},
  { 20, -1, sizeof(::house::CGetNftPieceFromHouse)},
  { 26, -1, sizeof(::house::SGetNftPieceFromHouse)},
  { 32, -1, sizeof(::house::CHouseDetail)},
  { 38, -1, sizeof(::house::SHouseDetail)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::house::_houseMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::house::_CAddPiece_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::house::_SAddPiece_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::house::_CGetNftPieceFromHouse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::house::_SGetNftPieceFromHouse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::house::_CHouseDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::house::_SHouseDetail_default_instance_),
};

const char descriptor_table_protodef_house_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013house.proto\022\005house\"/\n\010houseMsg\022\017\n\007hous"
  "eId\030\001 \001(\005\022\022\n\nlocationId\030\002 \001(\005\"/\n\tCAddPie"
  "ce\022\"\n\thouseInfo\030\001 \001(\0132\017.house.houseMsg\"%"
  "\n\tSAddPiece\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"(\n"
  "\025CGetNftPieceFromHouse\022\017\n\007houseId\030\001 \001(\005\""
  "*\n\025SGetNftPieceFromHouse\022\021\n\tlocations\030\001 "
  "\003(\005\"\037\n\014CHouseDetail\022\017\n\007houseId\030\001 \001(\005\"\326\001\n"
  "\014SHouseDetail\022\r\n\005nftId\030\001 \001(\005\022\021\n\tmeshAlia"
  "s\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\r\n\005image\030\004 \001(\t\022\017\n"
  "\007hostUid\030\005 \001(\005\022\017\n\007houseId\030\006 \001(\005\022\r\n\005likes"
  "\030\007 \001(\005\022\n\n\002pv\030\010 \001(\005\022\024\n\014selfHasHouse\030\t \001(\010"
  "\022\022\n\nhostAvatar\030\n \001(\t\022\020\n\010hostNick\030\013 \001(\t\022\r"
  "\n\005scene\030\014 \001(\005B!\n\030com.dayou.space.protobu"
  "fB\005Houseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_house_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_house_2eproto_sccs[7] = {
  &scc_info_CAddPiece_house_2eproto.base,
  &scc_info_CGetNftPieceFromHouse_house_2eproto.base,
  &scc_info_CHouseDetail_house_2eproto.base,
  &scc_info_SAddPiece_house_2eproto.base,
  &scc_info_SGetNftPieceFromHouse_house_2eproto.base,
  &scc_info_SHouseDetail_house_2eproto.base,
  &scc_info_houseMsg_house_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_house_2eproto_once;
static bool descriptor_table_house_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_house_2eproto = {
  &descriptor_table_house_2eproto_initialized, descriptor_table_protodef_house_2eproto, "house.proto", 536,
  &descriptor_table_house_2eproto_once, descriptor_table_house_2eproto_sccs, descriptor_table_house_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_house_2eproto::offsets,
  file_level_metadata_house_2eproto, 7, file_level_enum_descriptors_house_2eproto, file_level_service_descriptors_house_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_house_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_house_2eproto), true);
namespace house {

// ===================================================================

void houseMsg::InitAsDefaultInstance() {
}
class houseMsg::_Internal {
 public:
};

houseMsg::houseMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:house.houseMsg)
}
houseMsg::houseMsg(const houseMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&houseid_, &from.houseid_,
    static_cast<size_t>(reinterpret_cast<char*>(&locationid_) -
    reinterpret_cast<char*>(&houseid_)) + sizeof(locationid_));
  // @@protoc_insertion_point(copy_constructor:house.houseMsg)
}

void houseMsg::SharedCtor() {
  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locationid_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(locationid_));
}

houseMsg::~houseMsg() {
  // @@protoc_insertion_point(destructor:house.houseMsg)
  SharedDtor();
}

void houseMsg::SharedDtor() {
}

void houseMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const houseMsg& houseMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_houseMsg_house_2eproto.base);
  return *internal_default_instance();
}


void houseMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:house.houseMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&houseid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locationid_) -
      reinterpret_cast<char*>(&houseid_)) + sizeof(locationid_));
  _internal_metadata_.Clear();
}

const char* houseMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 locationId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          locationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* houseMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:house.houseMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  // int32 locationId = 2;
  if (this->locationid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_locationid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:house.houseMsg)
  return target;
}

size_t houseMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:house.houseMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 locationId = 2;
  if (this->locationid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_locationid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void houseMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:house.houseMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const houseMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<houseMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:house.houseMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:house.houseMsg)
    MergeFrom(*source);
  }
}

void houseMsg::MergeFrom(const houseMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:house.houseMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.locationid() != 0) {
    _internal_set_locationid(from._internal_locationid());
  }
}

void houseMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:house.houseMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void houseMsg::CopyFrom(const houseMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:house.houseMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool houseMsg::IsInitialized() const {
  return true;
}

void houseMsg::InternalSwap(houseMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
  swap(locationid_, other->locationid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata houseMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CAddPiece::InitAsDefaultInstance() {
  ::house::_CAddPiece_default_instance_._instance.get_mutable()->houseinfo_ = const_cast< ::house::houseMsg*>(
      ::house::houseMsg::internal_default_instance());
}
class CAddPiece::_Internal {
 public:
  static const ::house::houseMsg& houseinfo(const CAddPiece* msg);
};

const ::house::houseMsg&
CAddPiece::_Internal::houseinfo(const CAddPiece* msg) {
  return *msg->houseinfo_;
}
CAddPiece::CAddPiece()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:house.CAddPiece)
}
CAddPiece::CAddPiece(const CAddPiece& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_houseinfo()) {
    houseinfo_ = new ::house::houseMsg(*from.houseinfo_);
  } else {
    houseinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:house.CAddPiece)
}

void CAddPiece::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CAddPiece_house_2eproto.base);
  houseinfo_ = nullptr;
}

CAddPiece::~CAddPiece() {
  // @@protoc_insertion_point(destructor:house.CAddPiece)
  SharedDtor();
}

void CAddPiece::SharedDtor() {
  if (this != internal_default_instance()) delete houseinfo_;
}

void CAddPiece::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAddPiece& CAddPiece::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CAddPiece_house_2eproto.base);
  return *internal_default_instance();
}


void CAddPiece::Clear() {
// @@protoc_insertion_point(message_clear_start:house.CAddPiece)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && houseinfo_ != nullptr) {
    delete houseinfo_;
  }
  houseinfo_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CAddPiece::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .house.houseMsg houseInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_houseinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAddPiece::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:house.CAddPiece)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .house.houseMsg houseInfo = 1;
  if (this->has_houseinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::houseinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:house.CAddPiece)
  return target;
}

size_t CAddPiece::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:house.CAddPiece)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .house.houseMsg houseInfo = 1;
  if (this->has_houseinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *houseinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAddPiece::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:house.CAddPiece)
  GOOGLE_DCHECK_NE(&from, this);
  const CAddPiece* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAddPiece>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:house.CAddPiece)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:house.CAddPiece)
    MergeFrom(*source);
  }
}

void CAddPiece::MergeFrom(const CAddPiece& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:house.CAddPiece)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_houseinfo()) {
    _internal_mutable_houseinfo()->::house::houseMsg::MergeFrom(from._internal_houseinfo());
  }
}

void CAddPiece::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:house.CAddPiece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAddPiece::CopyFrom(const CAddPiece& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:house.CAddPiece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAddPiece::IsInitialized() const {
  return true;
}

void CAddPiece::InternalSwap(CAddPiece* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseinfo_, other->houseinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAddPiece::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SAddPiece::InitAsDefaultInstance() {
}
class SAddPiece::_Internal {
 public:
};

SAddPiece::SAddPiece()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:house.SAddPiece)
}
SAddPiece::SAddPiece(const SAddPiece& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:house.SAddPiece)
}

void SAddPiece::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
}

SAddPiece::~SAddPiece() {
  // @@protoc_insertion_point(destructor:house.SAddPiece)
  SharedDtor();
}

void SAddPiece::SharedDtor() {
}

void SAddPiece::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAddPiece& SAddPiece::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAddPiece_house_2eproto.base);
  return *internal_default_instance();
}


void SAddPiece::Clear() {
// @@protoc_insertion_point(message_clear_start:house.SAddPiece)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

const char* SAddPiece::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAddPiece::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:house.SAddPiece)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:house.SAddPiece)
  return target;
}

size_t SAddPiece::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:house.SAddPiece)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAddPiece::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:house.SAddPiece)
  GOOGLE_DCHECK_NE(&from, this);
  const SAddPiece* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAddPiece>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:house.SAddPiece)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:house.SAddPiece)
    MergeFrom(*source);
  }
}

void SAddPiece::MergeFrom(const SAddPiece& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:house.SAddPiece)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void SAddPiece::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:house.SAddPiece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAddPiece::CopyFrom(const SAddPiece& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:house.SAddPiece)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAddPiece::IsInitialized() const {
  return true;
}

void SAddPiece::InternalSwap(SAddPiece* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SAddPiece::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CGetNftPieceFromHouse::InitAsDefaultInstance() {
}
class CGetNftPieceFromHouse::_Internal {
 public:
};

CGetNftPieceFromHouse::CGetNftPieceFromHouse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:house.CGetNftPieceFromHouse)
}
CGetNftPieceFromHouse::CGetNftPieceFromHouse(const CGetNftPieceFromHouse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  houseid_ = from.houseid_;
  // @@protoc_insertion_point(copy_constructor:house.CGetNftPieceFromHouse)
}

void CGetNftPieceFromHouse::SharedCtor() {
  houseid_ = 0;
}

CGetNftPieceFromHouse::~CGetNftPieceFromHouse() {
  // @@protoc_insertion_point(destructor:house.CGetNftPieceFromHouse)
  SharedDtor();
}

void CGetNftPieceFromHouse::SharedDtor() {
}

void CGetNftPieceFromHouse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGetNftPieceFromHouse& CGetNftPieceFromHouse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CGetNftPieceFromHouse_house_2eproto.base);
  return *internal_default_instance();
}


void CGetNftPieceFromHouse::Clear() {
// @@protoc_insertion_point(message_clear_start:house.CGetNftPieceFromHouse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  houseid_ = 0;
  _internal_metadata_.Clear();
}

const char* CGetNftPieceFromHouse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGetNftPieceFromHouse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:house.CGetNftPieceFromHouse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:house.CGetNftPieceFromHouse)
  return target;
}

size_t CGetNftPieceFromHouse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:house.CGetNftPieceFromHouse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGetNftPieceFromHouse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:house.CGetNftPieceFromHouse)
  GOOGLE_DCHECK_NE(&from, this);
  const CGetNftPieceFromHouse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGetNftPieceFromHouse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:house.CGetNftPieceFromHouse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:house.CGetNftPieceFromHouse)
    MergeFrom(*source);
  }
}

void CGetNftPieceFromHouse::MergeFrom(const CGetNftPieceFromHouse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:house.CGetNftPieceFromHouse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
}

void CGetNftPieceFromHouse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:house.CGetNftPieceFromHouse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGetNftPieceFromHouse::CopyFrom(const CGetNftPieceFromHouse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:house.CGetNftPieceFromHouse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGetNftPieceFromHouse::IsInitialized() const {
  return true;
}

void CGetNftPieceFromHouse::InternalSwap(CGetNftPieceFromHouse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGetNftPieceFromHouse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SGetNftPieceFromHouse::InitAsDefaultInstance() {
}
class SGetNftPieceFromHouse::_Internal {
 public:
};

SGetNftPieceFromHouse::SGetNftPieceFromHouse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:house.SGetNftPieceFromHouse)
}
SGetNftPieceFromHouse::SGetNftPieceFromHouse(const SGetNftPieceFromHouse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      locations_(from.locations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:house.SGetNftPieceFromHouse)
}

void SGetNftPieceFromHouse::SharedCtor() {
}

SGetNftPieceFromHouse::~SGetNftPieceFromHouse() {
  // @@protoc_insertion_point(destructor:house.SGetNftPieceFromHouse)
  SharedDtor();
}

void SGetNftPieceFromHouse::SharedDtor() {
}

void SGetNftPieceFromHouse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SGetNftPieceFromHouse& SGetNftPieceFromHouse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SGetNftPieceFromHouse_house_2eproto.base);
  return *internal_default_instance();
}


void SGetNftPieceFromHouse::Clear() {
// @@protoc_insertion_point(message_clear_start:house.SGetNftPieceFromHouse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locations_.Clear();
  _internal_metadata_.Clear();
}

const char* SGetNftPieceFromHouse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 locations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_locations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_locations(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SGetNftPieceFromHouse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:house.SGetNftPieceFromHouse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 locations = 1;
  {
    int byte_size = _locations_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_locations(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:house.SGetNftPieceFromHouse)
  return target;
}

size_t SGetNftPieceFromHouse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:house.SGetNftPieceFromHouse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 locations = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->locations_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _locations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SGetNftPieceFromHouse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:house.SGetNftPieceFromHouse)
  GOOGLE_DCHECK_NE(&from, this);
  const SGetNftPieceFromHouse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SGetNftPieceFromHouse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:house.SGetNftPieceFromHouse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:house.SGetNftPieceFromHouse)
    MergeFrom(*source);
  }
}

void SGetNftPieceFromHouse::MergeFrom(const SGetNftPieceFromHouse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:house.SGetNftPieceFromHouse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locations_.MergeFrom(from.locations_);
}

void SGetNftPieceFromHouse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:house.SGetNftPieceFromHouse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGetNftPieceFromHouse::CopyFrom(const SGetNftPieceFromHouse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:house.SGetNftPieceFromHouse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGetNftPieceFromHouse::IsInitialized() const {
  return true;
}

void SGetNftPieceFromHouse::InternalSwap(SGetNftPieceFromHouse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  locations_.InternalSwap(&other->locations_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SGetNftPieceFromHouse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHouseDetail::InitAsDefaultInstance() {
}
class CHouseDetail::_Internal {
 public:
};

CHouseDetail::CHouseDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:house.CHouseDetail)
}
CHouseDetail::CHouseDetail(const CHouseDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  houseid_ = from.houseid_;
  // @@protoc_insertion_point(copy_constructor:house.CHouseDetail)
}

void CHouseDetail::SharedCtor() {
  houseid_ = 0;
}

CHouseDetail::~CHouseDetail() {
  // @@protoc_insertion_point(destructor:house.CHouseDetail)
  SharedDtor();
}

void CHouseDetail::SharedDtor() {
}

void CHouseDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHouseDetail& CHouseDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHouseDetail_house_2eproto.base);
  return *internal_default_instance();
}


void CHouseDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:house.CHouseDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  houseid_ = 0;
  _internal_metadata_.Clear();
}

const char* CHouseDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 houseId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHouseDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:house.CHouseDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_houseid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:house.CHouseDetail)
  return target;
}

size_t CHouseDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:house.CHouseDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 houseId = 1;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHouseDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:house.CHouseDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const CHouseDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHouseDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:house.CHouseDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:house.CHouseDetail)
    MergeFrom(*source);
  }
}

void CHouseDetail::MergeFrom(const CHouseDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:house.CHouseDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
}

void CHouseDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:house.CHouseDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHouseDetail::CopyFrom(const CHouseDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:house.CHouseDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHouseDetail::IsInitialized() const {
  return true;
}

void CHouseDetail::InternalSwap(CHouseDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(houseid_, other->houseid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHouseDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SHouseDetail::InitAsDefaultInstance() {
}
class SHouseDetail::_Internal {
 public:
};

SHouseDetail::SHouseDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:house.SHouseDetail)
}
SHouseDetail::SHouseDetail(const SHouseDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  meshalias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_meshalias().empty()) {
    meshalias_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.meshalias_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image().empty()) {
    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  hostavatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostavatar().empty()) {
    hostavatar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostavatar_);
  }
  hostnick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostnick().empty()) {
    hostnick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostnick_);
  }
  ::memcpy(&nftid_, &from.nftid_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_) -
    reinterpret_cast<char*>(&nftid_)) + sizeof(scene_));
  // @@protoc_insertion_point(copy_constructor:house.SHouseDetail)
}

void SHouseDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SHouseDetail_house_2eproto.base);
  meshalias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostavatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostnick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nftid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&nftid_)) + sizeof(scene_));
}

SHouseDetail::~SHouseDetail() {
  // @@protoc_insertion_point(destructor:house.SHouseDetail)
  SharedDtor();
}

void SHouseDetail::SharedDtor() {
  meshalias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostavatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostnick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SHouseDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SHouseDetail& SHouseDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SHouseDetail_house_2eproto.base);
  return *internal_default_instance();
}


void SHouseDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:house.SHouseDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meshalias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostavatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostnick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&nftid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_) -
      reinterpret_cast<char*>(&nftid_)) + sizeof(scene_));
  _internal_metadata_.Clear();
}

const char* SHouseDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 nftId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          nftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string meshAlias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_meshalias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "house.SHouseDetail.meshAlias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "house.SHouseDetail.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "house.SHouseDetail.image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hostUid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hostuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 houseId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          houseid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 likes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          likes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pv = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool selfHasHouse = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          selfhashouse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hostAvatar = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_hostavatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "house.SHouseDetail.hostAvatar"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hostNick = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_hostnick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "house.SHouseDetail.hostNick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SHouseDetail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:house.SHouseDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nftId = 1;
  if (this->nftid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_nftid(), target);
  }

  // string meshAlias = 2;
  if (this->meshalias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_meshalias().data(), static_cast<int>(this->_internal_meshalias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "house.SHouseDetail.meshAlias");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_meshalias(), target);
  }

  // string title = 3;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "house.SHouseDetail.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // string image = 4;
  if (this->image().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "house.SHouseDetail.image");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_image(), target);
  }

  // int32 hostUid = 5;
  if (this->hostuid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_hostuid(), target);
  }

  // int32 houseId = 6;
  if (this->houseid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_houseid(), target);
  }

  // int32 likes = 7;
  if (this->likes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_likes(), target);
  }

  // int32 pv = 8;
  if (this->pv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_pv(), target);
  }

  // bool selfHasHouse = 9;
  if (this->selfhashouse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_selfhashouse(), target);
  }

  // string hostAvatar = 10;
  if (this->hostavatar().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostavatar().data(), static_cast<int>(this->_internal_hostavatar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "house.SHouseDetail.hostAvatar");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_hostavatar(), target);
  }

  // string hostNick = 11;
  if (this->hostnick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostnick().data(), static_cast<int>(this->_internal_hostnick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "house.SHouseDetail.hostNick");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_hostnick(), target);
  }

  // int32 scene = 12;
  if (this->scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_scene(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:house.SHouseDetail)
  return target;
}

size_t SHouseDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:house.SHouseDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string meshAlias = 2;
  if (this->meshalias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_meshalias());
  }

  // string title = 3;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string image = 4;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image());
  }

  // string hostAvatar = 10;
  if (this->hostavatar().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostavatar());
  }

  // string hostNick = 11;
  if (this->hostnick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostnick());
  }

  // int32 nftId = 1;
  if (this->nftid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nftid());
  }

  // int32 hostUid = 5;
  if (this->hostuid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hostuid());
  }

  // int32 houseId = 6;
  if (this->houseid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_houseid());
  }

  // int32 likes = 7;
  if (this->likes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_likes());
  }

  // int32 pv = 8;
  if (this->pv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pv());
  }

  // bool selfHasHouse = 9;
  if (this->selfhashouse() != 0) {
    total_size += 1 + 1;
  }

  // int32 scene = 12;
  if (this->scene() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SHouseDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:house.SHouseDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const SHouseDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SHouseDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:house.SHouseDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:house.SHouseDetail)
    MergeFrom(*source);
  }
}

void SHouseDetail::MergeFrom(const SHouseDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:house.SHouseDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.meshalias().size() > 0) {

    meshalias_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.meshalias_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.hostavatar().size() > 0) {

    hostavatar_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostavatar_);
  }
  if (from.hostnick().size() > 0) {

    hostnick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hostnick_);
  }
  if (from.nftid() != 0) {
    _internal_set_nftid(from._internal_nftid());
  }
  if (from.hostuid() != 0) {
    _internal_set_hostuid(from._internal_hostuid());
  }
  if (from.houseid() != 0) {
    _internal_set_houseid(from._internal_houseid());
  }
  if (from.likes() != 0) {
    _internal_set_likes(from._internal_likes());
  }
  if (from.pv() != 0) {
    _internal_set_pv(from._internal_pv());
  }
  if (from.selfhashouse() != 0) {
    _internal_set_selfhashouse(from._internal_selfhashouse());
  }
  if (from.scene() != 0) {
    _internal_set_scene(from._internal_scene());
  }
}

void SHouseDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:house.SHouseDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SHouseDetail::CopyFrom(const SHouseDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:house.SHouseDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHouseDetail::IsInitialized() const {
  return true;
}

void SHouseDetail::InternalSwap(SHouseDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  meshalias_.Swap(&other->meshalias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostavatar_.Swap(&other->hostavatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostnick_.Swap(&other->hostnick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nftid_, other->nftid_);
  swap(hostuid_, other->hostuid_);
  swap(houseid_, other->houseid_);
  swap(likes_, other->likes_);
  swap(pv_, other->pv_);
  swap(selfhashouse_, other->selfhashouse_);
  swap(scene_, other->scene_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SHouseDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace house
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::house::houseMsg* Arena::CreateMaybeMessage< ::house::houseMsg >(Arena* arena) {
  return Arena::CreateInternal< ::house::houseMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::house::CAddPiece* Arena::CreateMaybeMessage< ::house::CAddPiece >(Arena* arena) {
  return Arena::CreateInternal< ::house::CAddPiece >(arena);
}
template<> PROTOBUF_NOINLINE ::house::SAddPiece* Arena::CreateMaybeMessage< ::house::SAddPiece >(Arena* arena) {
  return Arena::CreateInternal< ::house::SAddPiece >(arena);
}
template<> PROTOBUF_NOINLINE ::house::CGetNftPieceFromHouse* Arena::CreateMaybeMessage< ::house::CGetNftPieceFromHouse >(Arena* arena) {
  return Arena::CreateInternal< ::house::CGetNftPieceFromHouse >(arena);
}
template<> PROTOBUF_NOINLINE ::house::SGetNftPieceFromHouse* Arena::CreateMaybeMessage< ::house::SGetNftPieceFromHouse >(Arena* arena) {
  return Arena::CreateInternal< ::house::SGetNftPieceFromHouse >(arena);
}
template<> PROTOBUF_NOINLINE ::house::CHouseDetail* Arena::CreateMaybeMessage< ::house::CHouseDetail >(Arena* arena) {
  return Arena::CreateInternal< ::house::CHouseDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::house::SHouseDetail* Arena::CreateMaybeMessage< ::house::SHouseDetail >(Arena* arena) {
  return Arena::CreateInternal< ::house::SHouseDetail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
