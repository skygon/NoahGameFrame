// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: follow.proto

#include "follow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_follow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FollowListInfo_follow_2eproto;
namespace follow {
class CFollowUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CFollowUser> _instance;
} _CFollowUser_default_instance_;
class SFollowUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SFollowUser> _instance;
} _SFollowUser_default_instance_;
class FollowListInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FollowListInfo> _instance;
} _FollowListInfo_default_instance_;
class CFollowListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CFollowList> _instance;
} _CFollowList_default_instance_;
class SFollowListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SFollowList> _instance;
} _SFollowList_default_instance_;
class CRecommendListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CRecommendList> _instance;
} _CRecommendList_default_instance_;
class SRecommendListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SRecommendList> _instance;
} _SRecommendList_default_instance_;
}  // namespace follow
static void InitDefaultsscc_info_CFollowList_follow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::follow::_CFollowList_default_instance_;
    new (ptr) ::follow::CFollowList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::follow::CFollowList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CFollowList_follow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CFollowList_follow_2eproto}, {}};

static void InitDefaultsscc_info_CFollowUser_follow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::follow::_CFollowUser_default_instance_;
    new (ptr) ::follow::CFollowUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::follow::CFollowUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CFollowUser_follow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CFollowUser_follow_2eproto}, {}};

static void InitDefaultsscc_info_CRecommendList_follow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::follow::_CRecommendList_default_instance_;
    new (ptr) ::follow::CRecommendList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::follow::CRecommendList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CRecommendList_follow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CRecommendList_follow_2eproto}, {}};

static void InitDefaultsscc_info_FollowListInfo_follow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::follow::_FollowListInfo_default_instance_;
    new (ptr) ::follow::FollowListInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::follow::FollowListInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FollowListInfo_follow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FollowListInfo_follow_2eproto}, {}};

static void InitDefaultsscc_info_SFollowList_follow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::follow::_SFollowList_default_instance_;
    new (ptr) ::follow::SFollowList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::follow::SFollowList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SFollowList_follow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SFollowList_follow_2eproto}, {
      &scc_info_FollowListInfo_follow_2eproto.base,}};

static void InitDefaultsscc_info_SFollowUser_follow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::follow::_SFollowUser_default_instance_;
    new (ptr) ::follow::SFollowUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::follow::SFollowUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SFollowUser_follow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SFollowUser_follow_2eproto}, {}};

static void InitDefaultsscc_info_SRecommendList_follow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::follow::_SRecommendList_default_instance_;
    new (ptr) ::follow::SRecommendList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::follow::SRecommendList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SRecommendList_follow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SRecommendList_follow_2eproto}, {
      &scc_info_FollowListInfo_follow_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_follow_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_follow_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_follow_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_follow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::follow::CFollowUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::follow::CFollowUser, uid_),
  PROTOBUF_FIELD_OFFSET(::follow::CFollowUser, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::follow::SFollowUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::follow::SFollowUser, uid_),
  PROTOBUF_FIELD_OFFSET(::follow::SFollowUser, code_),
  PROTOBUF_FIELD_OFFSET(::follow::SFollowUser, isfollow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::follow::FollowListInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::follow::FollowListInfo, uid_),
  PROTOBUF_FIELD_OFFSET(::follow::FollowListInfo, nick_),
  PROTOBUF_FIELD_OFFSET(::follow::FollowListInfo, headpic_),
  PROTOBUF_FIELD_OFFSET(::follow::FollowListInfo, fansnum_),
  PROTOBUF_FIELD_OFFSET(::follow::FollowListInfo, followstatus_),
  PROTOBUF_FIELD_OFFSET(::follow::FollowListInfo, sign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::follow::CFollowList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::follow::CFollowList, uid_),
  PROTOBUF_FIELD_OFFSET(::follow::CFollowList, type_),
  PROTOBUF_FIELD_OFFSET(::follow::CFollowList, page_),
  PROTOBUF_FIELD_OFFSET(::follow::CFollowList, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::follow::SFollowList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::follow::SFollowList, type_),
  PROTOBUF_FIELD_OFFSET(::follow::SFollowList, infos_),
  PROTOBUF_FIELD_OFFSET(::follow::SFollowList, total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::follow::CRecommendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::follow::SRecommendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::follow::SRecommendList, infos_),
  PROTOBUF_FIELD_OFFSET(::follow::SRecommendList, total_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::follow::CFollowUser)},
  { 7, -1, sizeof(::follow::SFollowUser)},
  { 15, -1, sizeof(::follow::FollowListInfo)},
  { 26, -1, sizeof(::follow::CFollowList)},
  { 35, -1, sizeof(::follow::SFollowList)},
  { 43, -1, sizeof(::follow::CRecommendList)},
  { 48, -1, sizeof(::follow::SRecommendList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::follow::_CFollowUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::follow::_SFollowUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::follow::_FollowListInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::follow::_CFollowList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::follow::_SFollowList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::follow::_CRecommendList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::follow::_SRecommendList_default_instance_),
};

const char descriptor_table_protodef_follow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014follow.proto\022\006follow\"(\n\013CFollowUser\022\013\n"
  "\003uid\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\":\n\013SFollowUser\022"
  "\013\n\003uid\030\001 \001(\005\022\014\n\004code\030\002 \001(\005\022\020\n\010isFollow\030\003"
  " \001(\010\"q\n\016FollowListInfo\022\013\n\003uid\030\001 \001(\005\022\014\n\004n"
  "ick\030\002 \001(\t\022\017\n\007headPic\030\003 \001(\t\022\017\n\007fansNum\030\004 "
  "\001(\005\022\024\n\014followStatus\030\005 \001(\005\022\014\n\004sign\030\006 \001(\t\""
  "D\n\013CFollowList\022\013\n\003uid\030\001 \001(\005\022\014\n\004type\030\002 \001("
  "\005\022\014\n\004page\030\003 \001(\005\022\014\n\004size\030\004 \001(\005\"Q\n\013SFollow"
  "List\022\014\n\004type\030\001 \001(\005\022%\n\005infos\030\002 \003(\0132\026.foll"
  "ow.FollowListInfo\022\r\n\005total\030\003 \001(\005\"\020\n\016CRec"
  "ommendList\"F\n\016SRecommendList\022%\n\005infos\030\002 "
  "\003(\0132\026.follow.FollowListInfo\022\r\n\005total\030\003 \001"
  "(\005B+\n\030com.dayou.space.protobufB\006FollowZ\007"
  "./pb;pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_follow_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_follow_2eproto_sccs[7] = {
  &scc_info_CFollowList_follow_2eproto.base,
  &scc_info_CFollowUser_follow_2eproto.base,
  &scc_info_CRecommendList_follow_2eproto.base,
  &scc_info_FollowListInfo_follow_2eproto.base,
  &scc_info_SFollowList_follow_2eproto.base,
  &scc_info_SFollowUser_follow_2eproto.base,
  &scc_info_SRecommendList_follow_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_follow_2eproto_once;
static bool descriptor_table_follow_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_follow_2eproto = {
  &descriptor_table_follow_2eproto_initialized, descriptor_table_protodef_follow_2eproto, "follow.proto", 535,
  &descriptor_table_follow_2eproto_once, descriptor_table_follow_2eproto_sccs, descriptor_table_follow_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_follow_2eproto::offsets,
  file_level_metadata_follow_2eproto, 7, file_level_enum_descriptors_follow_2eproto, file_level_service_descriptors_follow_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_follow_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_follow_2eproto), true);
namespace follow {

// ===================================================================

void CFollowUser::InitAsDefaultInstance() {
}
class CFollowUser::_Internal {
 public:
};

CFollowUser::CFollowUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:follow.CFollowUser)
}
CFollowUser::CFollowUser(const CFollowUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:follow.CFollowUser)
}

void CFollowUser::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(type_));
}

CFollowUser::~CFollowUser() {
  // @@protoc_insertion_point(destructor:follow.CFollowUser)
  SharedDtor();
}

void CFollowUser::SharedDtor() {
}

void CFollowUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CFollowUser& CFollowUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CFollowUser_follow_2eproto.base);
  return *internal_default_instance();
}


void CFollowUser::Clear() {
// @@protoc_insertion_point(message_clear_start:follow.CFollowUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* CFollowUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CFollowUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:follow.CFollowUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:follow.CFollowUser)
  return target;
}

size_t CFollowUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:follow.CFollowUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFollowUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:follow.CFollowUser)
  GOOGLE_DCHECK_NE(&from, this);
  const CFollowUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CFollowUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:follow.CFollowUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:follow.CFollowUser)
    MergeFrom(*source);
  }
}

void CFollowUser::MergeFrom(const CFollowUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:follow.CFollowUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CFollowUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:follow.CFollowUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFollowUser::CopyFrom(const CFollowUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:follow.CFollowUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFollowUser::IsInitialized() const {
  return true;
}

void CFollowUser::InternalSwap(CFollowUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFollowUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SFollowUser::InitAsDefaultInstance() {
}
class SFollowUser::_Internal {
 public:
};

SFollowUser::SFollowUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:follow.SFollowUser)
}
SFollowUser::SFollowUser(const SFollowUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&isfollow_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(isfollow_));
  // @@protoc_insertion_point(copy_constructor:follow.SFollowUser)
}

void SFollowUser::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfollow_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(isfollow_));
}

SFollowUser::~SFollowUser() {
  // @@protoc_insertion_point(destructor:follow.SFollowUser)
  SharedDtor();
}

void SFollowUser::SharedDtor() {
}

void SFollowUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SFollowUser& SFollowUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SFollowUser_follow_2eproto.base);
  return *internal_default_instance();
}


void SFollowUser::Clear() {
// @@protoc_insertion_point(message_clear_start:follow.SFollowUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isfollow_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(isfollow_));
  _internal_metadata_.Clear();
}

const char* SFollowUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isFollow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isfollow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SFollowUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:follow.SFollowUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(), target);
  }

  // bool isFollow = 3;
  if (this->isfollow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_isfollow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:follow.SFollowUser)
  return target;
}

size_t SFollowUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:follow.SFollowUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // bool isFollow = 3;
  if (this->isfollow() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SFollowUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:follow.SFollowUser)
  GOOGLE_DCHECK_NE(&from, this);
  const SFollowUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SFollowUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:follow.SFollowUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:follow.SFollowUser)
    MergeFrom(*source);
  }
}

void SFollowUser::MergeFrom(const SFollowUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:follow.SFollowUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.isfollow() != 0) {
    _internal_set_isfollow(from._internal_isfollow());
  }
}

void SFollowUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:follow.SFollowUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SFollowUser::CopyFrom(const SFollowUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:follow.SFollowUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFollowUser::IsInitialized() const {
  return true;
}

void SFollowUser::InternalSwap(SFollowUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(code_, other->code_);
  swap(isfollow_, other->isfollow_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SFollowUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FollowListInfo::InitAsDefaultInstance() {
}
class FollowListInfo::_Internal {
 public:
};

FollowListInfo::FollowListInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:follow.FollowListInfo)
}
FollowListInfo::FollowListInfo(const FollowListInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nick().empty()) {
    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headpic().empty()) {
    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sign().empty()) {
    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&followstatus_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(followstatus_));
  // @@protoc_insertion_point(copy_constructor:follow.FollowListInfo)
}

void FollowListInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FollowListInfo_follow_2eproto.base);
  nick_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&followstatus_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(followstatus_));
}

FollowListInfo::~FollowListInfo() {
  // @@protoc_insertion_point(destructor:follow.FollowListInfo)
  SharedDtor();
}

void FollowListInfo::SharedDtor() {
  nick_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FollowListInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FollowListInfo& FollowListInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FollowListInfo_follow_2eproto.base);
  return *internal_default_instance();
}


void FollowListInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:follow.FollowListInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headpic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sign_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&followstatus_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(followstatus_));
  _internal_metadata_.Clear();
}

const char* FollowListInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nick();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "follow.FollowListInfo.nick"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headPic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_headpic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "follow.FollowListInfo.headPic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fansNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fansnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 followStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          followstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "follow.FollowListInfo.sign"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FollowListInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:follow.FollowListInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // string nick = 2;
  if (this->nick().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nick().data(), static_cast<int>(this->_internal_nick().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "follow.FollowListInfo.nick");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nick(), target);
  }

  // string headPic = 3;
  if (this->headpic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headpic().data(), static_cast<int>(this->_internal_headpic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "follow.FollowListInfo.headPic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_headpic(), target);
  }

  // int32 fansNum = 4;
  if (this->fansnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fansnum(), target);
  }

  // int32 followStatus = 5;
  if (this->followstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_followstatus(), target);
  }

  // string sign = 6;
  if (this->sign().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sign().data(), static_cast<int>(this->_internal_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "follow.FollowListInfo.sign");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:follow.FollowListInfo)
  return target;
}

size_t FollowListInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:follow.FollowListInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nick = 2;
  if (this->nick().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nick());
  }

  // string headPic = 3;
  if (this->headpic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headpic());
  }

  // string sign = 6;
  if (this->sign().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sign());
  }

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 fansNum = 4;
  if (this->fansnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fansnum());
  }

  // int32 followStatus = 5;
  if (this->followstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_followstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FollowListInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:follow.FollowListInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FollowListInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FollowListInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:follow.FollowListInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:follow.FollowListInfo)
    MergeFrom(*source);
  }
}

void FollowListInfo::MergeFrom(const FollowListInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:follow.FollowListInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick().size() > 0) {

    nick_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nick_);
  }
  if (from.headpic().size() > 0) {

    headpic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headpic_);
  }
  if (from.sign().size() > 0) {

    sign_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sign_);
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.fansnum() != 0) {
    _internal_set_fansnum(from._internal_fansnum());
  }
  if (from.followstatus() != 0) {
    _internal_set_followstatus(from._internal_followstatus());
  }
}

void FollowListInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:follow.FollowListInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowListInfo::CopyFrom(const FollowListInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:follow.FollowListInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowListInfo::IsInitialized() const {
  return true;
}

void FollowListInfo::InternalSwap(FollowListInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nick_.Swap(&other->nick_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  headpic_.Swap(&other->headpic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sign_.Swap(&other->sign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
  swap(fansnum_, other->fansnum_);
  swap(followstatus_, other->followstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FollowListInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CFollowList::InitAsDefaultInstance() {
}
class CFollowList::_Internal {
 public:
};

CFollowList::CFollowList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:follow.CFollowList)
}
CFollowList::CFollowList(const CFollowList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:follow.CFollowList)
}

void CFollowList::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(size_));
}

CFollowList::~CFollowList() {
  // @@protoc_insertion_point(destructor:follow.CFollowList)
  SharedDtor();
}

void CFollowList::SharedDtor() {
}

void CFollowList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CFollowList& CFollowList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CFollowList_follow_2eproto.base);
  return *internal_default_instance();
}


void CFollowList::Clear() {
// @@protoc_insertion_point(message_clear_start:follow.CFollowList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(size_));
  _internal_metadata_.Clear();
}

const char* CFollowList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CFollowList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:follow.CFollowList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 page = 3;
  if (this->page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_page(), target);
  }

  // int32 size = 4;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:follow.CFollowList)
  return target;
}

size_t CFollowList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:follow.CFollowList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_uid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 page = 3;
  if (this->page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page());
  }

  // int32 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CFollowList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:follow.CFollowList)
  GOOGLE_DCHECK_NE(&from, this);
  const CFollowList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CFollowList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:follow.CFollowList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:follow.CFollowList)
    MergeFrom(*source);
  }
}

void CFollowList::MergeFrom(const CFollowList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:follow.CFollowList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void CFollowList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:follow.CFollowList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFollowList::CopyFrom(const CFollowList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:follow.CFollowList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFollowList::IsInitialized() const {
  return true;
}

void CFollowList::InternalSwap(CFollowList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
  swap(type_, other->type_);
  swap(page_, other->page_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CFollowList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SFollowList::InitAsDefaultInstance() {
}
class SFollowList::_Internal {
 public:
};

SFollowList::SFollowList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:follow.SFollowList)
}
SFollowList::SFollowList(const SFollowList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&type_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:follow.SFollowList)
}

void SFollowList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SFollowList_follow_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&type_)) + sizeof(total_));
}

SFollowList::~SFollowList() {
  // @@protoc_insertion_point(destructor:follow.SFollowList)
  SharedDtor();
}

void SFollowList::SharedDtor() {
}

void SFollowList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SFollowList& SFollowList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SFollowList_follow_2eproto.base);
  return *internal_default_instance();
}


void SFollowList::Clear() {
// @@protoc_insertion_point(message_clear_start:follow.SFollowList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&type_)) + sizeof(total_));
  _internal_metadata_.Clear();
}

const char* SFollowList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .follow.FollowListInfo infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SFollowList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:follow.SFollowList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // repeated .follow.FollowListInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infos(i), target, stream);
  }

  // int32 total = 3;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:follow.SFollowList)
  return target;
}

size_t SFollowList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:follow.SFollowList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .follow.FollowListInfo infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 total = 3;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SFollowList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:follow.SFollowList)
  GOOGLE_DCHECK_NE(&from, this);
  const SFollowList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SFollowList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:follow.SFollowList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:follow.SFollowList)
    MergeFrom(*source);
  }
}

void SFollowList::MergeFrom(const SFollowList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:follow.SFollowList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
}

void SFollowList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:follow.SFollowList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SFollowList::CopyFrom(const SFollowList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:follow.SFollowList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SFollowList::IsInitialized() const {
  return true;
}

void SFollowList::InternalSwap(SFollowList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  swap(type_, other->type_);
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SFollowList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CRecommendList::InitAsDefaultInstance() {
}
class CRecommendList::_Internal {
 public:
};

CRecommendList::CRecommendList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:follow.CRecommendList)
}
CRecommendList::CRecommendList(const CRecommendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:follow.CRecommendList)
}

void CRecommendList::SharedCtor() {
}

CRecommendList::~CRecommendList() {
  // @@protoc_insertion_point(destructor:follow.CRecommendList)
  SharedDtor();
}

void CRecommendList::SharedDtor() {
}

void CRecommendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CRecommendList& CRecommendList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CRecommendList_follow_2eproto.base);
  return *internal_default_instance();
}


void CRecommendList::Clear() {
// @@protoc_insertion_point(message_clear_start:follow.CRecommendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CRecommendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CRecommendList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:follow.CRecommendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:follow.CRecommendList)
  return target;
}

size_t CRecommendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:follow.CRecommendList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CRecommendList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:follow.CRecommendList)
  GOOGLE_DCHECK_NE(&from, this);
  const CRecommendList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CRecommendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:follow.CRecommendList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:follow.CRecommendList)
    MergeFrom(*source);
  }
}

void CRecommendList::MergeFrom(const CRecommendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:follow.CRecommendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CRecommendList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:follow.CRecommendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CRecommendList::CopyFrom(const CRecommendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:follow.CRecommendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CRecommendList::IsInitialized() const {
  return true;
}

void CRecommendList::InternalSwap(CRecommendList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CRecommendList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SRecommendList::InitAsDefaultInstance() {
}
class SRecommendList::_Internal {
 public:
};

SRecommendList::SRecommendList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:follow.SRecommendList)
}
SRecommendList::SRecommendList(const SRecommendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:follow.SRecommendList)
}

void SRecommendList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SRecommendList_follow_2eproto.base);
  total_ = 0;
}

SRecommendList::~SRecommendList() {
  // @@protoc_insertion_point(destructor:follow.SRecommendList)
  SharedDtor();
}

void SRecommendList::SharedDtor() {
}

void SRecommendList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SRecommendList& SRecommendList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SRecommendList_follow_2eproto.base);
  return *internal_default_instance();
}


void SRecommendList::Clear() {
// @@protoc_insertion_point(message_clear_start:follow.SRecommendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  total_ = 0;
  _internal_metadata_.Clear();
}

const char* SRecommendList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .follow.FollowListInfo infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SRecommendList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:follow.SRecommendList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .follow.FollowListInfo infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infos(i), target, stream);
  }

  // int32 total = 3;
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:follow.SRecommendList)
  return target;
}

size_t SRecommendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:follow.SRecommendList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .follow.FollowListInfo infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 total = 3;
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SRecommendList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:follow.SRecommendList)
  GOOGLE_DCHECK_NE(&from, this);
  const SRecommendList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SRecommendList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:follow.SRecommendList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:follow.SRecommendList)
    MergeFrom(*source);
  }
}

void SRecommendList::MergeFrom(const SRecommendList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:follow.SRecommendList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
}

void SRecommendList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:follow.SRecommendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SRecommendList::CopyFrom(const SRecommendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:follow.SRecommendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SRecommendList::IsInitialized() const {
  return true;
}

void SRecommendList::InternalSwap(SRecommendList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  swap(total_, other->total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SRecommendList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace follow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::follow::CFollowUser* Arena::CreateMaybeMessage< ::follow::CFollowUser >(Arena* arena) {
  return Arena::CreateInternal< ::follow::CFollowUser >(arena);
}
template<> PROTOBUF_NOINLINE ::follow::SFollowUser* Arena::CreateMaybeMessage< ::follow::SFollowUser >(Arena* arena) {
  return Arena::CreateInternal< ::follow::SFollowUser >(arena);
}
template<> PROTOBUF_NOINLINE ::follow::FollowListInfo* Arena::CreateMaybeMessage< ::follow::FollowListInfo >(Arena* arena) {
  return Arena::CreateInternal< ::follow::FollowListInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::follow::CFollowList* Arena::CreateMaybeMessage< ::follow::CFollowList >(Arena* arena) {
  return Arena::CreateInternal< ::follow::CFollowList >(arena);
}
template<> PROTOBUF_NOINLINE ::follow::SFollowList* Arena::CreateMaybeMessage< ::follow::SFollowList >(Arena* arena) {
  return Arena::CreateInternal< ::follow::SFollowList >(arena);
}
template<> PROTOBUF_NOINLINE ::follow::CRecommendList* Arena::CreateMaybeMessage< ::follow::CRecommendList >(Arena* arena) {
  return Arena::CreateInternal< ::follow::CRecommendList >(arena);
}
template<> PROTOBUF_NOINLINE ::follow::SRecommendList* Arena::CreateMaybeMessage< ::follow::SRecommendList >(Arena* arena) {
  return Arena::CreateInternal< ::follow::SRecommendList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
