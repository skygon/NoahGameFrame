// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spaceDraft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_spaceDraft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_spaceDraft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_spaceDraft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_spaceDraft_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_spaceDraft_2eproto;
namespace spaceDraft {
class CCheckInviteTrial;
class CCheckInviteTrialDefaultTypeInternal;
extern CCheckInviteTrialDefaultTypeInternal _CCheckInviteTrial_default_instance_;
class CGetSpaceDraftList;
class CGetSpaceDraftListDefaultTypeInternal;
extern CGetSpaceDraftListDefaultTypeInternal _CGetSpaceDraftList_default_instance_;
class CSendInviteTrial;
class CSendInviteTrialDefaultTypeInternal;
extern CSendInviteTrialDefaultTypeInternal _CSendInviteTrial_default_instance_;
class CSpaceDraftDetail;
class CSpaceDraftDetailDefaultTypeInternal;
extern CSpaceDraftDetailDefaultTypeInternal _CSpaceDraftDetail_default_instance_;
class SCheckInviteTrial;
class SCheckInviteTrialDefaultTypeInternal;
extern SCheckInviteTrialDefaultTypeInternal _SCheckInviteTrial_default_instance_;
class SGetSpaceDraftList;
class SGetSpaceDraftListDefaultTypeInternal;
extern SGetSpaceDraftListDefaultTypeInternal _SGetSpaceDraftList_default_instance_;
class SInviteTrialEnd;
class SInviteTrialEndDefaultTypeInternal;
extern SInviteTrialEndDefaultTypeInternal _SInviteTrialEnd_default_instance_;
class SSendInviteTrial;
class SSendInviteTrialDefaultTypeInternal;
extern SSendInviteTrialDefaultTypeInternal _SSendInviteTrial_default_instance_;
class SSpaceDraftDetail;
class SSpaceDraftDetailDefaultTypeInternal;
extern SSpaceDraftDetailDefaultTypeInternal _SSpaceDraftDetail_default_instance_;
class SpaceDraft;
class SpaceDraftDefaultTypeInternal;
extern SpaceDraftDefaultTypeInternal _SpaceDraft_default_instance_;
}  // namespace spaceDraft
PROTOBUF_NAMESPACE_OPEN
template<> ::spaceDraft::CCheckInviteTrial* Arena::CreateMaybeMessage<::spaceDraft::CCheckInviteTrial>(Arena*);
template<> ::spaceDraft::CGetSpaceDraftList* Arena::CreateMaybeMessage<::spaceDraft::CGetSpaceDraftList>(Arena*);
template<> ::spaceDraft::CSendInviteTrial* Arena::CreateMaybeMessage<::spaceDraft::CSendInviteTrial>(Arena*);
template<> ::spaceDraft::CSpaceDraftDetail* Arena::CreateMaybeMessage<::spaceDraft::CSpaceDraftDetail>(Arena*);
template<> ::spaceDraft::SCheckInviteTrial* Arena::CreateMaybeMessage<::spaceDraft::SCheckInviteTrial>(Arena*);
template<> ::spaceDraft::SGetSpaceDraftList* Arena::CreateMaybeMessage<::spaceDraft::SGetSpaceDraftList>(Arena*);
template<> ::spaceDraft::SInviteTrialEnd* Arena::CreateMaybeMessage<::spaceDraft::SInviteTrialEnd>(Arena*);
template<> ::spaceDraft::SSendInviteTrial* Arena::CreateMaybeMessage<::spaceDraft::SSendInviteTrial>(Arena*);
template<> ::spaceDraft::SSpaceDraftDetail* Arena::CreateMaybeMessage<::spaceDraft::SSpaceDraftDetail>(Arena*);
template<> ::spaceDraft::SpaceDraft* Arena::CreateMaybeMessage<::spaceDraft::SpaceDraft>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace spaceDraft {

// ===================================================================

class CGetSpaceDraftList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceDraft.CGetSpaceDraftList) */ {
 public:
  CGetSpaceDraftList();
  virtual ~CGetSpaceDraftList();

  CGetSpaceDraftList(const CGetSpaceDraftList& from);
  CGetSpaceDraftList(CGetSpaceDraftList&& from) noexcept
    : CGetSpaceDraftList() {
    *this = ::std::move(from);
  }

  inline CGetSpaceDraftList& operator=(const CGetSpaceDraftList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGetSpaceDraftList& operator=(CGetSpaceDraftList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CGetSpaceDraftList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CGetSpaceDraftList* internal_default_instance() {
    return reinterpret_cast<const CGetSpaceDraftList*>(
               &_CGetSpaceDraftList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CGetSpaceDraftList& a, CGetSpaceDraftList& b) {
    a.Swap(&b);
  }
  inline void Swap(CGetSpaceDraftList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CGetSpaceDraftList* New() const final {
    return CreateMaybeMessage<CGetSpaceDraftList>(nullptr);
  }

  CGetSpaceDraftList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CGetSpaceDraftList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CGetSpaceDraftList& from);
  void MergeFrom(const CGetSpaceDraftList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CGetSpaceDraftList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceDraft.CGetSpaceDraftList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceDraft_2eproto);
    return ::descriptor_table_spaceDraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurPageFieldNumber = 1,
    kPageLimitFieldNumber = 2,
  };
  // int32 curPage = 1;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pageLimit = 2;
  void clear_pagelimit();
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit() const;
  void set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pagelimit() const;
  void _internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceDraft.CGetSpaceDraftList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 pagelimit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceDraft_2eproto;
};
// -------------------------------------------------------------------

class SpaceDraft :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceDraft.SpaceDraft) */ {
 public:
  SpaceDraft();
  virtual ~SpaceDraft();

  SpaceDraft(const SpaceDraft& from);
  SpaceDraft(SpaceDraft&& from) noexcept
    : SpaceDraft() {
    *this = ::std::move(from);
  }

  inline SpaceDraft& operator=(const SpaceDraft& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpaceDraft& operator=(SpaceDraft&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpaceDraft& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpaceDraft* internal_default_instance() {
    return reinterpret_cast<const SpaceDraft*>(
               &_SpaceDraft_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpaceDraft& a, SpaceDraft& b) {
    a.Swap(&b);
  }
  inline void Swap(SpaceDraft* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpaceDraft* New() const final {
    return CreateMaybeMessage<SpaceDraft>(nullptr);
  }

  SpaceDraft* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpaceDraft>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpaceDraft& from);
  void MergeFrom(const SpaceDraft& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpaceDraft* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceDraft.SpaceDraft";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceDraft_2eproto);
    return ::descriptor_table_spaceDraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kCoverFieldNumber = 6,
    kSquareCoverFieldNumber = 7,
    kConfigUrlFieldNumber = 8,
    kDescFieldNumber = 9,
    kRuleFieldNumber = 10,
    kServerLuaUrlFieldNumber = 15,
    kClientLuaUrlFieldNumber = 16,
    kCreatedAtFieldNumber = 17,
    kUpdateAtFieldNumber = 18,
    kIdFieldNumber = 1,
    kCreateUidFieldNumber = 2,
    kSpaceIdFieldNumber = 4,
    kSpaceBackpackIdFieldNumber = 5,
    kIsCollectFieldNumber = 11,
    kIsRecreationFieldNumber = 12,
    kIsCopyFieldNumber = 13,
    kIsOpenFieldNumber = 14,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cover = 6;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // string squareCover = 7;
  void clear_squarecover();
  const std::string& squarecover() const;
  void set_squarecover(const std::string& value);
  void set_squarecover(std::string&& value);
  void set_squarecover(const char* value);
  void set_squarecover(const char* value, size_t size);
  std::string* mutable_squarecover();
  std::string* release_squarecover();
  void set_allocated_squarecover(std::string* squarecover);
  private:
  const std::string& _internal_squarecover() const;
  void _internal_set_squarecover(const std::string& value);
  std::string* _internal_mutable_squarecover();
  public:

  // string configUrl = 8;
  void clear_configurl();
  const std::string& configurl() const;
  void set_configurl(const std::string& value);
  void set_configurl(std::string&& value);
  void set_configurl(const char* value);
  void set_configurl(const char* value, size_t size);
  std::string* mutable_configurl();
  std::string* release_configurl();
  void set_allocated_configurl(std::string* configurl);
  private:
  const std::string& _internal_configurl() const;
  void _internal_set_configurl(const std::string& value);
  std::string* _internal_mutable_configurl();
  public:

  // string desc = 9;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string rule = 10;
  void clear_rule();
  const std::string& rule() const;
  void set_rule(const std::string& value);
  void set_rule(std::string&& value);
  void set_rule(const char* value);
  void set_rule(const char* value, size_t size);
  std::string* mutable_rule();
  std::string* release_rule();
  void set_allocated_rule(std::string* rule);
  private:
  const std::string& _internal_rule() const;
  void _internal_set_rule(const std::string& value);
  std::string* _internal_mutable_rule();
  public:

  // string ServerLuaUrl = 15;
  void clear_serverluaurl();
  const std::string& serverluaurl() const;
  void set_serverluaurl(const std::string& value);
  void set_serverluaurl(std::string&& value);
  void set_serverluaurl(const char* value);
  void set_serverluaurl(const char* value, size_t size);
  std::string* mutable_serverluaurl();
  std::string* release_serverluaurl();
  void set_allocated_serverluaurl(std::string* serverluaurl);
  private:
  const std::string& _internal_serverluaurl() const;
  void _internal_set_serverluaurl(const std::string& value);
  std::string* _internal_mutable_serverluaurl();
  public:

  // string ClientLuaUrl = 16;
  void clear_clientluaurl();
  const std::string& clientluaurl() const;
  void set_clientluaurl(const std::string& value);
  void set_clientluaurl(std::string&& value);
  void set_clientluaurl(const char* value);
  void set_clientluaurl(const char* value, size_t size);
  std::string* mutable_clientluaurl();
  std::string* release_clientluaurl();
  void set_allocated_clientluaurl(std::string* clientluaurl);
  private:
  const std::string& _internal_clientluaurl() const;
  void _internal_set_clientluaurl(const std::string& value);
  std::string* _internal_mutable_clientluaurl();
  public:

  // string createdAt = 17;
  void clear_createdat();
  const std::string& createdat() const;
  void set_createdat(const std::string& value);
  void set_createdat(std::string&& value);
  void set_createdat(const char* value);
  void set_createdat(const char* value, size_t size);
  std::string* mutable_createdat();
  std::string* release_createdat();
  void set_allocated_createdat(std::string* createdat);
  private:
  const std::string& _internal_createdat() const;
  void _internal_set_createdat(const std::string& value);
  std::string* _internal_mutable_createdat();
  public:

  // string updateAt = 18;
  void clear_updateat();
  const std::string& updateat() const;
  void set_updateat(const std::string& value);
  void set_updateat(std::string&& value);
  void set_updateat(const char* value);
  void set_updateat(const char* value, size_t size);
  std::string* mutable_updateat();
  std::string* release_updateat();
  void set_allocated_updateat(std::string* updateat);
  private:
  const std::string& _internal_updateat() const;
  void _internal_set_updateat(const std::string& value);
  std::string* _internal_mutable_updateat();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 createUid = 2;
  void clear_createuid();
  ::PROTOBUF_NAMESPACE_ID::int32 createuid() const;
  void set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_createuid() const;
  void _internal_set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceId = 4;
  void clear_spaceid();
  ::PROTOBUF_NAMESPACE_ID::int32 spaceid() const;
  void set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spaceid() const;
  void _internal_set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceBackpackId = 5;
  void clear_spacebackpackid();
  ::PROTOBUF_NAMESPACE_ID::int32 spacebackpackid() const;
  void set_spacebackpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacebackpackid() const;
  void _internal_set_spacebackpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isCollect = 11;
  void clear_iscollect();
  ::PROTOBUF_NAMESPACE_ID::int32 iscollect() const;
  void set_iscollect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iscollect() const;
  void _internal_set_iscollect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isRecreation = 12;
  void clear_isrecreation();
  ::PROTOBUF_NAMESPACE_ID::int32 isrecreation() const;
  void set_isrecreation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isrecreation() const;
  void _internal_set_isrecreation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isCopy = 13;
  void clear_iscopy();
  ::PROTOBUF_NAMESPACE_ID::int32 iscopy() const;
  void set_iscopy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_iscopy() const;
  void _internal_set_iscopy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isOpen = 14;
  void clear_isopen();
  ::PROTOBUF_NAMESPACE_ID::int32 isopen() const;
  void set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isopen() const;
  void _internal_set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceDraft.SpaceDraft)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr squarecover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverluaurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientluaurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updateat_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 createuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 spaceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacebackpackid_;
  ::PROTOBUF_NAMESPACE_ID::int32 iscollect_;
  ::PROTOBUF_NAMESPACE_ID::int32 isrecreation_;
  ::PROTOBUF_NAMESPACE_ID::int32 iscopy_;
  ::PROTOBUF_NAMESPACE_ID::int32 isopen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceDraft_2eproto;
};
// -------------------------------------------------------------------

class SGetSpaceDraftList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceDraft.SGetSpaceDraftList) */ {
 public:
  SGetSpaceDraftList();
  virtual ~SGetSpaceDraftList();

  SGetSpaceDraftList(const SGetSpaceDraftList& from);
  SGetSpaceDraftList(SGetSpaceDraftList&& from) noexcept
    : SGetSpaceDraftList() {
    *this = ::std::move(from);
  }

  inline SGetSpaceDraftList& operator=(const SGetSpaceDraftList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SGetSpaceDraftList& operator=(SGetSpaceDraftList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SGetSpaceDraftList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SGetSpaceDraftList* internal_default_instance() {
    return reinterpret_cast<const SGetSpaceDraftList*>(
               &_SGetSpaceDraftList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SGetSpaceDraftList& a, SGetSpaceDraftList& b) {
    a.Swap(&b);
  }
  inline void Swap(SGetSpaceDraftList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SGetSpaceDraftList* New() const final {
    return CreateMaybeMessage<SGetSpaceDraftList>(nullptr);
  }

  SGetSpaceDraftList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SGetSpaceDraftList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SGetSpaceDraftList& from);
  void MergeFrom(const SGetSpaceDraftList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SGetSpaceDraftList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceDraft.SGetSpaceDraftList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceDraft_2eproto);
    return ::descriptor_table_spaceDraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
    kMsgFieldNumber = 2,
    kCurPageFieldNumber = 3,
    kSpaceNumFieldNumber = 4,
  };
  // repeated .spaceDraft.SpaceDraft list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::spaceDraft::SpaceDraft* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceDraft::SpaceDraft >*
      mutable_list();
  private:
  const ::spaceDraft::SpaceDraft& _internal_list(int index) const;
  ::spaceDraft::SpaceDraft* _internal_add_list();
  public:
  const ::spaceDraft::SpaceDraft& list(int index) const;
  ::spaceDraft::SpaceDraft* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceDraft::SpaceDraft >&
      list() const;

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 curPage = 3;
  void clear_curpage();
  ::PROTOBUF_NAMESPACE_ID::int32 curpage() const;
  void set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curpage() const;
  void _internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceNum = 4;
  void clear_spacenum();
  ::PROTOBUF_NAMESPACE_ID::int32 spacenum() const;
  void set_spacenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacenum() const;
  void _internal_set_spacenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceDraft.SGetSpaceDraftList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceDraft::SpaceDraft > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 curpage_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceDraft_2eproto;
};
// -------------------------------------------------------------------

class CSpaceDraftDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceDraft.CSpaceDraftDetail) */ {
 public:
  CSpaceDraftDetail();
  virtual ~CSpaceDraftDetail();

  CSpaceDraftDetail(const CSpaceDraftDetail& from);
  CSpaceDraftDetail(CSpaceDraftDetail&& from) noexcept
    : CSpaceDraftDetail() {
    *this = ::std::move(from);
  }

  inline CSpaceDraftDetail& operator=(const CSpaceDraftDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSpaceDraftDetail& operator=(CSpaceDraftDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSpaceDraftDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSpaceDraftDetail* internal_default_instance() {
    return reinterpret_cast<const CSpaceDraftDetail*>(
               &_CSpaceDraftDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSpaceDraftDetail& a, CSpaceDraftDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CSpaceDraftDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSpaceDraftDetail* New() const final {
    return CreateMaybeMessage<CSpaceDraftDetail>(nullptr);
  }

  CSpaceDraftDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSpaceDraftDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSpaceDraftDetail& from);
  void MergeFrom(const CSpaceDraftDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSpaceDraftDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceDraft.CSpaceDraftDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceDraft_2eproto);
    return ::descriptor_table_spaceDraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceDraftIdFieldNumber = 1,
  };
  // int32 spaceDraftId = 1;
  void clear_spacedraftid();
  ::PROTOBUF_NAMESPACE_ID::int32 spacedraftid() const;
  void set_spacedraftid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacedraftid() const;
  void _internal_set_spacedraftid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceDraft.CSpaceDraftDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacedraftid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceDraft_2eproto;
};
// -------------------------------------------------------------------

class SSpaceDraftDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceDraft.SSpaceDraftDetail) */ {
 public:
  SSpaceDraftDetail();
  virtual ~SSpaceDraftDetail();

  SSpaceDraftDetail(const SSpaceDraftDetail& from);
  SSpaceDraftDetail(SSpaceDraftDetail&& from) noexcept
    : SSpaceDraftDetail() {
    *this = ::std::move(from);
  }

  inline SSpaceDraftDetail& operator=(const SSpaceDraftDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSpaceDraftDetail& operator=(SSpaceDraftDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSpaceDraftDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSpaceDraftDetail* internal_default_instance() {
    return reinterpret_cast<const SSpaceDraftDetail*>(
               &_SSpaceDraftDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SSpaceDraftDetail& a, SSpaceDraftDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(SSpaceDraftDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSpaceDraftDetail* New() const final {
    return CreateMaybeMessage<SSpaceDraftDetail>(nullptr);
  }

  SSpaceDraftDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSpaceDraftDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSpaceDraftDetail& from);
  void MergeFrom(const SSpaceDraftDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSpaceDraftDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceDraft.SSpaceDraftDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceDraft_2eproto);
    return ::descriptor_table_spaceDraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kCoverFieldNumber = 6,
    kSquareCoverFieldNumber = 7,
    kConfigUrlFieldNumber = 8,
    kDescFieldNumber = 9,
    kRuleFieldNumber = 10,
    kResourceFieldNumber = 11,
    kServerLuaUrlFieldNumber = 12,
    kClientLuaUrlFieldNumber = 13,
    kIdFieldNumber = 1,
    kCreateUidFieldNumber = 2,
    kSpaceIdFieldNumber = 4,
    kSpaceBackpackIdFieldNumber = 5,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string cover = 6;
  void clear_cover();
  const std::string& cover() const;
  void set_cover(const std::string& value);
  void set_cover(std::string&& value);
  void set_cover(const char* value);
  void set_cover(const char* value, size_t size);
  std::string* mutable_cover();
  std::string* release_cover();
  void set_allocated_cover(std::string* cover);
  private:
  const std::string& _internal_cover() const;
  void _internal_set_cover(const std::string& value);
  std::string* _internal_mutable_cover();
  public:

  // string squareCover = 7;
  void clear_squarecover();
  const std::string& squarecover() const;
  void set_squarecover(const std::string& value);
  void set_squarecover(std::string&& value);
  void set_squarecover(const char* value);
  void set_squarecover(const char* value, size_t size);
  std::string* mutable_squarecover();
  std::string* release_squarecover();
  void set_allocated_squarecover(std::string* squarecover);
  private:
  const std::string& _internal_squarecover() const;
  void _internal_set_squarecover(const std::string& value);
  std::string* _internal_mutable_squarecover();
  public:

  // string configUrl = 8;
  void clear_configurl();
  const std::string& configurl() const;
  void set_configurl(const std::string& value);
  void set_configurl(std::string&& value);
  void set_configurl(const char* value);
  void set_configurl(const char* value, size_t size);
  std::string* mutable_configurl();
  std::string* release_configurl();
  void set_allocated_configurl(std::string* configurl);
  private:
  const std::string& _internal_configurl() const;
  void _internal_set_configurl(const std::string& value);
  std::string* _internal_mutable_configurl();
  public:

  // string desc = 9;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // string rule = 10;
  void clear_rule();
  const std::string& rule() const;
  void set_rule(const std::string& value);
  void set_rule(std::string&& value);
  void set_rule(const char* value);
  void set_rule(const char* value, size_t size);
  std::string* mutable_rule();
  std::string* release_rule();
  void set_allocated_rule(std::string* rule);
  private:
  const std::string& _internal_rule() const;
  void _internal_set_rule(const std::string& value);
  std::string* _internal_mutable_rule();
  public:

  // string resource = 11;
  void clear_resource();
  const std::string& resource() const;
  void set_resource(const std::string& value);
  void set_resource(std::string&& value);
  void set_resource(const char* value);
  void set_resource(const char* value, size_t size);
  std::string* mutable_resource();
  std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string ServerLuaUrl = 12;
  void clear_serverluaurl();
  const std::string& serverluaurl() const;
  void set_serverluaurl(const std::string& value);
  void set_serverluaurl(std::string&& value);
  void set_serverluaurl(const char* value);
  void set_serverluaurl(const char* value, size_t size);
  std::string* mutable_serverluaurl();
  std::string* release_serverluaurl();
  void set_allocated_serverluaurl(std::string* serverluaurl);
  private:
  const std::string& _internal_serverluaurl() const;
  void _internal_set_serverluaurl(const std::string& value);
  std::string* _internal_mutable_serverluaurl();
  public:

  // string ClientLuaUrl = 13;
  void clear_clientluaurl();
  const std::string& clientluaurl() const;
  void set_clientluaurl(const std::string& value);
  void set_clientluaurl(std::string&& value);
  void set_clientluaurl(const char* value);
  void set_clientluaurl(const char* value, size_t size);
  std::string* mutable_clientluaurl();
  std::string* release_clientluaurl();
  void set_allocated_clientluaurl(std::string* clientluaurl);
  private:
  const std::string& _internal_clientluaurl() const;
  void _internal_set_clientluaurl(const std::string& value);
  std::string* _internal_mutable_clientluaurl();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 createUid = 2;
  void clear_createuid();
  ::PROTOBUF_NAMESPACE_ID::int32 createuid() const;
  void set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_createuid() const;
  void _internal_set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceId = 4;
  void clear_spaceid();
  ::PROTOBUF_NAMESPACE_ID::int32 spaceid() const;
  void set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spaceid() const;
  void _internal_set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceBackpackId = 5;
  void clear_spacebackpackid();
  ::PROTOBUF_NAMESPACE_ID::int32 spacebackpackid() const;
  void set_spacebackpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacebackpackid() const;
  void _internal_set_spacebackpackid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceDraft.SSpaceDraftDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr squarecover_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverluaurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientluaurl_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 createuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 spaceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacebackpackid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceDraft_2eproto;
};
// -------------------------------------------------------------------

class CSendInviteTrial :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceDraft.CSendInviteTrial) */ {
 public:
  CSendInviteTrial();
  virtual ~CSendInviteTrial();

  CSendInviteTrial(const CSendInviteTrial& from);
  CSendInviteTrial(CSendInviteTrial&& from) noexcept
    : CSendInviteTrial() {
    *this = ::std::move(from);
  }

  inline CSendInviteTrial& operator=(const CSendInviteTrial& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSendInviteTrial& operator=(CSendInviteTrial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSendInviteTrial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSendInviteTrial* internal_default_instance() {
    return reinterpret_cast<const CSendInviteTrial*>(
               &_CSendInviteTrial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CSendInviteTrial& a, CSendInviteTrial& b) {
    a.Swap(&b);
  }
  inline void Swap(CSendInviteTrial* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSendInviteTrial* New() const final {
    return CreateMaybeMessage<CSendInviteTrial>(nullptr);
  }

  CSendInviteTrial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSendInviteTrial>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSendInviteTrial& from);
  void MergeFrom(const CSendInviteTrial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSendInviteTrial* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceDraft.CSendInviteTrial";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceDraft_2eproto);
    return ::descriptor_table_spaceDraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInviteeUidFieldNumber = 1,
  };
  // int32 inviteeUid = 1;
  void clear_inviteeuid();
  ::PROTOBUF_NAMESPACE_ID::int32 inviteeuid() const;
  void set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inviteeuid() const;
  void _internal_set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceDraft.CSendInviteTrial)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 inviteeuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceDraft_2eproto;
};
// -------------------------------------------------------------------

class SSendInviteTrial :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceDraft.SSendInviteTrial) */ {
 public:
  SSendInviteTrial();
  virtual ~SSendInviteTrial();

  SSendInviteTrial(const SSendInviteTrial& from);
  SSendInviteTrial(SSendInviteTrial&& from) noexcept
    : SSendInviteTrial() {
    *this = ::std::move(from);
  }

  inline SSendInviteTrial& operator=(const SSendInviteTrial& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSendInviteTrial& operator=(SSendInviteTrial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSendInviteTrial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSendInviteTrial* internal_default_instance() {
    return reinterpret_cast<const SSendInviteTrial*>(
               &_SSendInviteTrial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SSendInviteTrial& a, SSendInviteTrial& b) {
    a.Swap(&b);
  }
  inline void Swap(SSendInviteTrial* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSendInviteTrial* New() const final {
    return CreateMaybeMessage<SSendInviteTrial>(nullptr);
  }

  SSendInviteTrial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSendInviteTrial>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSendInviteTrial& from);
  void MergeFrom(const SSendInviteTrial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSendInviteTrial* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceDraft.SSendInviteTrial";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceDraft_2eproto);
    return ::descriptor_table_spaceDraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kInviteAvatarFieldNumber = 3,
    kInviteNickFieldNumber = 5,
    kStateFieldNumber = 1,
    kInviteUidFieldNumber = 4,
    kSpaceDraftIdFieldNumber = 6,
    kInviteeUidFieldNumber = 7,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string inviteAvatar = 3;
  void clear_inviteavatar();
  const std::string& inviteavatar() const;
  void set_inviteavatar(const std::string& value);
  void set_inviteavatar(std::string&& value);
  void set_inviteavatar(const char* value);
  void set_inviteavatar(const char* value, size_t size);
  std::string* mutable_inviteavatar();
  std::string* release_inviteavatar();
  void set_allocated_inviteavatar(std::string* inviteavatar);
  private:
  const std::string& _internal_inviteavatar() const;
  void _internal_set_inviteavatar(const std::string& value);
  std::string* _internal_mutable_inviteavatar();
  public:

  // string inviteNick = 5;
  void clear_invitenick();
  const std::string& invitenick() const;
  void set_invitenick(const std::string& value);
  void set_invitenick(std::string&& value);
  void set_invitenick(const char* value);
  void set_invitenick(const char* value, size_t size);
  std::string* mutable_invitenick();
  std::string* release_invitenick();
  void set_allocated_invitenick(std::string* invitenick);
  private:
  const std::string& _internal_invitenick() const;
  void _internal_set_invitenick(const std::string& value);
  std::string* _internal_mutable_invitenick();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inviteUid = 4;
  void clear_inviteuid();
  ::PROTOBUF_NAMESPACE_ID::int32 inviteuid() const;
  void set_inviteuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inviteuid() const;
  void _internal_set_inviteuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 spaceDraftId = 6;
  void clear_spacedraftid();
  ::PROTOBUF_NAMESPACE_ID::int32 spacedraftid() const;
  void set_spacedraftid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacedraftid() const;
  void _internal_set_spacedraftid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inviteeUid = 7;
  void clear_inviteeuid();
  ::PROTOBUF_NAMESPACE_ID::int32 inviteeuid() const;
  void set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inviteeuid() const;
  void _internal_set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceDraft.SSendInviteTrial)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inviteavatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invitenick_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 inviteuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacedraftid_;
  ::PROTOBUF_NAMESPACE_ID::int32 inviteeuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceDraft_2eproto;
};
// -------------------------------------------------------------------

class CCheckInviteTrial :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceDraft.CCheckInviteTrial) */ {
 public:
  CCheckInviteTrial();
  virtual ~CCheckInviteTrial();

  CCheckInviteTrial(const CCheckInviteTrial& from);
  CCheckInviteTrial(CCheckInviteTrial&& from) noexcept
    : CCheckInviteTrial() {
    *this = ::std::move(from);
  }

  inline CCheckInviteTrial& operator=(const CCheckInviteTrial& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCheckInviteTrial& operator=(CCheckInviteTrial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCheckInviteTrial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CCheckInviteTrial* internal_default_instance() {
    return reinterpret_cast<const CCheckInviteTrial*>(
               &_CCheckInviteTrial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CCheckInviteTrial& a, CCheckInviteTrial& b) {
    a.Swap(&b);
  }
  inline void Swap(CCheckInviteTrial* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCheckInviteTrial* New() const final {
    return CreateMaybeMessage<CCheckInviteTrial>(nullptr);
  }

  CCheckInviteTrial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCheckInviteTrial>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCheckInviteTrial& from);
  void MergeFrom(const CCheckInviteTrial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCheckInviteTrial* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceDraft.CCheckInviteTrial";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceDraft_2eproto);
    return ::descriptor_table_spaceDraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpaceDraftIdFieldNumber = 1,
    kInviteUidFieldNumber = 2,
  };
  // int32 spaceDraftId = 1;
  void clear_spacedraftid();
  ::PROTOBUF_NAMESPACE_ID::int32 spacedraftid() const;
  void set_spacedraftid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_spacedraftid() const;
  void _internal_set_spacedraftid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inviteUid = 2;
  void clear_inviteuid();
  ::PROTOBUF_NAMESPACE_ID::int32 inviteuid() const;
  void set_inviteuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inviteuid() const;
  void _internal_set_inviteuid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceDraft.CCheckInviteTrial)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 spacedraftid_;
  ::PROTOBUF_NAMESPACE_ID::int32 inviteuid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceDraft_2eproto;
};
// -------------------------------------------------------------------

class SCheckInviteTrial :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceDraft.SCheckInviteTrial) */ {
 public:
  SCheckInviteTrial();
  virtual ~SCheckInviteTrial();

  SCheckInviteTrial(const SCheckInviteTrial& from);
  SCheckInviteTrial(SCheckInviteTrial&& from) noexcept
    : SCheckInviteTrial() {
    *this = ::std::move(from);
  }

  inline SCheckInviteTrial& operator=(const SCheckInviteTrial& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCheckInviteTrial& operator=(SCheckInviteTrial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SCheckInviteTrial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCheckInviteTrial* internal_default_instance() {
    return reinterpret_cast<const SCheckInviteTrial*>(
               &_SCheckInviteTrial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SCheckInviteTrial& a, SCheckInviteTrial& b) {
    a.Swap(&b);
  }
  inline void Swap(SCheckInviteTrial* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SCheckInviteTrial* New() const final {
    return CreateMaybeMessage<SCheckInviteTrial>(nullptr);
  }

  SCheckInviteTrial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SCheckInviteTrial>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SCheckInviteTrial& from);
  void MergeFrom(const SCheckInviteTrial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCheckInviteTrial* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceDraft.SCheckInviteTrial";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceDraft_2eproto);
    return ::descriptor_table_spaceDraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceDraft.SCheckInviteTrial)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceDraft_2eproto;
};
// -------------------------------------------------------------------

class SInviteTrialEnd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:spaceDraft.SInviteTrialEnd) */ {
 public:
  SInviteTrialEnd();
  virtual ~SInviteTrialEnd();

  SInviteTrialEnd(const SInviteTrialEnd& from);
  SInviteTrialEnd(SInviteTrialEnd&& from) noexcept
    : SInviteTrialEnd() {
    *this = ::std::move(from);
  }

  inline SInviteTrialEnd& operator=(const SInviteTrialEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SInviteTrialEnd& operator=(SInviteTrialEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SInviteTrialEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SInviteTrialEnd* internal_default_instance() {
    return reinterpret_cast<const SInviteTrialEnd*>(
               &_SInviteTrialEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SInviteTrialEnd& a, SInviteTrialEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(SInviteTrialEnd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SInviteTrialEnd* New() const final {
    return CreateMaybeMessage<SInviteTrialEnd>(nullptr);
  }

  SInviteTrialEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SInviteTrialEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SInviteTrialEnd& from);
  void MergeFrom(const SInviteTrialEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SInviteTrialEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "spaceDraft.SInviteTrialEnd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_spaceDraft_2eproto);
    return ::descriptor_table_spaceDraft_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:spaceDraft.SInviteTrialEnd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_spaceDraft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CGetSpaceDraftList

// int32 curPage = 1;
inline void CGetSpaceDraftList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetSpaceDraftList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetSpaceDraftList::curpage() const {
  // @@protoc_insertion_point(field_get:spaceDraft.CGetSpaceDraftList.curPage)
  return _internal_curpage();
}
inline void CGetSpaceDraftList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void CGetSpaceDraftList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:spaceDraft.CGetSpaceDraftList.curPage)
}

// int32 pageLimit = 2;
inline void CGetSpaceDraftList::clear_pagelimit() {
  pagelimit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetSpaceDraftList::_internal_pagelimit() const {
  return pagelimit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CGetSpaceDraftList::pagelimit() const {
  // @@protoc_insertion_point(field_get:spaceDraft.CGetSpaceDraftList.pageLimit)
  return _internal_pagelimit();
}
inline void CGetSpaceDraftList::_internal_set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pagelimit_ = value;
}
inline void CGetSpaceDraftList::set_pagelimit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pagelimit(value);
  // @@protoc_insertion_point(field_set:spaceDraft.CGetSpaceDraftList.pageLimit)
}

// -------------------------------------------------------------------

// SpaceDraft

// int32 id = 1;
inline void SpaceDraft::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::id() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.id)
  return _internal_id();
}
inline void SpaceDraft::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SpaceDraft::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.id)
}

// int32 createUid = 2;
inline void SpaceDraft::clear_createuid() {
  createuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::_internal_createuid() const {
  return createuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::createuid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.createUid)
  return _internal_createuid();
}
inline void SpaceDraft::_internal_set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  createuid_ = value;
}
inline void SpaceDraft::set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_createuid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.createUid)
}

// string name = 3;
inline void SpaceDraft::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceDraft::name() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.name)
  return _internal_name();
}
inline void SpaceDraft::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.name)
}
inline std::string* SpaceDraft::mutable_name() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SpaceDraft.name)
  return _internal_mutable_name();
}
inline const std::string& SpaceDraft::_internal_name() const {
  return name_.GetNoArena();
}
inline void SpaceDraft::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceDraft::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SpaceDraft.name)
}
inline void SpaceDraft::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SpaceDraft.name)
}
inline void SpaceDraft::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SpaceDraft.name)
}
inline std::string* SpaceDraft::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceDraft::release_name() {
  // @@protoc_insertion_point(field_release:spaceDraft.SpaceDraft.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDraft::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SpaceDraft.name)
}

// int32 spaceId = 4;
inline void SpaceDraft::clear_spaceid() {
  spaceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::_internal_spaceid() const {
  return spaceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::spaceid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.spaceId)
  return _internal_spaceid();
}
inline void SpaceDraft::_internal_set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spaceid_ = value;
}
inline void SpaceDraft::set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spaceid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.spaceId)
}

// int32 spaceBackpackId = 5;
inline void SpaceDraft::clear_spacebackpackid() {
  spacebackpackid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::_internal_spacebackpackid() const {
  return spacebackpackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::spacebackpackid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.spaceBackpackId)
  return _internal_spacebackpackid();
}
inline void SpaceDraft::_internal_set_spacebackpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacebackpackid_ = value;
}
inline void SpaceDraft::set_spacebackpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacebackpackid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.spaceBackpackId)
}

// string cover = 6;
inline void SpaceDraft::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceDraft::cover() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.cover)
  return _internal_cover();
}
inline void SpaceDraft::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.cover)
}
inline std::string* SpaceDraft::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SpaceDraft.cover)
  return _internal_mutable_cover();
}
inline const std::string& SpaceDraft::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void SpaceDraft::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceDraft::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SpaceDraft.cover)
}
inline void SpaceDraft::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SpaceDraft.cover)
}
inline void SpaceDraft::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SpaceDraft.cover)
}
inline std::string* SpaceDraft::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceDraft::release_cover() {
  // @@protoc_insertion_point(field_release:spaceDraft.SpaceDraft.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDraft::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SpaceDraft.cover)
}

// string squareCover = 7;
inline void SpaceDraft::clear_squarecover() {
  squarecover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceDraft::squarecover() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.squareCover)
  return _internal_squarecover();
}
inline void SpaceDraft::set_squarecover(const std::string& value) {
  _internal_set_squarecover(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.squareCover)
}
inline std::string* SpaceDraft::mutable_squarecover() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SpaceDraft.squareCover)
  return _internal_mutable_squarecover();
}
inline const std::string& SpaceDraft::_internal_squarecover() const {
  return squarecover_.GetNoArena();
}
inline void SpaceDraft::_internal_set_squarecover(const std::string& value) {
  
  squarecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceDraft::set_squarecover(std::string&& value) {
  
  squarecover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SpaceDraft.squareCover)
}
inline void SpaceDraft::set_squarecover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  squarecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SpaceDraft.squareCover)
}
inline void SpaceDraft::set_squarecover(const char* value, size_t size) {
  
  squarecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SpaceDraft.squareCover)
}
inline std::string* SpaceDraft::_internal_mutable_squarecover() {
  
  return squarecover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceDraft::release_squarecover() {
  // @@protoc_insertion_point(field_release:spaceDraft.SpaceDraft.squareCover)
  
  return squarecover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDraft::set_allocated_squarecover(std::string* squarecover) {
  if (squarecover != nullptr) {
    
  } else {
    
  }
  squarecover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), squarecover);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SpaceDraft.squareCover)
}

// string configUrl = 8;
inline void SpaceDraft::clear_configurl() {
  configurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceDraft::configurl() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.configUrl)
  return _internal_configurl();
}
inline void SpaceDraft::set_configurl(const std::string& value) {
  _internal_set_configurl(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.configUrl)
}
inline std::string* SpaceDraft::mutable_configurl() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SpaceDraft.configUrl)
  return _internal_mutable_configurl();
}
inline const std::string& SpaceDraft::_internal_configurl() const {
  return configurl_.GetNoArena();
}
inline void SpaceDraft::_internal_set_configurl(const std::string& value) {
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceDraft::set_configurl(std::string&& value) {
  
  configurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SpaceDraft.configUrl)
}
inline void SpaceDraft::set_configurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SpaceDraft.configUrl)
}
inline void SpaceDraft::set_configurl(const char* value, size_t size) {
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SpaceDraft.configUrl)
}
inline std::string* SpaceDraft::_internal_mutable_configurl() {
  
  return configurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceDraft::release_configurl() {
  // @@protoc_insertion_point(field_release:spaceDraft.SpaceDraft.configUrl)
  
  return configurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDraft::set_allocated_configurl(std::string* configurl) {
  if (configurl != nullptr) {
    
  } else {
    
  }
  configurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configurl);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SpaceDraft.configUrl)
}

// string desc = 9;
inline void SpaceDraft::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceDraft::desc() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.desc)
  return _internal_desc();
}
inline void SpaceDraft::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.desc)
}
inline std::string* SpaceDraft::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SpaceDraft.desc)
  return _internal_mutable_desc();
}
inline const std::string& SpaceDraft::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void SpaceDraft::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceDraft::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SpaceDraft.desc)
}
inline void SpaceDraft::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SpaceDraft.desc)
}
inline void SpaceDraft::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SpaceDraft.desc)
}
inline std::string* SpaceDraft::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceDraft::release_desc() {
  // @@protoc_insertion_point(field_release:spaceDraft.SpaceDraft.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDraft::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SpaceDraft.desc)
}

// string rule = 10;
inline void SpaceDraft::clear_rule() {
  rule_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceDraft::rule() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.rule)
  return _internal_rule();
}
inline void SpaceDraft::set_rule(const std::string& value) {
  _internal_set_rule(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.rule)
}
inline std::string* SpaceDraft::mutable_rule() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SpaceDraft.rule)
  return _internal_mutable_rule();
}
inline const std::string& SpaceDraft::_internal_rule() const {
  return rule_.GetNoArena();
}
inline void SpaceDraft::_internal_set_rule(const std::string& value) {
  
  rule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceDraft::set_rule(std::string&& value) {
  
  rule_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SpaceDraft.rule)
}
inline void SpaceDraft::set_rule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SpaceDraft.rule)
}
inline void SpaceDraft::set_rule(const char* value, size_t size) {
  
  rule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SpaceDraft.rule)
}
inline std::string* SpaceDraft::_internal_mutable_rule() {
  
  return rule_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceDraft::release_rule() {
  // @@protoc_insertion_point(field_release:spaceDraft.SpaceDraft.rule)
  
  return rule_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDraft::set_allocated_rule(std::string* rule) {
  if (rule != nullptr) {
    
  } else {
    
  }
  rule_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SpaceDraft.rule)
}

// int32 isCollect = 11;
inline void SpaceDraft::clear_iscollect() {
  iscollect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::_internal_iscollect() const {
  return iscollect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::iscollect() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.isCollect)
  return _internal_iscollect();
}
inline void SpaceDraft::_internal_set_iscollect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iscollect_ = value;
}
inline void SpaceDraft::set_iscollect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iscollect(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.isCollect)
}

// int32 isRecreation = 12;
inline void SpaceDraft::clear_isrecreation() {
  isrecreation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::_internal_isrecreation() const {
  return isrecreation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::isrecreation() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.isRecreation)
  return _internal_isrecreation();
}
inline void SpaceDraft::_internal_set_isrecreation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isrecreation_ = value;
}
inline void SpaceDraft::set_isrecreation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isrecreation(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.isRecreation)
}

// int32 isCopy = 13;
inline void SpaceDraft::clear_iscopy() {
  iscopy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::_internal_iscopy() const {
  return iscopy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::iscopy() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.isCopy)
  return _internal_iscopy();
}
inline void SpaceDraft::_internal_set_iscopy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iscopy_ = value;
}
inline void SpaceDraft::set_iscopy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_iscopy(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.isCopy)
}

// int32 isOpen = 14;
inline void SpaceDraft::clear_isopen() {
  isopen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::_internal_isopen() const {
  return isopen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SpaceDraft::isopen() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.isOpen)
  return _internal_isopen();
}
inline void SpaceDraft::_internal_set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isopen_ = value;
}
inline void SpaceDraft::set_isopen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isopen(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.isOpen)
}

// string ServerLuaUrl = 15;
inline void SpaceDraft::clear_serverluaurl() {
  serverluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceDraft::serverluaurl() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.ServerLuaUrl)
  return _internal_serverluaurl();
}
inline void SpaceDraft::set_serverluaurl(const std::string& value) {
  _internal_set_serverluaurl(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.ServerLuaUrl)
}
inline std::string* SpaceDraft::mutable_serverluaurl() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SpaceDraft.ServerLuaUrl)
  return _internal_mutable_serverluaurl();
}
inline const std::string& SpaceDraft::_internal_serverluaurl() const {
  return serverluaurl_.GetNoArena();
}
inline void SpaceDraft::_internal_set_serverluaurl(const std::string& value) {
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceDraft::set_serverluaurl(std::string&& value) {
  
  serverluaurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SpaceDraft.ServerLuaUrl)
}
inline void SpaceDraft::set_serverluaurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SpaceDraft.ServerLuaUrl)
}
inline void SpaceDraft::set_serverluaurl(const char* value, size_t size) {
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SpaceDraft.ServerLuaUrl)
}
inline std::string* SpaceDraft::_internal_mutable_serverluaurl() {
  
  return serverluaurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceDraft::release_serverluaurl() {
  // @@protoc_insertion_point(field_release:spaceDraft.SpaceDraft.ServerLuaUrl)
  
  return serverluaurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDraft::set_allocated_serverluaurl(std::string* serverluaurl) {
  if (serverluaurl != nullptr) {
    
  } else {
    
  }
  serverluaurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverluaurl);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SpaceDraft.ServerLuaUrl)
}

// string ClientLuaUrl = 16;
inline void SpaceDraft::clear_clientluaurl() {
  clientluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceDraft::clientluaurl() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.ClientLuaUrl)
  return _internal_clientluaurl();
}
inline void SpaceDraft::set_clientluaurl(const std::string& value) {
  _internal_set_clientluaurl(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.ClientLuaUrl)
}
inline std::string* SpaceDraft::mutable_clientluaurl() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SpaceDraft.ClientLuaUrl)
  return _internal_mutable_clientluaurl();
}
inline const std::string& SpaceDraft::_internal_clientluaurl() const {
  return clientluaurl_.GetNoArena();
}
inline void SpaceDraft::_internal_set_clientluaurl(const std::string& value) {
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceDraft::set_clientluaurl(std::string&& value) {
  
  clientluaurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SpaceDraft.ClientLuaUrl)
}
inline void SpaceDraft::set_clientluaurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SpaceDraft.ClientLuaUrl)
}
inline void SpaceDraft::set_clientluaurl(const char* value, size_t size) {
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SpaceDraft.ClientLuaUrl)
}
inline std::string* SpaceDraft::_internal_mutable_clientluaurl() {
  
  return clientluaurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceDraft::release_clientluaurl() {
  // @@protoc_insertion_point(field_release:spaceDraft.SpaceDraft.ClientLuaUrl)
  
  return clientluaurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDraft::set_allocated_clientluaurl(std::string* clientluaurl) {
  if (clientluaurl != nullptr) {
    
  } else {
    
  }
  clientluaurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientluaurl);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SpaceDraft.ClientLuaUrl)
}

// string createdAt = 17;
inline void SpaceDraft::clear_createdat() {
  createdat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceDraft::createdat() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.createdAt)
  return _internal_createdat();
}
inline void SpaceDraft::set_createdat(const std::string& value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.createdAt)
}
inline std::string* SpaceDraft::mutable_createdat() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SpaceDraft.createdAt)
  return _internal_mutable_createdat();
}
inline const std::string& SpaceDraft::_internal_createdat() const {
  return createdat_.GetNoArena();
}
inline void SpaceDraft::_internal_set_createdat(const std::string& value) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceDraft::set_createdat(std::string&& value) {
  
  createdat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SpaceDraft.createdAt)
}
inline void SpaceDraft::set_createdat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SpaceDraft.createdAt)
}
inline void SpaceDraft::set_createdat(const char* value, size_t size) {
  
  createdat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SpaceDraft.createdAt)
}
inline std::string* SpaceDraft::_internal_mutable_createdat() {
  
  return createdat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceDraft::release_createdat() {
  // @@protoc_insertion_point(field_release:spaceDraft.SpaceDraft.createdAt)
  
  return createdat_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDraft::set_allocated_createdat(std::string* createdat) {
  if (createdat != nullptr) {
    
  } else {
    
  }
  createdat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdat);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SpaceDraft.createdAt)
}

// string updateAt = 18;
inline void SpaceDraft::clear_updateat() {
  updateat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SpaceDraft::updateat() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SpaceDraft.updateAt)
  return _internal_updateat();
}
inline void SpaceDraft::set_updateat(const std::string& value) {
  _internal_set_updateat(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SpaceDraft.updateAt)
}
inline std::string* SpaceDraft::mutable_updateat() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SpaceDraft.updateAt)
  return _internal_mutable_updateat();
}
inline const std::string& SpaceDraft::_internal_updateat() const {
  return updateat_.GetNoArena();
}
inline void SpaceDraft::_internal_set_updateat(const std::string& value) {
  
  updateat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SpaceDraft::set_updateat(std::string&& value) {
  
  updateat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SpaceDraft.updateAt)
}
inline void SpaceDraft::set_updateat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  updateat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SpaceDraft.updateAt)
}
inline void SpaceDraft::set_updateat(const char* value, size_t size) {
  
  updateat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SpaceDraft.updateAt)
}
inline std::string* SpaceDraft::_internal_mutable_updateat() {
  
  return updateat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SpaceDraft::release_updateat() {
  // @@protoc_insertion_point(field_release:spaceDraft.SpaceDraft.updateAt)
  
  return updateat_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SpaceDraft::set_allocated_updateat(std::string* updateat) {
  if (updateat != nullptr) {
    
  } else {
    
  }
  updateat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updateat);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SpaceDraft.updateAt)
}

// -------------------------------------------------------------------

// SGetSpaceDraftList

// repeated .spaceDraft.SpaceDraft list = 1;
inline int SGetSpaceDraftList::_internal_list_size() const {
  return list_.size();
}
inline int SGetSpaceDraftList::list_size() const {
  return _internal_list_size();
}
inline void SGetSpaceDraftList::clear_list() {
  list_.Clear();
}
inline ::spaceDraft::SpaceDraft* SGetSpaceDraftList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SGetSpaceDraftList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceDraft::SpaceDraft >*
SGetSpaceDraftList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:spaceDraft.SGetSpaceDraftList.list)
  return &list_;
}
inline const ::spaceDraft::SpaceDraft& SGetSpaceDraftList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::spaceDraft::SpaceDraft& SGetSpaceDraftList::list(int index) const {
  // @@protoc_insertion_point(field_get:spaceDraft.SGetSpaceDraftList.list)
  return _internal_list(index);
}
inline ::spaceDraft::SpaceDraft* SGetSpaceDraftList::_internal_add_list() {
  return list_.Add();
}
inline ::spaceDraft::SpaceDraft* SGetSpaceDraftList::add_list() {
  // @@protoc_insertion_point(field_add:spaceDraft.SGetSpaceDraftList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::spaceDraft::SpaceDraft >&
SGetSpaceDraftList::list() const {
  // @@protoc_insertion_point(field_list:spaceDraft.SGetSpaceDraftList.list)
  return list_;
}

// string msg = 2;
inline void SGetSpaceDraftList::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SGetSpaceDraftList::msg() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SGetSpaceDraftList.msg)
  return _internal_msg();
}
inline void SGetSpaceDraftList::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SGetSpaceDraftList.msg)
}
inline std::string* SGetSpaceDraftList::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SGetSpaceDraftList.msg)
  return _internal_mutable_msg();
}
inline const std::string& SGetSpaceDraftList::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SGetSpaceDraftList::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SGetSpaceDraftList::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SGetSpaceDraftList.msg)
}
inline void SGetSpaceDraftList::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SGetSpaceDraftList.msg)
}
inline void SGetSpaceDraftList::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SGetSpaceDraftList.msg)
}
inline std::string* SGetSpaceDraftList::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SGetSpaceDraftList::release_msg() {
  // @@protoc_insertion_point(field_release:spaceDraft.SGetSpaceDraftList.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SGetSpaceDraftList::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SGetSpaceDraftList.msg)
}

// int32 curPage = 3;
inline void SGetSpaceDraftList::clear_curpage() {
  curpage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceDraftList::_internal_curpage() const {
  return curpage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceDraftList::curpage() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SGetSpaceDraftList.curPage)
  return _internal_curpage();
}
inline void SGetSpaceDraftList::_internal_set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curpage_ = value;
}
inline void SGetSpaceDraftList::set_curpage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curpage(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SGetSpaceDraftList.curPage)
}

// int32 spaceNum = 4;
inline void SGetSpaceDraftList::clear_spacenum() {
  spacenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceDraftList::_internal_spacenum() const {
  return spacenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SGetSpaceDraftList::spacenum() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SGetSpaceDraftList.spaceNum)
  return _internal_spacenum();
}
inline void SGetSpaceDraftList::_internal_set_spacenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacenum_ = value;
}
inline void SGetSpaceDraftList::set_spacenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacenum(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SGetSpaceDraftList.spaceNum)
}

// -------------------------------------------------------------------

// CSpaceDraftDetail

// int32 spaceDraftId = 1;
inline void CSpaceDraftDetail::clear_spacedraftid() {
  spacedraftid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceDraftDetail::_internal_spacedraftid() const {
  return spacedraftid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSpaceDraftDetail::spacedraftid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.CSpaceDraftDetail.spaceDraftId)
  return _internal_spacedraftid();
}
inline void CSpaceDraftDetail::_internal_set_spacedraftid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacedraftid_ = value;
}
inline void CSpaceDraftDetail::set_spacedraftid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacedraftid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.CSpaceDraftDetail.spaceDraftId)
}

// -------------------------------------------------------------------

// SSpaceDraftDetail

// int32 id = 1;
inline void SSpaceDraftDetail::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceDraftDetail::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceDraftDetail::id() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.id)
  return _internal_id();
}
inline void SSpaceDraftDetail::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SSpaceDraftDetail::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.id)
}

// int32 createUid = 2;
inline void SSpaceDraftDetail::clear_createuid() {
  createuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceDraftDetail::_internal_createuid() const {
  return createuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceDraftDetail::createuid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.createUid)
  return _internal_createuid();
}
inline void SSpaceDraftDetail::_internal_set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  createuid_ = value;
}
inline void SSpaceDraftDetail::set_createuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_createuid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.createUid)
}

// string name = 3;
inline void SSpaceDraftDetail::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceDraftDetail::name() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.name)
  return _internal_name();
}
inline void SSpaceDraftDetail::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.name)
}
inline std::string* SSpaceDraftDetail::mutable_name() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SSpaceDraftDetail.name)
  return _internal_mutable_name();
}
inline const std::string& SSpaceDraftDetail::_internal_name() const {
  return name_.GetNoArena();
}
inline void SSpaceDraftDetail::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceDraftDetail::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SSpaceDraftDetail.name)
}
inline void SSpaceDraftDetail::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SSpaceDraftDetail.name)
}
inline void SSpaceDraftDetail::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SSpaceDraftDetail.name)
}
inline std::string* SSpaceDraftDetail::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceDraftDetail::release_name() {
  // @@protoc_insertion_point(field_release:spaceDraft.SSpaceDraftDetail.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceDraftDetail::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SSpaceDraftDetail.name)
}

// int32 spaceId = 4;
inline void SSpaceDraftDetail::clear_spaceid() {
  spaceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceDraftDetail::_internal_spaceid() const {
  return spaceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceDraftDetail::spaceid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.spaceId)
  return _internal_spaceid();
}
inline void SSpaceDraftDetail::_internal_set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spaceid_ = value;
}
inline void SSpaceDraftDetail::set_spaceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spaceid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.spaceId)
}

// int32 spaceBackpackId = 5;
inline void SSpaceDraftDetail::clear_spacebackpackid() {
  spacebackpackid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceDraftDetail::_internal_spacebackpackid() const {
  return spacebackpackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSpaceDraftDetail::spacebackpackid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.spaceBackpackId)
  return _internal_spacebackpackid();
}
inline void SSpaceDraftDetail::_internal_set_spacebackpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacebackpackid_ = value;
}
inline void SSpaceDraftDetail::set_spacebackpackid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacebackpackid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.spaceBackpackId)
}

// string cover = 6;
inline void SSpaceDraftDetail::clear_cover() {
  cover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceDraftDetail::cover() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.cover)
  return _internal_cover();
}
inline void SSpaceDraftDetail::set_cover(const std::string& value) {
  _internal_set_cover(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.cover)
}
inline std::string* SSpaceDraftDetail::mutable_cover() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SSpaceDraftDetail.cover)
  return _internal_mutable_cover();
}
inline const std::string& SSpaceDraftDetail::_internal_cover() const {
  return cover_.GetNoArena();
}
inline void SSpaceDraftDetail::_internal_set_cover(const std::string& value) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceDraftDetail::set_cover(std::string&& value) {
  
  cover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SSpaceDraftDetail.cover)
}
inline void SSpaceDraftDetail::set_cover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SSpaceDraftDetail.cover)
}
inline void SSpaceDraftDetail::set_cover(const char* value, size_t size) {
  
  cover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SSpaceDraftDetail.cover)
}
inline std::string* SSpaceDraftDetail::_internal_mutable_cover() {
  
  return cover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceDraftDetail::release_cover() {
  // @@protoc_insertion_point(field_release:spaceDraft.SSpaceDraftDetail.cover)
  
  return cover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceDraftDetail::set_allocated_cover(std::string* cover) {
  if (cover != nullptr) {
    
  } else {
    
  }
  cover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cover);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SSpaceDraftDetail.cover)
}

// string squareCover = 7;
inline void SSpaceDraftDetail::clear_squarecover() {
  squarecover_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceDraftDetail::squarecover() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.squareCover)
  return _internal_squarecover();
}
inline void SSpaceDraftDetail::set_squarecover(const std::string& value) {
  _internal_set_squarecover(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.squareCover)
}
inline std::string* SSpaceDraftDetail::mutable_squarecover() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SSpaceDraftDetail.squareCover)
  return _internal_mutable_squarecover();
}
inline const std::string& SSpaceDraftDetail::_internal_squarecover() const {
  return squarecover_.GetNoArena();
}
inline void SSpaceDraftDetail::_internal_set_squarecover(const std::string& value) {
  
  squarecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceDraftDetail::set_squarecover(std::string&& value) {
  
  squarecover_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SSpaceDraftDetail.squareCover)
}
inline void SSpaceDraftDetail::set_squarecover(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  squarecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SSpaceDraftDetail.squareCover)
}
inline void SSpaceDraftDetail::set_squarecover(const char* value, size_t size) {
  
  squarecover_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SSpaceDraftDetail.squareCover)
}
inline std::string* SSpaceDraftDetail::_internal_mutable_squarecover() {
  
  return squarecover_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceDraftDetail::release_squarecover() {
  // @@protoc_insertion_point(field_release:spaceDraft.SSpaceDraftDetail.squareCover)
  
  return squarecover_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceDraftDetail::set_allocated_squarecover(std::string* squarecover) {
  if (squarecover != nullptr) {
    
  } else {
    
  }
  squarecover_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), squarecover);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SSpaceDraftDetail.squareCover)
}

// string configUrl = 8;
inline void SSpaceDraftDetail::clear_configurl() {
  configurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceDraftDetail::configurl() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.configUrl)
  return _internal_configurl();
}
inline void SSpaceDraftDetail::set_configurl(const std::string& value) {
  _internal_set_configurl(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.configUrl)
}
inline std::string* SSpaceDraftDetail::mutable_configurl() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SSpaceDraftDetail.configUrl)
  return _internal_mutable_configurl();
}
inline const std::string& SSpaceDraftDetail::_internal_configurl() const {
  return configurl_.GetNoArena();
}
inline void SSpaceDraftDetail::_internal_set_configurl(const std::string& value) {
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceDraftDetail::set_configurl(std::string&& value) {
  
  configurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SSpaceDraftDetail.configUrl)
}
inline void SSpaceDraftDetail::set_configurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SSpaceDraftDetail.configUrl)
}
inline void SSpaceDraftDetail::set_configurl(const char* value, size_t size) {
  
  configurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SSpaceDraftDetail.configUrl)
}
inline std::string* SSpaceDraftDetail::_internal_mutable_configurl() {
  
  return configurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceDraftDetail::release_configurl() {
  // @@protoc_insertion_point(field_release:spaceDraft.SSpaceDraftDetail.configUrl)
  
  return configurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceDraftDetail::set_allocated_configurl(std::string* configurl) {
  if (configurl != nullptr) {
    
  } else {
    
  }
  configurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configurl);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SSpaceDraftDetail.configUrl)
}

// string desc = 9;
inline void SSpaceDraftDetail::clear_desc() {
  desc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceDraftDetail::desc() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.desc)
  return _internal_desc();
}
inline void SSpaceDraftDetail::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.desc)
}
inline std::string* SSpaceDraftDetail::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SSpaceDraftDetail.desc)
  return _internal_mutable_desc();
}
inline const std::string& SSpaceDraftDetail::_internal_desc() const {
  return desc_.GetNoArena();
}
inline void SSpaceDraftDetail::_internal_set_desc(const std::string& value) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceDraftDetail::set_desc(std::string&& value) {
  
  desc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SSpaceDraftDetail.desc)
}
inline void SSpaceDraftDetail::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SSpaceDraftDetail.desc)
}
inline void SSpaceDraftDetail::set_desc(const char* value, size_t size) {
  
  desc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SSpaceDraftDetail.desc)
}
inline std::string* SSpaceDraftDetail::_internal_mutable_desc() {
  
  return desc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceDraftDetail::release_desc() {
  // @@protoc_insertion_point(field_release:spaceDraft.SSpaceDraftDetail.desc)
  
  return desc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceDraftDetail::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SSpaceDraftDetail.desc)
}

// string rule = 10;
inline void SSpaceDraftDetail::clear_rule() {
  rule_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceDraftDetail::rule() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.rule)
  return _internal_rule();
}
inline void SSpaceDraftDetail::set_rule(const std::string& value) {
  _internal_set_rule(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.rule)
}
inline std::string* SSpaceDraftDetail::mutable_rule() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SSpaceDraftDetail.rule)
  return _internal_mutable_rule();
}
inline const std::string& SSpaceDraftDetail::_internal_rule() const {
  return rule_.GetNoArena();
}
inline void SSpaceDraftDetail::_internal_set_rule(const std::string& value) {
  
  rule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceDraftDetail::set_rule(std::string&& value) {
  
  rule_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SSpaceDraftDetail.rule)
}
inline void SSpaceDraftDetail::set_rule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SSpaceDraftDetail.rule)
}
inline void SSpaceDraftDetail::set_rule(const char* value, size_t size) {
  
  rule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SSpaceDraftDetail.rule)
}
inline std::string* SSpaceDraftDetail::_internal_mutable_rule() {
  
  return rule_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceDraftDetail::release_rule() {
  // @@protoc_insertion_point(field_release:spaceDraft.SSpaceDraftDetail.rule)
  
  return rule_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceDraftDetail::set_allocated_rule(std::string* rule) {
  if (rule != nullptr) {
    
  } else {
    
  }
  rule_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SSpaceDraftDetail.rule)
}

// string resource = 11;
inline void SSpaceDraftDetail::clear_resource() {
  resource_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceDraftDetail::resource() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.resource)
  return _internal_resource();
}
inline void SSpaceDraftDetail::set_resource(const std::string& value) {
  _internal_set_resource(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.resource)
}
inline std::string* SSpaceDraftDetail::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SSpaceDraftDetail.resource)
  return _internal_mutable_resource();
}
inline const std::string& SSpaceDraftDetail::_internal_resource() const {
  return resource_.GetNoArena();
}
inline void SSpaceDraftDetail::_internal_set_resource(const std::string& value) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceDraftDetail::set_resource(std::string&& value) {
  
  resource_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SSpaceDraftDetail.resource)
}
inline void SSpaceDraftDetail::set_resource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SSpaceDraftDetail.resource)
}
inline void SSpaceDraftDetail::set_resource(const char* value, size_t size) {
  
  resource_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SSpaceDraftDetail.resource)
}
inline std::string* SSpaceDraftDetail::_internal_mutable_resource() {
  
  return resource_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceDraftDetail::release_resource() {
  // @@protoc_insertion_point(field_release:spaceDraft.SSpaceDraftDetail.resource)
  
  return resource_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceDraftDetail::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SSpaceDraftDetail.resource)
}

// string ServerLuaUrl = 12;
inline void SSpaceDraftDetail::clear_serverluaurl() {
  serverluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceDraftDetail::serverluaurl() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.ServerLuaUrl)
  return _internal_serverluaurl();
}
inline void SSpaceDraftDetail::set_serverluaurl(const std::string& value) {
  _internal_set_serverluaurl(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.ServerLuaUrl)
}
inline std::string* SSpaceDraftDetail::mutable_serverluaurl() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SSpaceDraftDetail.ServerLuaUrl)
  return _internal_mutable_serverluaurl();
}
inline const std::string& SSpaceDraftDetail::_internal_serverluaurl() const {
  return serverluaurl_.GetNoArena();
}
inline void SSpaceDraftDetail::_internal_set_serverluaurl(const std::string& value) {
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceDraftDetail::set_serverluaurl(std::string&& value) {
  
  serverluaurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SSpaceDraftDetail.ServerLuaUrl)
}
inline void SSpaceDraftDetail::set_serverluaurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SSpaceDraftDetail.ServerLuaUrl)
}
inline void SSpaceDraftDetail::set_serverluaurl(const char* value, size_t size) {
  
  serverluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SSpaceDraftDetail.ServerLuaUrl)
}
inline std::string* SSpaceDraftDetail::_internal_mutable_serverluaurl() {
  
  return serverluaurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceDraftDetail::release_serverluaurl() {
  // @@protoc_insertion_point(field_release:spaceDraft.SSpaceDraftDetail.ServerLuaUrl)
  
  return serverluaurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceDraftDetail::set_allocated_serverluaurl(std::string* serverluaurl) {
  if (serverluaurl != nullptr) {
    
  } else {
    
  }
  serverluaurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverluaurl);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SSpaceDraftDetail.ServerLuaUrl)
}

// string ClientLuaUrl = 13;
inline void SSpaceDraftDetail::clear_clientluaurl() {
  clientluaurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSpaceDraftDetail::clientluaurl() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSpaceDraftDetail.ClientLuaUrl)
  return _internal_clientluaurl();
}
inline void SSpaceDraftDetail::set_clientluaurl(const std::string& value) {
  _internal_set_clientluaurl(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSpaceDraftDetail.ClientLuaUrl)
}
inline std::string* SSpaceDraftDetail::mutable_clientluaurl() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SSpaceDraftDetail.ClientLuaUrl)
  return _internal_mutable_clientluaurl();
}
inline const std::string& SSpaceDraftDetail::_internal_clientluaurl() const {
  return clientluaurl_.GetNoArena();
}
inline void SSpaceDraftDetail::_internal_set_clientluaurl(const std::string& value) {
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSpaceDraftDetail::set_clientluaurl(std::string&& value) {
  
  clientluaurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SSpaceDraftDetail.ClientLuaUrl)
}
inline void SSpaceDraftDetail::set_clientluaurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SSpaceDraftDetail.ClientLuaUrl)
}
inline void SSpaceDraftDetail::set_clientluaurl(const char* value, size_t size) {
  
  clientluaurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SSpaceDraftDetail.ClientLuaUrl)
}
inline std::string* SSpaceDraftDetail::_internal_mutable_clientluaurl() {
  
  return clientluaurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSpaceDraftDetail::release_clientluaurl() {
  // @@protoc_insertion_point(field_release:spaceDraft.SSpaceDraftDetail.ClientLuaUrl)
  
  return clientluaurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSpaceDraftDetail::set_allocated_clientluaurl(std::string* clientluaurl) {
  if (clientluaurl != nullptr) {
    
  } else {
    
  }
  clientluaurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientluaurl);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SSpaceDraftDetail.ClientLuaUrl)
}

// -------------------------------------------------------------------

// CSendInviteTrial

// int32 inviteeUid = 1;
inline void CSendInviteTrial::clear_inviteeuid() {
  inviteeuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSendInviteTrial::_internal_inviteeuid() const {
  return inviteeuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSendInviteTrial::inviteeuid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.CSendInviteTrial.inviteeUid)
  return _internal_inviteeuid();
}
inline void CSendInviteTrial::_internal_set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inviteeuid_ = value;
}
inline void CSendInviteTrial::set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inviteeuid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.CSendInviteTrial.inviteeUid)
}

// -------------------------------------------------------------------

// SSendInviteTrial

// int32 state = 1;
inline void SSendInviteTrial::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSendInviteTrial::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSendInviteTrial::state() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSendInviteTrial.state)
  return _internal_state();
}
inline void SSendInviteTrial::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SSendInviteTrial::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSendInviteTrial.state)
}

// string msg = 2;
inline void SSendInviteTrial::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSendInviteTrial::msg() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSendInviteTrial.msg)
  return _internal_msg();
}
inline void SSendInviteTrial::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSendInviteTrial.msg)
}
inline std::string* SSendInviteTrial::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SSendInviteTrial.msg)
  return _internal_mutable_msg();
}
inline const std::string& SSendInviteTrial::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SSendInviteTrial::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSendInviteTrial::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SSendInviteTrial.msg)
}
inline void SSendInviteTrial::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SSendInviteTrial.msg)
}
inline void SSendInviteTrial::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SSendInviteTrial.msg)
}
inline std::string* SSendInviteTrial::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSendInviteTrial::release_msg() {
  // @@protoc_insertion_point(field_release:spaceDraft.SSendInviteTrial.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSendInviteTrial::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SSendInviteTrial.msg)
}

// string inviteAvatar = 3;
inline void SSendInviteTrial::clear_inviteavatar() {
  inviteavatar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSendInviteTrial::inviteavatar() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSendInviteTrial.inviteAvatar)
  return _internal_inviteavatar();
}
inline void SSendInviteTrial::set_inviteavatar(const std::string& value) {
  _internal_set_inviteavatar(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSendInviteTrial.inviteAvatar)
}
inline std::string* SSendInviteTrial::mutable_inviteavatar() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SSendInviteTrial.inviteAvatar)
  return _internal_mutable_inviteavatar();
}
inline const std::string& SSendInviteTrial::_internal_inviteavatar() const {
  return inviteavatar_.GetNoArena();
}
inline void SSendInviteTrial::_internal_set_inviteavatar(const std::string& value) {
  
  inviteavatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSendInviteTrial::set_inviteavatar(std::string&& value) {
  
  inviteavatar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SSendInviteTrial.inviteAvatar)
}
inline void SSendInviteTrial::set_inviteavatar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inviteavatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SSendInviteTrial.inviteAvatar)
}
inline void SSendInviteTrial::set_inviteavatar(const char* value, size_t size) {
  
  inviteavatar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SSendInviteTrial.inviteAvatar)
}
inline std::string* SSendInviteTrial::_internal_mutable_inviteavatar() {
  
  return inviteavatar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSendInviteTrial::release_inviteavatar() {
  // @@protoc_insertion_point(field_release:spaceDraft.SSendInviteTrial.inviteAvatar)
  
  return inviteavatar_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSendInviteTrial::set_allocated_inviteavatar(std::string* inviteavatar) {
  if (inviteavatar != nullptr) {
    
  } else {
    
  }
  inviteavatar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inviteavatar);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SSendInviteTrial.inviteAvatar)
}

// int32 inviteUid = 4;
inline void SSendInviteTrial::clear_inviteuid() {
  inviteuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSendInviteTrial::_internal_inviteuid() const {
  return inviteuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSendInviteTrial::inviteuid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSendInviteTrial.inviteUid)
  return _internal_inviteuid();
}
inline void SSendInviteTrial::_internal_set_inviteuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inviteuid_ = value;
}
inline void SSendInviteTrial::set_inviteuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inviteuid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSendInviteTrial.inviteUid)
}

// string inviteNick = 5;
inline void SSendInviteTrial::clear_invitenick() {
  invitenick_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SSendInviteTrial::invitenick() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSendInviteTrial.inviteNick)
  return _internal_invitenick();
}
inline void SSendInviteTrial::set_invitenick(const std::string& value) {
  _internal_set_invitenick(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSendInviteTrial.inviteNick)
}
inline std::string* SSendInviteTrial::mutable_invitenick() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SSendInviteTrial.inviteNick)
  return _internal_mutable_invitenick();
}
inline const std::string& SSendInviteTrial::_internal_invitenick() const {
  return invitenick_.GetNoArena();
}
inline void SSendInviteTrial::_internal_set_invitenick(const std::string& value) {
  
  invitenick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SSendInviteTrial::set_invitenick(std::string&& value) {
  
  invitenick_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SSendInviteTrial.inviteNick)
}
inline void SSendInviteTrial::set_invitenick(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invitenick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SSendInviteTrial.inviteNick)
}
inline void SSendInviteTrial::set_invitenick(const char* value, size_t size) {
  
  invitenick_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SSendInviteTrial.inviteNick)
}
inline std::string* SSendInviteTrial::_internal_mutable_invitenick() {
  
  return invitenick_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SSendInviteTrial::release_invitenick() {
  // @@protoc_insertion_point(field_release:spaceDraft.SSendInviteTrial.inviteNick)
  
  return invitenick_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SSendInviteTrial::set_allocated_invitenick(std::string* invitenick) {
  if (invitenick != nullptr) {
    
  } else {
    
  }
  invitenick_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invitenick);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SSendInviteTrial.inviteNick)
}

// int32 spaceDraftId = 6;
inline void SSendInviteTrial::clear_spacedraftid() {
  spacedraftid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSendInviteTrial::_internal_spacedraftid() const {
  return spacedraftid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSendInviteTrial::spacedraftid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSendInviteTrial.spaceDraftId)
  return _internal_spacedraftid();
}
inline void SSendInviteTrial::_internal_set_spacedraftid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacedraftid_ = value;
}
inline void SSendInviteTrial::set_spacedraftid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacedraftid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSendInviteTrial.spaceDraftId)
}

// int32 inviteeUid = 7;
inline void SSendInviteTrial::clear_inviteeuid() {
  inviteeuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSendInviteTrial::_internal_inviteeuid() const {
  return inviteeuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SSendInviteTrial::inviteeuid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SSendInviteTrial.inviteeUid)
  return _internal_inviteeuid();
}
inline void SSendInviteTrial::_internal_set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inviteeuid_ = value;
}
inline void SSendInviteTrial::set_inviteeuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inviteeuid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SSendInviteTrial.inviteeUid)
}

// -------------------------------------------------------------------

// CCheckInviteTrial

// int32 spaceDraftId = 1;
inline void CCheckInviteTrial::clear_spacedraftid() {
  spacedraftid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCheckInviteTrial::_internal_spacedraftid() const {
  return spacedraftid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCheckInviteTrial::spacedraftid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.CCheckInviteTrial.spaceDraftId)
  return _internal_spacedraftid();
}
inline void CCheckInviteTrial::_internal_set_spacedraftid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  spacedraftid_ = value;
}
inline void CCheckInviteTrial::set_spacedraftid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_spacedraftid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.CCheckInviteTrial.spaceDraftId)
}

// int32 inviteUid = 2;
inline void CCheckInviteTrial::clear_inviteuid() {
  inviteuid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCheckInviteTrial::_internal_inviteuid() const {
  return inviteuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CCheckInviteTrial::inviteuid() const {
  // @@protoc_insertion_point(field_get:spaceDraft.CCheckInviteTrial.inviteUid)
  return _internal_inviteuid();
}
inline void CCheckInviteTrial::_internal_set_inviteuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inviteuid_ = value;
}
inline void CCheckInviteTrial::set_inviteuid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inviteuid(value);
  // @@protoc_insertion_point(field_set:spaceDraft.CCheckInviteTrial.inviteUid)
}

// -------------------------------------------------------------------

// SCheckInviteTrial

// int32 state = 1;
inline void SCheckInviteTrial::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCheckInviteTrial::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SCheckInviteTrial::state() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SCheckInviteTrial.state)
  return _internal_state();
}
inline void SCheckInviteTrial::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SCheckInviteTrial::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SCheckInviteTrial.state)
}

// string msg = 2;
inline void SCheckInviteTrial::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SCheckInviteTrial::msg() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SCheckInviteTrial.msg)
  return _internal_msg();
}
inline void SCheckInviteTrial::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SCheckInviteTrial.msg)
}
inline std::string* SCheckInviteTrial::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:spaceDraft.SCheckInviteTrial.msg)
  return _internal_mutable_msg();
}
inline const std::string& SCheckInviteTrial::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SCheckInviteTrial::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SCheckInviteTrial::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:spaceDraft.SCheckInviteTrial.msg)
}
inline void SCheckInviteTrial::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:spaceDraft.SCheckInviteTrial.msg)
}
inline void SCheckInviteTrial::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:spaceDraft.SCheckInviteTrial.msg)
}
inline std::string* SCheckInviteTrial::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SCheckInviteTrial::release_msg() {
  // @@protoc_insertion_point(field_release:spaceDraft.SCheckInviteTrial.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SCheckInviteTrial::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:spaceDraft.SCheckInviteTrial.msg)
}

// -------------------------------------------------------------------

// SInviteTrialEnd

// int32 state = 1;
inline void SInviteTrialEnd::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInviteTrialEnd::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SInviteTrialEnd::state() const {
  // @@protoc_insertion_point(field_get:spaceDraft.SInviteTrialEnd.state)
  return _internal_state();
}
inline void SInviteTrialEnd::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SInviteTrialEnd::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:spaceDraft.SInviteTrialEnd.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spaceDraft

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_spaceDraft_2eproto
