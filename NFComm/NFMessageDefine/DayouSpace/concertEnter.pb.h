// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: concertEnter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_concertEnter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_concertEnter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_concertEnter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_concertEnter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_concertEnter_2eproto;
namespace concert {
class CEnterConcert;
class CEnterConcertDefaultTypeInternal;
extern CEnterConcertDefaultTypeInternal _CEnterConcert_default_instance_;
class CEnterConcertMain;
class CEnterConcertMainDefaultTypeInternal;
extern CEnterConcertMainDefaultTypeInternal _CEnterConcertMain_default_instance_;
class SEnterConcert;
class SEnterConcertDefaultTypeInternal;
extern SEnterConcertDefaultTypeInternal _SEnterConcert_default_instance_;
class SEnterConcertMain;
class SEnterConcertMainDefaultTypeInternal;
extern SEnterConcertMainDefaultTypeInternal _SEnterConcertMain_default_instance_;
}  // namespace concert
PROTOBUF_NAMESPACE_OPEN
template<> ::concert::CEnterConcert* Arena::CreateMaybeMessage<::concert::CEnterConcert>(Arena*);
template<> ::concert::CEnterConcertMain* Arena::CreateMaybeMessage<::concert::CEnterConcertMain>(Arena*);
template<> ::concert::SEnterConcert* Arena::CreateMaybeMessage<::concert::SEnterConcert>(Arena*);
template<> ::concert::SEnterConcertMain* Arena::CreateMaybeMessage<::concert::SEnterConcertMain>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace concert {

// ===================================================================

class CEnterConcert :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.CEnterConcert) */ {
 public:
  CEnterConcert();
  virtual ~CEnterConcert();

  CEnterConcert(const CEnterConcert& from);
  CEnterConcert(CEnterConcert&& from) noexcept
    : CEnterConcert() {
    *this = ::std::move(from);
  }

  inline CEnterConcert& operator=(const CEnterConcert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEnterConcert& operator=(CEnterConcert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CEnterConcert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEnterConcert* internal_default_instance() {
    return reinterpret_cast<const CEnterConcert*>(
               &_CEnterConcert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CEnterConcert& a, CEnterConcert& b) {
    a.Swap(&b);
  }
  inline void Swap(CEnterConcert* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CEnterConcert* New() const final {
    return CreateMaybeMessage<CEnterConcert>(nullptr);
  }

  CEnterConcert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CEnterConcert>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CEnterConcert& from);
  void MergeFrom(const CEnterConcert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEnterConcert* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.CEnterConcert";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertEnter_2eproto);
    return ::descriptor_table_concertEnter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:concert.CEnterConcert)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertEnter_2eproto;
};
// -------------------------------------------------------------------

class SEnterConcert :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.SEnterConcert) */ {
 public:
  SEnterConcert();
  virtual ~SEnterConcert();

  SEnterConcert(const SEnterConcert& from);
  SEnterConcert(SEnterConcert&& from) noexcept
    : SEnterConcert() {
    *this = ::std::move(from);
  }

  inline SEnterConcert& operator=(const SEnterConcert& from) {
    CopyFrom(from);
    return *this;
  }
  inline SEnterConcert& operator=(SEnterConcert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SEnterConcert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SEnterConcert* internal_default_instance() {
    return reinterpret_cast<const SEnterConcert*>(
               &_SEnterConcert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SEnterConcert& a, SEnterConcert& b) {
    a.Swap(&b);
  }
  inline void Swap(SEnterConcert* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SEnterConcert* New() const final {
    return CreateMaybeMessage<SEnterConcert>(nullptr);
  }

  SEnterConcert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SEnterConcert>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SEnterConcert& from);
  void MergeFrom(const SEnterConcert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SEnterConcert* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.SEnterConcert";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertEnter_2eproto);
    return ::descriptor_table_concertEnter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
    kServerTimeFieldNumber = 2,
    kConcertStartTimeFieldNumber = 3,
    kBeforeSceneTimeFieldNumber = 4,
    kMainSceneTimeFieldNumber = 5,
    kCanEnterMainFieldNumber = 6,
    kIsReserveFieldNumber = 7,
    kGoodsIdFieldNumber = 8,
    kDisconnectConcertFieldNumber = 9,
  };
  // int32 scene = 1;
  void clear_scene();
  ::PROTOBUF_NAMESPACE_ID::int32 scene() const;
  void set_scene(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene() const;
  void _internal_set_scene(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 serverTime = 2;
  void clear_servertime();
  ::PROTOBUF_NAMESPACE_ID::int32 servertime() const;
  void set_servertime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_servertime() const;
  void _internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 concertStartTime = 3;
  void clear_concertstarttime();
  ::PROTOBUF_NAMESPACE_ID::int32 concertstarttime() const;
  void set_concertstarttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_concertstarttime() const;
  void _internal_set_concertstarttime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 beforeSceneTime = 4;
  void clear_beforescenetime();
  ::PROTOBUF_NAMESPACE_ID::int32 beforescenetime() const;
  void set_beforescenetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_beforescenetime() const;
  void _internal_set_beforescenetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mainSceneTime = 5;
  void clear_mainscenetime();
  ::PROTOBUF_NAMESPACE_ID::int32 mainscenetime() const;
  void set_mainscenetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mainscenetime() const;
  void _internal_set_mainscenetime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 canEnterMain = 6;
  void clear_canentermain();
  ::PROTOBUF_NAMESPACE_ID::int32 canentermain() const;
  void set_canentermain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_canentermain() const;
  void _internal_set_canentermain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 isReserve = 7;
  void clear_isreserve();
  ::PROTOBUF_NAMESPACE_ID::int32 isreserve() const;
  void set_isreserve(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_isreserve() const;
  void _internal_set_isreserve(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 goodsId = 8;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_goodsid() const;
  void _internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 disconnectConcert = 9;
  void clear_disconnectconcert();
  ::PROTOBUF_NAMESPACE_ID::int32 disconnectconcert() const;
  void set_disconnectconcert(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_disconnectconcert() const;
  void _internal_set_disconnectconcert(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:concert.SEnterConcert)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_;
  ::PROTOBUF_NAMESPACE_ID::int32 servertime_;
  ::PROTOBUF_NAMESPACE_ID::int32 concertstarttime_;
  ::PROTOBUF_NAMESPACE_ID::int32 beforescenetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 mainscenetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 canentermain_;
  ::PROTOBUF_NAMESPACE_ID::int32 isreserve_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 disconnectconcert_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertEnter_2eproto;
};
// -------------------------------------------------------------------

class CEnterConcertMain :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.CEnterConcertMain) */ {
 public:
  CEnterConcertMain();
  virtual ~CEnterConcertMain();

  CEnterConcertMain(const CEnterConcertMain& from);
  CEnterConcertMain(CEnterConcertMain&& from) noexcept
    : CEnterConcertMain() {
    *this = ::std::move(from);
  }

  inline CEnterConcertMain& operator=(const CEnterConcertMain& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEnterConcertMain& operator=(CEnterConcertMain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CEnterConcertMain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CEnterConcertMain* internal_default_instance() {
    return reinterpret_cast<const CEnterConcertMain*>(
               &_CEnterConcertMain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CEnterConcertMain& a, CEnterConcertMain& b) {
    a.Swap(&b);
  }
  inline void Swap(CEnterConcertMain* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CEnterConcertMain* New() const final {
    return CreateMaybeMessage<CEnterConcertMain>(nullptr);
  }

  CEnterConcertMain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CEnterConcertMain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CEnterConcertMain& from);
  void MergeFrom(const CEnterConcertMain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEnterConcertMain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.CEnterConcertMain";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertEnter_2eproto);
    return ::descriptor_table_concertEnter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:concert.CEnterConcertMain)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertEnter_2eproto;
};
// -------------------------------------------------------------------

class SEnterConcertMain :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:concert.SEnterConcertMain) */ {
 public:
  SEnterConcertMain();
  virtual ~SEnterConcertMain();

  SEnterConcertMain(const SEnterConcertMain& from);
  SEnterConcertMain(SEnterConcertMain&& from) noexcept
    : SEnterConcertMain() {
    *this = ::std::move(from);
  }

  inline SEnterConcertMain& operator=(const SEnterConcertMain& from) {
    CopyFrom(from);
    return *this;
  }
  inline SEnterConcertMain& operator=(SEnterConcertMain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SEnterConcertMain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SEnterConcertMain* internal_default_instance() {
    return reinterpret_cast<const SEnterConcertMain*>(
               &_SEnterConcertMain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SEnterConcertMain& a, SEnterConcertMain& b) {
    a.Swap(&b);
  }
  inline void Swap(SEnterConcertMain* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SEnterConcertMain* New() const final {
    return CreateMaybeMessage<SEnterConcertMain>(nullptr);
  }

  SEnterConcertMain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SEnterConcertMain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SEnterConcertMain& from);
  void MergeFrom(const SEnterConcertMain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SEnterConcertMain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "concert.SEnterConcertMain";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_concertEnter_2eproto);
    return ::descriptor_table_concertEnter_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:concert.SEnterConcertMain)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_concertEnter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CEnterConcert

// -------------------------------------------------------------------

// SEnterConcert

// int32 scene = 1;
inline void SEnterConcert::clear_scene() {
  scene_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::_internal_scene() const {
  return scene_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::scene() const {
  // @@protoc_insertion_point(field_get:concert.SEnterConcert.scene)
  return _internal_scene();
}
inline void SEnterConcert::_internal_set_scene(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_ = value;
}
inline void SEnterConcert::set_scene(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene(value);
  // @@protoc_insertion_point(field_set:concert.SEnterConcert.scene)
}

// int32 serverTime = 2;
inline void SEnterConcert::clear_servertime() {
  servertime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::_internal_servertime() const {
  return servertime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::servertime() const {
  // @@protoc_insertion_point(field_get:concert.SEnterConcert.serverTime)
  return _internal_servertime();
}
inline void SEnterConcert::_internal_set_servertime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  servertime_ = value;
}
inline void SEnterConcert::set_servertime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_servertime(value);
  // @@protoc_insertion_point(field_set:concert.SEnterConcert.serverTime)
}

// int32 concertStartTime = 3;
inline void SEnterConcert::clear_concertstarttime() {
  concertstarttime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::_internal_concertstarttime() const {
  return concertstarttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::concertstarttime() const {
  // @@protoc_insertion_point(field_get:concert.SEnterConcert.concertStartTime)
  return _internal_concertstarttime();
}
inline void SEnterConcert::_internal_set_concertstarttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  concertstarttime_ = value;
}
inline void SEnterConcert::set_concertstarttime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_concertstarttime(value);
  // @@protoc_insertion_point(field_set:concert.SEnterConcert.concertStartTime)
}

// int32 beforeSceneTime = 4;
inline void SEnterConcert::clear_beforescenetime() {
  beforescenetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::_internal_beforescenetime() const {
  return beforescenetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::beforescenetime() const {
  // @@protoc_insertion_point(field_get:concert.SEnterConcert.beforeSceneTime)
  return _internal_beforescenetime();
}
inline void SEnterConcert::_internal_set_beforescenetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beforescenetime_ = value;
}
inline void SEnterConcert::set_beforescenetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_beforescenetime(value);
  // @@protoc_insertion_point(field_set:concert.SEnterConcert.beforeSceneTime)
}

// int32 mainSceneTime = 5;
inline void SEnterConcert::clear_mainscenetime() {
  mainscenetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::_internal_mainscenetime() const {
  return mainscenetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::mainscenetime() const {
  // @@protoc_insertion_point(field_get:concert.SEnterConcert.mainSceneTime)
  return _internal_mainscenetime();
}
inline void SEnterConcert::_internal_set_mainscenetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mainscenetime_ = value;
}
inline void SEnterConcert::set_mainscenetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mainscenetime(value);
  // @@protoc_insertion_point(field_set:concert.SEnterConcert.mainSceneTime)
}

// int32 canEnterMain = 6;
inline void SEnterConcert::clear_canentermain() {
  canentermain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::_internal_canentermain() const {
  return canentermain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::canentermain() const {
  // @@protoc_insertion_point(field_get:concert.SEnterConcert.canEnterMain)
  return _internal_canentermain();
}
inline void SEnterConcert::_internal_set_canentermain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  canentermain_ = value;
}
inline void SEnterConcert::set_canentermain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_canentermain(value);
  // @@protoc_insertion_point(field_set:concert.SEnterConcert.canEnterMain)
}

// int32 isReserve = 7;
inline void SEnterConcert::clear_isreserve() {
  isreserve_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::_internal_isreserve() const {
  return isreserve_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::isreserve() const {
  // @@protoc_insertion_point(field_get:concert.SEnterConcert.isReserve)
  return _internal_isreserve();
}
inline void SEnterConcert::_internal_set_isreserve(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  isreserve_ = value;
}
inline void SEnterConcert::set_isreserve(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_isreserve(value);
  // @@protoc_insertion_point(field_set:concert.SEnterConcert.isReserve)
}

// int32 goodsId = 8;
inline void SEnterConcert::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::_internal_goodsid() const {
  return goodsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::goodsid() const {
  // @@protoc_insertion_point(field_get:concert.SEnterConcert.goodsId)
  return _internal_goodsid();
}
inline void SEnterConcert::_internal_set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
}
inline void SEnterConcert::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_goodsid(value);
  // @@protoc_insertion_point(field_set:concert.SEnterConcert.goodsId)
}

// int32 disconnectConcert = 9;
inline void SEnterConcert::clear_disconnectconcert() {
  disconnectconcert_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::_internal_disconnectconcert() const {
  return disconnectconcert_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SEnterConcert::disconnectconcert() const {
  // @@protoc_insertion_point(field_get:concert.SEnterConcert.disconnectConcert)
  return _internal_disconnectconcert();
}
inline void SEnterConcert::_internal_set_disconnectconcert(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  disconnectconcert_ = value;
}
inline void SEnterConcert::set_disconnectconcert(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_disconnectconcert(value);
  // @@protoc_insertion_point(field_set:concert.SEnterConcert.disconnectConcert)
}

// -------------------------------------------------------------------

// CEnterConcertMain

// -------------------------------------------------------------------

// SEnterConcertMain

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace concert

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_concertEnter_2eproto
