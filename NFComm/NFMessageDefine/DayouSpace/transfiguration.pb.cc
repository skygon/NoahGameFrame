// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transfiguration.proto

#include "transfiguration.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace transfiguration {
class CTransfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CTransfiguration> _instance;
} _CTransfiguration_default_instance_;
class STransfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STransfiguration> _instance;
} _STransfiguration_default_instance_;
}  // namespace transfiguration
static void InitDefaultsscc_info_CTransfiguration_transfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transfiguration::_CTransfiguration_default_instance_;
    new (ptr) ::transfiguration::CTransfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transfiguration::CTransfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CTransfiguration_transfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CTransfiguration_transfiguration_2eproto}, {}};

static void InitDefaultsscc_info_STransfiguration_transfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::transfiguration::_STransfiguration_default_instance_;
    new (ptr) ::transfiguration::STransfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transfiguration::STransfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STransfiguration_transfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STransfiguration_transfiguration_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transfiguration_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transfiguration_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transfiguration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transfiguration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transfiguration::CTransfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transfiguration::CTransfiguration, assetkeys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transfiguration::STransfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transfiguration::STransfiguration, duration_),
  PROTOBUF_FIELD_OFFSET(::transfiguration::STransfiguration, uidlist_),
  PROTOBUF_FIELD_OFFSET(::transfiguration::STransfiguration, assetkeys_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::transfiguration::CTransfiguration)},
  { 6, -1, sizeof(::transfiguration::STransfiguration)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transfiguration::_CTransfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transfiguration::_STransfiguration_default_instance_),
};

const char descriptor_table_protodef_transfiguration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025transfiguration.proto\022\017transfiguration"
  "\"%\n\020CTransfiguration\022\021\n\tassetKeys\030\001 \001(\t\""
  "H\n\020STransfiguration\022\020\n\010duration\030\001 \001(\005\022\017\n"
  "\007uidList\030\002 \003(\005\022\021\n\tassetKeys\030\003 \001(\tB4\n\030com"
  ".dayou.space.protobufB\017TransfigurationZ\002"
  "./\252\002\002Pbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_transfiguration_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_transfiguration_2eproto_sccs[2] = {
  &scc_info_CTransfiguration_transfiguration_2eproto.base,
  &scc_info_STransfiguration_transfiguration_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transfiguration_2eproto_once;
static bool descriptor_table_transfiguration_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transfiguration_2eproto = {
  &descriptor_table_transfiguration_2eproto_initialized, descriptor_table_protodef_transfiguration_2eproto, "transfiguration.proto", 215,
  &descriptor_table_transfiguration_2eproto_once, descriptor_table_transfiguration_2eproto_sccs, descriptor_table_transfiguration_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_transfiguration_2eproto::offsets,
  file_level_metadata_transfiguration_2eproto, 2, file_level_enum_descriptors_transfiguration_2eproto, file_level_service_descriptors_transfiguration_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_transfiguration_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_transfiguration_2eproto), true);
namespace transfiguration {

// ===================================================================

void CTransfiguration::InitAsDefaultInstance() {
}
class CTransfiguration::_Internal {
 public:
};

CTransfiguration::CTransfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transfiguration.CTransfiguration)
}
CTransfiguration::CTransfiguration(const CTransfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  assetkeys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetkeys().empty()) {
    assetkeys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetkeys_);
  }
  // @@protoc_insertion_point(copy_constructor:transfiguration.CTransfiguration)
}

void CTransfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CTransfiguration_transfiguration_2eproto.base);
  assetkeys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CTransfiguration::~CTransfiguration() {
  // @@protoc_insertion_point(destructor:transfiguration.CTransfiguration)
  SharedDtor();
}

void CTransfiguration::SharedDtor() {
  assetkeys_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CTransfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CTransfiguration& CTransfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CTransfiguration_transfiguration_2eproto.base);
  return *internal_default_instance();
}


void CTransfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:transfiguration.CTransfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assetkeys_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CTransfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string assetKeys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_assetkeys();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transfiguration.CTransfiguration.assetKeys"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CTransfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transfiguration.CTransfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string assetKeys = 1;
  if (this->assetkeys().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetkeys().data(), static_cast<int>(this->_internal_assetkeys().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transfiguration.CTransfiguration.assetKeys");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_assetkeys(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transfiguration.CTransfiguration)
  return target;
}

size_t CTransfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transfiguration.CTransfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string assetKeys = 1;
  if (this->assetkeys().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetkeys());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CTransfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transfiguration.CTransfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const CTransfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CTransfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transfiguration.CTransfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transfiguration.CTransfiguration)
    MergeFrom(*source);
  }
}

void CTransfiguration::MergeFrom(const CTransfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transfiguration.CTransfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.assetkeys().size() > 0) {

    assetkeys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetkeys_);
  }
}

void CTransfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transfiguration.CTransfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTransfiguration::CopyFrom(const CTransfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transfiguration.CTransfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTransfiguration::IsInitialized() const {
  return true;
}

void CTransfiguration::InternalSwap(CTransfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  assetkeys_.Swap(&other->assetkeys_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CTransfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STransfiguration::InitAsDefaultInstance() {
}
class STransfiguration::_Internal {
 public:
};

STransfiguration::STransfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:transfiguration.STransfiguration)
}
STransfiguration::STransfiguration(const STransfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uidlist_(from.uidlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  assetkeys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_assetkeys().empty()) {
    assetkeys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetkeys_);
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:transfiguration.STransfiguration)
}

void STransfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_STransfiguration_transfiguration_2eproto.base);
  assetkeys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
}

STransfiguration::~STransfiguration() {
  // @@protoc_insertion_point(destructor:transfiguration.STransfiguration)
  SharedDtor();
}

void STransfiguration::SharedDtor() {
  assetkeys_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void STransfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STransfiguration& STransfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STransfiguration_transfiguration_2eproto.base);
  return *internal_default_instance();
}


void STransfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:transfiguration.STransfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uidlist_.Clear();
  assetkeys_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_ = 0;
  _internal_metadata_.Clear();
}

const char* STransfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 uidList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_uidlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_uidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string assetKeys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_assetkeys();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transfiguration.STransfiguration.assetKeys"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STransfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transfiguration.STransfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 duration = 1;
  if (this->duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_duration(), target);
  }

  // repeated int32 uidList = 2;
  {
    int byte_size = _uidlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_uidlist(), byte_size, target);
    }
  }

  // string assetKeys = 3;
  if (this->assetkeys().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assetkeys().data(), static_cast<int>(this->_internal_assetkeys().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transfiguration.STransfiguration.assetKeys");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_assetkeys(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transfiguration.STransfiguration)
  return target;
}

size_t STransfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transfiguration.STransfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 uidList = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->uidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uidlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string assetKeys = 3;
  if (this->assetkeys().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assetkeys());
  }

  // int32 duration = 1;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STransfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transfiguration.STransfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const STransfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STransfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transfiguration.STransfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transfiguration.STransfiguration)
    MergeFrom(*source);
  }
}

void STransfiguration::MergeFrom(const STransfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transfiguration.STransfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uidlist_.MergeFrom(from.uidlist_);
  if (from.assetkeys().size() > 0) {

    assetkeys_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetkeys_);
  }
  if (from.duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
}

void STransfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transfiguration.STransfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STransfiguration::CopyFrom(const STransfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transfiguration.STransfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STransfiguration::IsInitialized() const {
  return true;
}

void STransfiguration::InternalSwap(STransfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uidlist_.InternalSwap(&other->uidlist_);
  assetkeys_.Swap(&other->assetkeys_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STransfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transfiguration
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transfiguration::CTransfiguration* Arena::CreateMaybeMessage< ::transfiguration::CTransfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::transfiguration::CTransfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::transfiguration::STransfiguration* Arena::CreateMaybeMessage< ::transfiguration::STransfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::transfiguration::STransfiguration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
